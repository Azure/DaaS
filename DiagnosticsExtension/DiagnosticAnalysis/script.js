/*! For license information please see script.js.LICENSE.txt */
(()=>{var e,t,n={757:(e,t,n)=>{e.exports=n(666)},431:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,".resultCard {\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.078);\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/ResultsGroups/ResultCard.css"],names:[],mappings:"AAAA;EACE,0CAA0C;EAC1C,6BAA6B;EAC7B,kBAAkB;EAClB,sBAAsB;AACxB",sourcesContent:[".resultCard {\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.078);\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=r(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var d=0;d<s.length;d++)o.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},448:(e,t,n)=>{"use strict";var o=n(294),r=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,o,r,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,o){var r=v.hasOwnProperty(t)?v[t]:null;(null!==r?0===r.type:!o&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,o)&&(n=null),o||null===r?function(e){return!!f.call(m,e)||!f.call(h,e)&&(p.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,o=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,w=60107,x=60108,E=60114,I=60109,D=60110,R=60112,T=60113,P=60120,M=60115,F=60116,L=60121,A=60128,N=60129,B=60130,H=60131;if("function"==typeof Symbol&&Symbol.for){var O=Symbol.for;k=O("react.element"),S=O("react.portal"),w=O("react.fragment"),x=O("react.strict_mode"),E=O("react.profiler"),I=O("react.provider"),D=O("react.context"),R=O("react.forward_ref"),T=O("react.suspense"),P=O("react.suspense_list"),M=O("react.memo"),F=O("react.lazy"),L=O("react.block"),O("react.scope"),A=O("react.opaque.id"),N=O("react.debug_trace_mode"),B=O("react.offscreen"),H=O("react.legacy_hidden")}var z,W="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function V(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var G=!1;function j(e,t){if(!e||G)return"";G=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(e){if(e&&o&&"string"==typeof e.stack){for(var r=e.stack.split("\n"),i=o.stack.split("\n"),a=r.length-1,s=i.length-1;1<=a&&0<=s&&r[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(r[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||r[a]!==i[s])return"\n"+r[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{G=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function K(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 22:return j(e.type._render,!1);case 1:return j(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case w:return"Fragment";case S:return"Portal";case E:return"Profiler";case x:return"StrictMode";case T:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case D:return(e.displayName||"Context")+".Consumer";case I:return(e._context.displayName||"Context")+".Provider";case R:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case M:return q(e.type);case L:return q(e._render);case F:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Z(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){o=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=Q(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=Z(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Z(t.value),o=t.type;if(null!=n)"number"===o?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===o||"reset"===o)return void e.removeAttribute("value");t.hasOwnProperty("value")?re(e,t.type,n):t.hasOwnProperty("defaultValue")&&re(e,t.type,Z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(!("submit"!==o&&"reset"!==o||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function re(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+Z(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(o&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Z(n)}}function ue(e,t){var n=Z(t.value),o=Z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=o&&(e.defaultValue=""+o)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Ce(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),r=_e(n,t[n],o);"float"===n&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function we(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ie=null,De=null;function Re(e){if(e=nr(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=rr(t),Ee(e.stateNode,e.type,t))}}function Te(e){Ie?De?De.push(e):De=[e]:Ie=e}function Pe(){if(Ie){var e=Ie,t=De;if(De=Ie=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Me(e,t){return e(t)}function Fe(e,t,n,o,r){return e(t,n,o,r)}function Le(){}var Ae=Me,Ne=!1,Be=!1;function He(){null===Ie&&null===De||(Le(),Pe())}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var o=rr(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var ze=!1;if(d)try{var We={};Object.defineProperty(We,"passive",{get:function(){ze=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(me){ze=!1}function Ue(e,t,n,o,r,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ve=!1,Ge=null,je=!1,Ke=null,qe={onError:function(e){Ve=!0,Ge=e}};function Ze(e,t,n,o,r,i,a,s,l){Ve=!1,Ge=null,Ue.apply(qe,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Qe(e)!==e)throw Error(a(188))}function Xe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Je,et,tt,nt,ot=!1,rt=[],it=null,at=null,st=null,lt=new Map,ut=new Map,ct=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,o,r){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[o]}}function ft(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":at=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function ht(e,t,n,o,r,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,o,r,i),null!==t&&null!==(t=nr(t))&&et(t),e):(e.eventSystemFlags|=o,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function mt(e){var t=tr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=$t(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=nr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){gt(e)&&n.delete(t)}function yt(){for(ot=!1;0<rt.length;){var e=rt[0];if(null!==e.blockedOn){null!==(e=nr(e.blockedOn))&&Je(e);break}for(var t=e.targetContainers;0<t.length;){var n=$t(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&rt.shift()}null!==it&&gt(it)&&(it=null),null!==at&&gt(at)&&(at=null),null!==st&&gt(st)&&(st=null),lt.forEach(vt),ut.forEach(vt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,yt)))}function _t(e){function t(t){return bt(t,e)}if(0<rt.length){bt(rt[0],e);for(var n=1;n<rt.length;n++){var o=rt[n];o.blockedOn===e&&(o.blockedOn=null)}}for(null!==it&&bt(it,e),null!==at&&bt(at,e),null!==st&&bt(st,e),lt.forEach(t),ut.forEach(t),n=0;n<ct.length;n++)(o=ct[n]).blockedOn===e&&(o.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)mt(n),null===n.blockedOn&&ct.shift()}function Ct(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Ct("Animation","AnimationEnd"),animationiteration:Ct("Animation","AnimationIteration"),animationstart:Ct("Animation","AnimationStart"),transitionend:Ct("Transition","TransitionEnd")},St={},wt={};function xt(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in wt)return St[e]=n[t];return e}d&&(wt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Et=xt("animationend"),It=xt("animationiteration"),Dt=xt("animationstart"),Rt=xt("transitionend"),Tt=new Map,Pt=new Map,Mt=["abort","abort",Et,"animationEnd",It,"animationIteration",Dt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Rt,"transitionEnd","waiting","waiting"];function Ft(e,t){for(var n=0;n<e.length;n+=2){var o=e[n],r=e[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),Pt.set(o,t),Tt.set(o,r),u(r,[o])}}(0,i.unstable_now)();var Lt=8;function At(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Nt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var o=0,r=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)o=i,r=Lt=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(o=At(l),r=Lt):0!=(s&=i)&&(o=At(s),r=Lt)}else 0!=(i=n&~a)?(o=At(i),r=Lt):0!==s&&(o=At(s),r=Lt);if(0===o)return 0;if(o=n&((0>(o=31-Ut(o))?0:1<<o)<<1)-1,0!==t&&t!==o&&0==(t&a)){if(At(t),r<=Lt)return t;Lt=r}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=o;0<t;)r=1<<(n=31-Ut(t)),o|=e[n],t&=~r;return o}function Bt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ht(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ot(24&~t))?Ht(10,t):e;case 10:return 0===(e=Ot(192&~t))?Ht(8,t):e;case 8:return 0===(e=Ot(3584&~t))&&0===(e=Ot(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ot(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ot(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var o=t-1;e.suspendedLanes&=o,e.pingedLanes&=o,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Gt|0)|0},Vt=Math.log,Gt=Math.LN2,jt=i.unstable_UserBlockingPriority,Kt=i.unstable_runWithPriority,qt=!0;function Zt(e,t,n,o){Ne||Le();var r=Yt,i=Ne;Ne=!0;try{Fe(r,e,t,n,o)}finally{(Ne=i)||He()}}function Qt(e,t,n,o){Kt(jt,Yt.bind(null,e,t,n,o))}function Yt(e,t,n,o){var r;if(qt)if((r=0==(4&t))&&0<rt.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,o),rt.push(e);else{var i=$t(e,t,n,o);if(null===i)r&&ft(e,o);else{if(r){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,o),void rt.push(e);if(function(e,t,n,o,r){switch(t){case"focusin":return it=ht(it,e,t,n,o,r),!0;case"dragenter":return at=ht(at,e,t,n,o,r),!0;case"mouseover":return st=ht(st,e,t,n,o,r),!0;case"pointerover":var i=r.pointerId;return lt.set(i,ht(lt.get(i)||null,e,t,n,o,r)),!0;case"gotpointercapture":return i=r.pointerId,ut.set(i,ht(ut.get(i)||null,e,t,n,o,r)),!0}return!1}(i,e,t,n,o))return;ft(e,o)}Lo(e,t,o,null,n)}}}function $t(e,t,n,o){var r=xe(o);if(null!==(r=tr(r))){var i=Qe(r);if(null===i)r=null;else{var a=i.tag;if(13===a){if(null!==(r=Ye(i)))return r;r=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;r=null}else i!==r&&(r=null)}}return Lo(e,t,o,r,n),null}var Xt=null,Jt=null,en=null;function tn(){if(en)return en;var e,t,n=Jt,o=n.length,r="value"in Xt?Xt.value:Xt.textContent,i=r.length;for(e=0;e<o&&n[e]===r[e];e++);var a=o-e;for(t=1;t<=a&&n[o-t]===r[i-t];t++);return en=r.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function rn(){return!1}function an(e){function t(t,n,o,r,i){for(var a in this._reactName=t,this._targetInst=o,this.type=n,this.nativeEvent=r,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(r):r[a]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?on:rn,this.isPropagationStopped=rn,this}return r(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=an(cn),pn=r({},cn,{view:0,detail:0}),fn=an(pn),hn=r({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(sn=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=sn=0,un=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(hn),gn=an(r({},hn,{dataTransfer:0})),vn=an(r({},pn,{relatedTarget:0})),yn=an(r({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=r({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=an(bn),Cn=an(r({},cn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=wn[e])&&!!t[e]}function En(){return xn}var In=r({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Dn=an(In),Rn=an(r({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(r({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=an(r({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Mn=r({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fn=an(Mn),Ln=[9,13,27,32],An=d&&"CompositionEvent"in window,Nn=null;d&&"documentMode"in document&&(Nn=document.documentMode);var Bn=d&&"TextEvent"in window&&!Nn,Hn=d&&(!An||Nn&&8<Nn&&11>=Nn),On=String.fromCharCode(32),zn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Gn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Gn[e.type]:"textarea"===t}function Kn(e,t,n,o){Te(o),0<(t=No(t,"onChange")).length&&(n=new dn("onChange","change",null,n,o),e.push({event:n,listeners:t}))}var qn=null,Zn=null;function Qn(e){Do(e,0)}function Yn(e){if($(or(e)))return e}function $n(e,t){if("change"===e)return t}var Xn=!1;if(d){var Jn;if(d){var eo="oninput"in document;if(!eo){var to=document.createElement("div");to.setAttribute("oninput","return;"),eo="function"==typeof to.oninput}Jn=eo}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function no(){qn&&(qn.detachEvent("onpropertychange",oo),Zn=qn=null)}function oo(e){if("value"===e.propertyName&&Yn(Zn)){var t=[];if(Kn(t,Zn,e,xe(e)),e=Qn,Ne)e(t);else{Ne=!0;try{Me(e,t)}finally{Ne=!1,He()}}}}function ro(e,t,n){"focusin"===e?(no(),Zn=n,(qn=t).attachEvent("onpropertychange",oo)):"focusout"===e&&no()}function io(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Zn)}function ao(e,t){if("click"===e)return Yn(t)}function so(e,t){if("input"===e||"change"===e)return Yn(t)}var lo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},uo=Object.prototype.hasOwnProperty;function co(e,t){if(lo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!uo.call(t,n[o])||!lo(e[n[o]],t[n[o]]))return!1;return!0}function po(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fo(e,t){var n,o=po(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=po(o)}}function ho(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ho(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mo(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function go(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vo=d&&"documentMode"in document&&11>=document.documentMode,yo=null,bo=null,_o=null,Co=!1;function ko(e,t,n){var o=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Co||null==yo||yo!==X(o)||(o="selectionStart"in(o=yo)&&go(o)?{start:o.selectionStart,end:o.selectionEnd}:{anchorNode:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset},_o&&co(_o,o)||(_o=o,0<(o=No(bo,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:o}),t.target=yo)))}Ft("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ft("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ft(Mt,2);for(var So="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wo=0;wo<So.length;wo++)Pt.set(So[wo],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xo="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Eo=new Set("cancel close invalid load scroll toggle".split(" ").concat(xo));function Io(e,t,n){var o=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,o,r,i,s,l,u){if(Ze.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var c=Ge;Ve=!1,Ge=null,je||(je=!0,Ke=c)}}(o,t,void 0,e),e.currentTarget=null}function Do(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var o=e[n],r=o.event;o=o.listeners;e:{var i=void 0;if(t)for(var a=o.length-1;0<=a;a--){var s=o[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&r.isPropagationStopped())break e;Io(r,s,u),i=l}else for(a=0;a<o.length;a++){if(l=(s=o[a]).instance,u=s.currentTarget,s=s.listener,l!==i&&r.isPropagationStopped())break e;Io(r,s,u),i=l}}}if(je)throw e=Ke,je=!1,Ke=null,e}function Ro(e,t){var n=ir(t),o=e+"__bubble";n.has(o)||(Fo(t,e,2,!1),n.add(o))}var To="_reactListening"+Math.random().toString(36).slice(2);function Po(e){e[To]||(e[To]=!0,s.forEach((function(t){Eo.has(t)||Mo(t,!1,e,null),Mo(t,!0,e,null)})))}function Mo(e,t,n,o){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==o&&!t&&Eo.has(e)){if("scroll"!==e)return;r|=2,i=o}var a=ir(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(r|=4),Fo(i,e,r,t),a.add(s))}function Fo(e,t,n,o){var r=Pt.get(t);switch(void 0===r?2:r){case 0:r=Zt;break;case 1:r=Qt;break;default:r=Yt}n=r.bind(null,t,n,e),r=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),o?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Lo(e,t,n,o,r){var i=o;if(0==(1&t)&&0==(2&t)&&null!==o)e:for(;;){if(null===o)return;var a=o.tag;if(3===a||4===a){var s=o.stateNode.containerInfo;if(s===r||8===s.nodeType&&s.parentNode===r)break;if(4===a)for(a=o.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;a=a.return}for(;null!==s;){if(null===(a=tr(s)))return;if(5===(l=a.tag)||6===l){o=i=a;continue e}s=s.parentNode}}o=o.return}!function(e,t,n){if(Be)return e();Be=!0;try{Ae(e,t,n)}finally{Be=!1,He()}}((function(){var o=i,r=xe(n),a=[];e:{var s=Tt.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":l=Dn;break;case"focusin":u="focus",l=vn;break;case"focusout":u="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case Et:case It:case Dt:l=yn;break;case Rt:l=Pn;break;case"scroll":l=fn;break;case"wheel":l=Fn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Rn}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==s?s+"Capture":null:s;c=[];for(var f,h=o;null!==h;){var m=(f=h).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==p&&null!=(m=Oe(h,p))&&c.push(Ao(h,m,f))),d)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,r),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!tr(u)&&!u[Jo])&&(l||s)&&(s=r.window===r?r:(s=r.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=o,null!==(u=(u=n.relatedTarget||n.toElement)?tr(u):null)&&(u!==(d=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=o),l!==u)){if(c=mn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Rn,m="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==l?s:or(l),f=null==u?s:or(u),(s=new c(m,h+"leave",l,n,r)).target=d,s.relatedTarget=f,m=null,tr(r)===o&&((c=new c(p,h+"enter",u,n,r)).target=f,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(p=u,h=0,f=c=l;f;f=Bo(f))h++;for(f=0,m=p;m;m=Bo(m))f++;for(;0<h-f;)c=Bo(c),h--;for(;0<f-h;)p=Bo(p),f--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=Bo(c),p=Bo(p)}c=null}else c=null;null!==l&&Ho(a,s,l,c,!1),null!==u&&null!==d&&Ho(a,d,u,c,!0)}if("select"===(l=(s=o?or(o):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=$n;else if(jn(s))if(Xn)g=so;else{g=io;var v=ro}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ao);switch(g&&(g=g(e,o))?Kn(a,g,n,r):(v&&v(e,s,o),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&re(s,"number",s.value)),v=o?or(o):window,e){case"focusin":(jn(v)||"true"===v.contentEditable)&&(yo=v,bo=o,_o=null);break;case"focusout":_o=bo=yo=null;break;case"mousedown":Co=!0;break;case"contextmenu":case"mouseup":case"dragend":Co=!1,ko(a,n,r);break;case"selectionchange":if(vo)break;case"keydown":case"keyup":ko(a,n,r)}var y;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Wn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Hn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=tn()):(Jt="value"in(Xt=r)?Xt.value:Xt.textContent,Vn=!0)),0<(v=No(o,b)).length&&(b=new Cn(b,e,null,n,r),a.push({event:b,listeners:v}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=Bn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,On);case"textInput":return(e=t.data)===On&&zn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!An&&Wn(e,t)?(e=tn(),en=Jt=Xt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Hn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(o=No(o,"onBeforeInput")).length&&(r=new Cn("onBeforeInput","beforeinput",null,n,r),a.push({event:r,listeners:o}),r.data=y)}Do(a,t)}))}function Ao(e,t,n){return{instance:e,listener:t,currentTarget:n}}function No(e,t){for(var n=t+"Capture",o=[];null!==e;){var r=e,i=r.stateNode;5===r.tag&&null!==i&&(r=i,null!=(i=Oe(e,n))&&o.unshift(Ao(e,i,r)),null!=(i=Oe(e,t))&&o.push(Ao(e,i,r))),e=e.return}return o}function Bo(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ho(e,t,n,o,r){for(var i=t._reactName,a=[];null!==n&&n!==o;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===o)break;5===s.tag&&null!==u&&(s=u,r?null!=(l=Oe(n,i))&&a.unshift(Ao(n,l,s)):r||null!=(l=Oe(n,i))&&a.push(Ao(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Oo(){}var zo=null,Wo=null;function Uo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vo(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Go="function"==typeof setTimeout?setTimeout:void 0,jo="function"==typeof clearTimeout?clearTimeout:void 0;function Ko(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Zo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qo=0,Yo=Math.random().toString(36).slice(2),$o="__reactFiber$"+Yo,Xo="__reactProps$"+Yo,Jo="__reactContainer$"+Yo,er="__reactEvents$"+Yo;function tr(e){var t=e[$o];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jo]||n[$o]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Zo(e);null!==e;){if(n=e[$o])return n;e=Zo(e)}return t}n=(e=n).parentNode}return null}function nr(e){return!(e=e[$o]||e[Jo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function or(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function rr(e){return e[Xo]||null}function ir(e){var t=e[er];return void 0===t&&(t=e[er]=new Set),t}var ar=[],sr=-1;function lr(e){return{current:e}}function ur(e){0>sr||(e.current=ar[sr],ar[sr]=null,sr--)}function cr(e,t){sr++,ar[sr]=e.current,e.current=t}var dr={},pr=lr(dr),fr=lr(!1),hr=dr;function mr(e,t){var n=e.type.contextTypes;if(!n)return dr;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var r,i={};for(r in n)i[r]=t[r];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function gr(e){return null!=e.childContextTypes}function vr(){ur(fr),ur(pr)}function yr(e,t,n){if(pr.current!==dr)throw Error(a(168));cr(pr,t),cr(fr,n)}function br(e,t,n){var o=e.stateNode;if(e=t.childContextTypes,"function"!=typeof o.getChildContext)return n;for(var i in o=o.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return r({},n,o)}function _r(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||dr,hr=pr.current,cr(pr,e),cr(fr,fr.current),!0}function Cr(e,t,n){var o=e.stateNode;if(!o)throw Error(a(169));n?(e=br(e,t,hr),o.__reactInternalMemoizedMergedChildContext=e,ur(fr),ur(pr),cr(pr,e)):ur(fr),cr(fr,n)}var kr=null,Sr=null,wr=i.unstable_runWithPriority,xr=i.unstable_scheduleCallback,Er=i.unstable_cancelCallback,Ir=i.unstable_shouldYield,Dr=i.unstable_requestPaint,Rr=i.unstable_now,Tr=i.unstable_getCurrentPriorityLevel,Pr=i.unstable_ImmediatePriority,Mr=i.unstable_UserBlockingPriority,Fr=i.unstable_NormalPriority,Lr=i.unstable_LowPriority,Ar=i.unstable_IdlePriority,Nr={},Br=void 0!==Dr?Dr:function(){},Hr=null,Or=null,zr=!1,Wr=Rr(),Ur=1e4>Wr?Rr:function(){return Rr()-Wr};function Vr(){switch(Tr()){case Pr:return 99;case Mr:return 98;case Fr:return 97;case Lr:return 96;case Ar:return 95;default:throw Error(a(332))}}function Gr(e){switch(e){case 99:return Pr;case 98:return Mr;case 97:return Fr;case 96:return Lr;case 95:return Ar;default:throw Error(a(332))}}function jr(e,t){return e=Gr(e),wr(e,t)}function Kr(e,t,n){return e=Gr(e),xr(e,t,n)}function qr(){if(null!==Or){var e=Or;Or=null,Er(e)}Zr()}function Zr(){if(!zr&&null!==Hr){zr=!0;var e=0;try{var t=Hr;jr(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Hr=null}catch(t){throw null!==Hr&&(Hr=Hr.slice(e+1)),xr(Pr,qr),t}finally{zr=!1}}}var Qr=C.ReactCurrentBatchConfig;function Yr(e,t){if(e&&e.defaultProps){for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var $r=lr(null),Xr=null,Jr=null,ei=null;function ti(){ei=Jr=Xr=null}function ni(e){var t=$r.current;ur($r),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ri(e,t){Xr=e,ei=Jr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Aa=!0),e.firstContext=null)}function ii(e,t){if(ei!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ei=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jr){if(null===Xr)throw Error(a(308));Jr=t,Xr.dependencies={lanes:0,firstContext:t,responders:null}}else Jr=Jr.next=t;return e._currentValue}var ai=!1;function si(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ci(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,o=e.alternate;if(null!==o&&n===(o=o.updateQueue)){var r=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?r=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?r=i=t:i=i.next=t}else r=i=t;return n={baseState:o.baseState,firstBaseUpdate:r,lastBaseUpdate:i,shared:o.shared,effects:o.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,o){var i=e.updateQueue;ai=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var p=(d=d.updateQueue).lastBaseUpdate;p!==s&&(null===p?d.firstBaseUpdate=c:p.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(p=i.baseState,s=0,d=c=u=null;;){l=a.lane;var f=a.eventTime;if((o&l)===l){null!==d&&(d=d.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,f=n,m.tag){case 1:if("function"==typeof(h=m.payload)){p=h.call(f,p,l);break e}p=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(f,p,l):h))break e;p=r({},p,l);break e;case 2:ai=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=f,u=p):d=d.next=f,s|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===d&&(u=p),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,Bs|=s,e.lanes=s,e.memoizedState=p}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var o=e[t],r=o.callback;if(null!==r){if(o.callback=null,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var hi=(new o.Component).refs;function mi(e,t,n,o){n=null==(n=n(o,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var o=ll(),r=ul(e),i=ui(o,r);i.payload=t,null!=n&&(i.callback=n),ci(e,i),cl(e,r,o)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var o=ll(),r=ul(e),i=ui(o,r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ci(e,i),cl(e,r,o)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ll(),o=ul(e),r=ui(n,o);r.tag=2,null!=t&&(r.callback=t),ci(e,r),cl(e,o,n)}};function vi(e,t,n,o,r,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(o,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&co(n,o)&&co(r,i))}function yi(e,t,n){var o=!1,r=dr,i=t.contextType;return"object"==typeof i&&null!==i?i=ii(i):(r=gr(t)?hr:pr.current,i=(o=null!=(o=t.contextTypes))?mr(e,r):dr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function _i(e,t,n,o){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=hi,si(e);var i=t.contextType;"object"==typeof i&&null!==i?r.context=ii(i):(i=gr(t)?hr:pr.current,r.context=mr(e,i)),pi(e,n,r,o),r.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&gi.enqueueReplaceState(r,r.state,null),pi(e,n,r,o),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4)}var Ci=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var o=n.stateNode}if(!o)throw Error(a(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:(t=function(e){var t=o.refs;t===hi&&(t=o.refs={}),null===e?delete t[r]:t[r]=e},t._stringRef=r,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wi(e){function t(t,n){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function i(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.flags=2,n):o:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,o){return null===t||6!==t.tag?((t=Gl(n,e.mode,o)).return=e,t):((t=r(t,n)).return=e,t)}function u(e,t,n,o){return null!==t&&t.elementType===n.type?((o=r(t,n.props)).ref=ki(e,t,n),o.return=e,o):((o=Wl(n.type,n.key,n.props,null,e.mode,o)).ref=ki(e,t,n),o.return=e,o)}function c(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jl(n,e.mode,o)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,o,i){return null===t||7!==t.tag?((t=Ul(n,e.mode,o,i)).return=e,t):((t=r(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Wl(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case S:return(t=jl(t,e.mode,n)).return=e,t}if(Ci(t)||U(t))return(t=Ul(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function f(e,t,n,o){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===r?n.type===w?d(e,t,n.props.children,o,r):u(e,t,n,o):null;case S:return n.key===r?c(e,t,n,o):null}if(Ci(n)||U(n))return null!==r?null:d(e,t,n,o,null);Si(e,n)}return null}function h(e,t,n,o,r){if("string"==typeof o||"number"==typeof o)return l(t,e=e.get(n)||null,""+o,r);if("object"==typeof o&&null!==o){switch(o.$$typeof){case k:return e=e.get(null===o.key?n:o.key)||null,o.type===w?d(t,e,o.props.children,r,o.key):u(t,e,o,r);case S:return c(t,e=e.get(null===o.key?n:o.key)||null,o,r)}if(Ci(o)||U(o))return d(t,e=e.get(n)||null,o,r,null);Si(t,o)}return null}function m(r,a,s,l){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=f(r,d,s[m],l);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(r,d),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v,d=g}if(m===s.length)return n(r,d),u;if(null===d){for(;m<s.length;m++)null!==(d=p(r,s[m],l))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=o(r,d);m<s.length;m++)null!==(g=h(d,r,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(r,e)})),u}function g(r,s,l,u){var c=U(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,m=s,g=s=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=f(r,m,y.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(r,m),s=i(b,s,g),null===d?c=b:d.sibling=b,d=b,m=v}if(y.done)return n(r,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=p(r,y.value,u))&&(s=i(y,s,g),null===d?c=y:d.sibling=y,d=y);return c}for(m=o(r,m);!y.done;g++,y=l.next())null!==(y=h(m,r,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=i(y,s,g),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(r,e)})),c}return function(e,o,i,l){var u="object"==typeof i&&null!==i&&i.type===w&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case k:e:{for(c=i.key,u=o;null!==u;){if(u.key===c){if(7===u.tag){if(i.type===w){n(e,u.sibling),(o=r(u,i.props.children)).return=e,e=o;break e}}else if(u.elementType===i.type){n(e,u.sibling),(o=r(u,i.props)).ref=ki(e,u,i),o.return=e,e=o;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===w?((o=Ul(i.props.children,e.mode,l,i.key)).return=e,e=o):((l=Wl(i.type,i.key,i.props,null,e.mode,l)).ref=ki(e,o,i),l.return=e,e=l)}return s(e);case S:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),(o=r(o,i.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=jl(i,e.mode,l)).return=e,e=o}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),(o=r(o,i)).return=e,e=o):(n(e,o),(o=Gl(i,e.mode,l)).return=e,e=o),s(e);if(Ci(i))return m(e,o,i,l);if(U(i))return g(e,o,i,l);if(c&&Si(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,o)}}var xi=wi(!0),Ei=wi(!1),Ii={},Di=lr(Ii),Ri=lr(Ii),Ti=lr(Ii);function Pi(e){if(e===Ii)throw Error(a(174));return e}function Mi(e,t){switch(cr(Ti,t),cr(Ri,e),cr(Di,Ii),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ur(Di),cr(Di,t)}function Fi(){ur(Di),ur(Ri),ur(Ti)}function Li(e){Pi(Ti.current);var t=Pi(Di.current),n=fe(t,e.type);t!==n&&(cr(Ri,e),cr(Di,n))}function Ai(e){Ri.current===e&&(ur(Di),ur(Ri))}var Ni=lr(0);function Bi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Hi=null,Oi=null,zi=!1;function Wi(e,t){var n=Hl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Vi(e){if(zi){var t=Oi;if(t){var n=t;if(!Ui(e,t)){if(!(t=qo(n.nextSibling))||!Ui(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Hi=e);Wi(Hi,n)}Hi=e,Oi=qo(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Hi=e}}function Gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Hi=e}function ji(e){if(e!==Hi)return!1;if(!zi)return Gi(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vo(t,e.memoizedProps))for(t=Oi;t;)Wi(e,t),t=qo(t.nextSibling);if(Gi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Oi=qo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Oi=null}}else Oi=Hi?qo(e.stateNode.nextSibling):null;return!0}function Ki(){Oi=Hi=null,zi=!1}var qi=[];function Zi(){for(var e=0;e<qi.length;e++)qi[e]._workInProgressVersionPrimary=null;qi.length=0}var Qi=C.ReactCurrentDispatcher,Yi=C.ReactCurrentBatchConfig,$i=0,Xi=null,Ji=null,ea=null,ta=!1,na=!1;function oa(){throw Error(a(321))}function ra(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lo(e[n],t[n]))return!1;return!0}function ia(e,t,n,o,r,i){if($i=i,Xi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Pa:Ma,e=n(o,r),na){i=0;do{if(na=!1,!(25>i))throw Error(a(301));i+=1,ea=Ji=null,t.updateQueue=null,Qi.current=Fa,e=n(o,r)}while(na)}if(Qi.current=Ta,t=null!==Ji&&null!==Ji.next,$i=0,ea=Ji=Xi=null,ta=!1,t)throw Error(a(300));return e}function aa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ea?Xi.memoizedState=ea=e:ea=ea.next=e,ea}function sa(){if(null===Ji){var e=Xi.alternate;e=null!==e?e.memoizedState:null}else e=Ji.next;var t=null===ea?Xi.memoizedState:ea.next;if(null!==t)ea=t,Ji=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ji=e).memoizedState,baseState:Ji.baseState,baseQueue:Ji.baseQueue,queue:Ji.queue,next:null},null===ea?Xi.memoizedState=ea=e:ea=ea.next=e}return ea}function la(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=sa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var o=Ji,r=o.baseQueue,i=n.pending;if(null!==i){if(null!==r){var s=r.next;r.next=i.next,i.next=s}o.baseQueue=r=i,n.pending=null}if(null!==r){r=r.next,o=o.baseState;var l=s=i=null,u=r;do{var c=u.lane;if(($i&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),o=u.eagerReducer===e?u.eagerState:e(o,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,i=o):l=l.next=d,Xi.lanes|=c,Bs|=c}u=u.next}while(null!==u&&u!==r);null===l?i=o:l.next=s,lo(o,t.memoizedState)||(Aa=!0),t.memoizedState=o,t.baseState=i,t.baseQueue=l,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function ca(e){var t=sa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var o=n.dispatch,r=n.pending,i=t.memoizedState;if(null!==r){n.pending=null;var s=r=r.next;do{i=e(i,s.action),s=s.next}while(s!==r);lo(i,t.memoizedState)||(Aa=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,o]}function da(e,t,n){var o=t._getVersion;o=o(t._source);var r=t._workInProgressVersionPrimary;if(null!==r?e=r===o:(e=e.mutableReadLanes,(e=($i&e)===e)&&(t._workInProgressVersionPrimary=o,qi.push(t))),e)return n(t._source);throw qi.push(t),Error(a(350))}function pa(e,t,n,o){var r=Rs;if(null===r)throw Error(a(349));var i=t._getVersion,s=i(t._source),l=Qi.current,u=l.useState((function(){return da(r,t,n)})),c=u[1],d=u[0];u=ea;var p=e.memoizedState,f=p.refs,h=f.getSnapshot,m=p.source;p=p.subscribe;var g=Xi;return e.memoizedState={refs:f,source:t,subscribe:o},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=i(t._source);if(!lo(s,e)){e=n(t._source),lo(d,e)||(c(e),e=ul(g),r.mutableReadLanes|=e&r.pendingLanes),e=r.mutableReadLanes,r.entangledLanes|=e;for(var o=r.entanglements,a=e;0<a;){var l=31-Ut(a),u=1<<l;o[l]|=e,a&=~u}}}),[n,t,o]),l.useEffect((function(){return o(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var o=ul(g);r.mutableReadLanes|=o&r.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,o]),lo(h,n)&&lo(m,t)&&lo(p,o)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:d}).dispatch=c=Ra.bind(null,Xi,e),u.queue=e,u.baseQueue=null,d=da(r,t,n),u.memoizedState=u.baseState=d),d}function fa(e,t,n){return pa(sa(),e,t,n)}function ha(e){var t=aa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Ra.bind(null,Xi,e),[t.memoizedState,e]}function ma(e,t,n,o){return e={tag:e,create:t,destroy:n,deps:o,next:null},null===(t=Xi.updateQueue)?(t={lastEffect:null},Xi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(o=n.next,n.next=e,e.next=o,t.lastEffect=e),e}function ga(e){return e={current:e},aa().memoizedState=e}function va(){return sa().memoizedState}function ya(e,t,n,o){var r=aa();Xi.flags|=e,r.memoizedState=ma(1|t,n,void 0,void 0===o?null:o)}function ba(e,t,n,o){var r=sa();o=void 0===o?null:o;var i=void 0;if(null!==Ji){var a=Ji.memoizedState;if(i=a.destroy,null!==o&&ra(o,a.deps))return void ma(t,n,i,o)}Xi.flags|=e,r.memoizedState=ma(1|t,n,i,o)}function _a(e,t){return ya(516,4,e,t)}function Ca(e,t){return ba(516,4,e,t)}function ka(e,t){return ba(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wa(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Sa.bind(null,t,e),n)}function xa(){}function Ea(e,t){var n=sa();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&ra(t,o[1])?o[0]:(n.memoizedState=[e,t],e)}function Ia(e,t){var n=sa();t=void 0===t?null:t;var o=n.memoizedState;return null!==o&&null!==t&&ra(t,o[1])?o[0]:(e=e(),n.memoizedState=[e,t],e)}function Da(e,t){var n=Vr();jr(98>n?98:n,(function(){e(!0)})),jr(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function Ra(e,t,n){var o=ll(),r=ul(e),i={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Xi||null!==a&&a===Xi)na=ta=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(i.eagerReducer=a,i.eagerState=l,lo(l,s))return}catch(e){}cl(e,r,o)}}var Ta={readContext:ii,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Pa={readContext:ii,useCallback:function(e,t){return aa().memoizedState=[e,void 0===t?null:t],e},useContext:ii,useEffect:_a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=aa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var o=aa();return t=void 0!==n?n(t):t,o.memoizedState=o.baseState=t,e=(e=o.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ra.bind(null,Xi,e),[o.memoizedState,e]},useRef:ga,useState:ha,useDebugValue:xa,useDeferredValue:function(e){var t=ha(e),n=t[0],o=t[1];return _a((function(){var t=Yi.transition;Yi.transition=1;try{o(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ha(!1),t=e[0];return ga(e=Da.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var o=aa();return o.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(o,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qo++).toString(36))),Error(a(355))})),n=ha(t)[1];return 0==(2&Xi.mode)&&(Xi.flags|=516,ma(5,(function(){n("r:"+(Qo++).toString(36))}),void 0,null)),t}return ha(t="r:"+(Qo++).toString(36)),t},unstable_isNewReconciler:!1},Ma={readContext:ii,useCallback:Ea,useContext:ii,useEffect:Ca,useImperativeHandle:wa,useLayoutEffect:ka,useMemo:Ia,useReducer:ua,useRef:va,useState:function(){return ua(la)},useDebugValue:xa,useDeferredValue:function(e){var t=ua(la),n=t[0],o=t[1];return Ca((function(){var t=Yi.transition;Yi.transition=1;try{o(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ua(la)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},Fa={readContext:ii,useCallback:Ea,useContext:ii,useEffect:Ca,useImperativeHandle:wa,useLayoutEffect:ka,useMemo:Ia,useReducer:ca,useRef:va,useState:function(){return ca(la)},useDebugValue:xa,useDeferredValue:function(e){var t=ca(la),n=t[0],o=t[1];return Ca((function(){var t=Yi.transition;Yi.transition=1;try{o(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ca(la)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ca(la)[0]},unstable_isNewReconciler:!1},La=C.ReactCurrentOwner,Aa=!1;function Na(e,t,n,o){t.child=null===e?Ei(t,null,n,o):xi(t,e.child,n,o)}function Ba(e,t,n,o,r){n=n.render;var i=t.ref;return ri(t,r),o=ia(e,t,n,o,i,r),null===e||Aa?(t.flags|=1,Na(e,t,o,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,ts(e,t,r))}function Ha(e,t,n,o,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Ol(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wl(n.type,null,o,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Oa(e,t,a,o,r,i))}return a=e.child,0==(r&i)&&(r=a.memoizedProps,(n=null!==(n=n.compare)?n:co)(r,o)&&e.ref===t.ref)?ts(e,t,i):(t.flags|=1,(e=zl(a,o)).ref=t.ref,e.return=t,t.child=e)}function Oa(e,t,n,o,r,i){if(null!==e&&co(e.memoizedProps,o)&&e.ref===t.ref){if(Aa=!1,0==(i&r))return t.lanes=e.lanes,ts(e,t,i);0!=(16384&e.flags)&&(Aa=!0)}return Ua(e,t,n,o,i)}function za(e,t,n){var o=t.pendingProps,r=o.children,i=null!==e?e.memoizedState:null;if("hidden"===o.mode||"unstable-defer-without-hiding"===o.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gl(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gl(0,e),null;t.memoizedState={baseLanes:0},gl(0,null!==i?i.baseLanes:n)}else null!==i?(o=i.baseLanes|n,t.memoizedState=null):o=n,gl(0,o);return Na(e,t,r,n),t.child}function Wa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ua(e,t,n,o,r){var i=gr(n)?hr:pr.current;return i=mr(t,i),ri(t,r),n=ia(e,t,n,o,i,r),null===e||Aa?(t.flags|=1,Na(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,ts(e,t,r))}function Va(e,t,n,o,r){if(gr(n)){var i=!0;_r(t)}else i=!1;if(ri(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yi(t,n,o),_i(t,n,o,r),o=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ii(u):mr(t,u=gr(n)?hr:pr.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==o||l!==u)&&bi(t,a,o,u),ai=!1;var p=t.memoizedState;a.state=p,pi(t,o,a,r),l=t.memoizedState,s!==o||p!==l||fr.current||ai?("function"==typeof c&&(mi(t,n,c,o),l=t.memoizedState),(s=ai||vi(t,n,s,o,p,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=o,t.memoizedState=l),a.props=o,a.state=l,a.context=u,o=s):("function"==typeof a.componentDidMount&&(t.flags|=4),o=!1)}else{a=t.stateNode,li(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Yr(t.type,s),a.props=u,d=t.pendingProps,p=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ii(l):mr(t,l=gr(n)?hr:pr.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||p!==l)&&bi(t,a,o,l),ai=!1,p=t.memoizedState,a.state=p,pi(t,o,a,r);var h=t.memoizedState;s!==d||p!==h||fr.current||ai?("function"==typeof f&&(mi(t,n,f,o),h=t.memoizedState),(u=ai||vi(t,n,u,o,p,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(o,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(o,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=o,t.memoizedState=h),a.props=o,a.state=h,a.context=l,o=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),o=!1)}return Ga(e,t,n,o,i,r)}function Ga(e,t,n,o,r,i){Wa(e,t);var a=0!=(64&t.flags);if(!o&&!a)return r&&Cr(t,n,!1),ts(e,t,i);o=t.stateNode,La.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:o.render();return t.flags|=1,null!==e&&a?(t.child=xi(t,e.child,null,i),t.child=xi(t,null,s,i)):Na(e,t,s,i),t.memoizedState=o.state,r&&Cr(t,n,!0),t.child}function ja(e){var t=e.stateNode;t.pendingContext?yr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yr(0,t.context,!1),Mi(e,t.containerInfo)}var Ka,qa,Za,Qa={dehydrated:null,retryLane:0};function Ya(e,t,n){var o,r=t.pendingProps,i=Ni.current,a=!1;return(o=0!=(64&t.flags))||(o=(null===e||null!==e.memoizedState)&&0!=(2&i)),o?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(i|=1),cr(Ni,1&i),null===e?(void 0!==r.fallback&&Vi(t),e=r.children,i=r.fallback,a?(e=$a(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,e):"number"==typeof r.unstable_expectedLoadTime?(e=$a(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(r=function(e,t,n,o,r){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(a,s),null!==e?o=zl(e,o):(o=Ul(o,i,r,null)).flags|=2,o.return=t,n.return=t,n.sibling=o,t.child=n,o}(e,t,r.children,r.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Qa,r):(n=function(e,t,n,o){var r=e.child;return e=r.sibling,n=zl(r,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=o),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,r.children,n),t.memoizedState=null,n))}function $a(e,t,n,o){var r=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&r)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,r,0,null),n=Ul(n,r,o,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function Ja(e,t,n,o,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:o,tail:n,tailMode:r,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=o,a.tail=n,a.tailMode=r,a.lastEffect=i)}function es(e,t,n){var o=t.pendingProps,r=o.revealOrder,i=o.tail;if(Na(e,t,o.children,n),0!=(2&(o=Ni.current)))o=1&o|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Xa(e,n);else if(19===e.tag)Xa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}o&=1}if(cr(Ni,o),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Bi(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ja(t,!1,r,n,i,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Bi(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ja(t,!0,n,null,i,t.lastEffect);break;case"together":Ja(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ts(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Bs|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ns(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var o=null;null!==n;)null!==n.alternate&&(o=n),n=n.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function os(e,t,n){var o=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return gr(t.type)&&vr(),null;case 3:return Fi(),ur(fr),ur(pr),Zi(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(ji(t)?t.flags|=4:o.hydrate||(t.flags|=256)),null;case 5:Ai(t);var i=Pi(Ti.current);if(n=t.type,null!==e&&null!=t.stateNode)qa(e,t,n,o),e.ref!==t.ref&&(t.flags|=128);else{if(!o){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(Di.current),ji(t)){o=t.stateNode,n=t.type;var s=t.memoizedProps;switch(o[$o]=t,o[Xo]=s,n){case"dialog":Ro("cancel",o),Ro("close",o);break;case"iframe":case"object":case"embed":Ro("load",o);break;case"video":case"audio":for(e=0;e<xo.length;e++)Ro(xo[e],o);break;case"source":Ro("error",o);break;case"img":case"image":case"link":Ro("error",o),Ro("load",o);break;case"details":Ro("toggle",o);break;case"input":ee(o,s),Ro("invalid",o);break;case"select":o._wrapperState={wasMultiple:!!s.multiple},Ro("invalid",o);break;case"textarea":le(o,s),Ro("invalid",o)}for(var u in Se(n,s),e=null,s)s.hasOwnProperty(u)&&(i=s[u],"children"===u?"string"==typeof i?o.textContent!==i&&(e=["children",i]):"number"==typeof i&&o.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Ro("scroll",o));switch(n){case"input":Y(o),oe(o,s,!0);break;case"textarea":Y(o),ce(o);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(o.onclick=Oo)}o=e,t.updateQueue=o,null!==o&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof o.is?e=u.createElement(n,{is:o.is}):(e=u.createElement(n),"select"===n&&(u=e,o.multiple?u.multiple=!0:o.size&&(u.size=o.size))):e=u.createElementNS(e,n),e[$o]=t,e[Xo]=o,Ka(e,t),t.stateNode=e,u=we(n,o),n){case"dialog":Ro("cancel",e),Ro("close",e),i=o;break;case"iframe":case"object":case"embed":Ro("load",e),i=o;break;case"video":case"audio":for(i=0;i<xo.length;i++)Ro(xo[i],e);i=o;break;case"source":Ro("error",e),i=o;break;case"img":case"image":case"link":Ro("error",e),Ro("load",e),i=o;break;case"details":Ro("toggle",e),i=o;break;case"input":ee(e,o),i=J(e,o),Ro("invalid",e);break;case"option":i=ie(e,o);break;case"select":e._wrapperState={wasMultiple:!!o.multiple},i=r({},o,{value:void 0}),Ro("invalid",e);break;case"textarea":le(e,o),i=se(e,o),Ro("invalid",e);break;default:i=o}Se(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?Ce(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Ro("scroll",e):null!=d&&_(e,s,d,u))}switch(n){case"input":Y(e),oe(e,o,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=o.value&&e.setAttribute("value",""+Z(o.value));break;case"select":e.multiple=!!o.multiple,null!=(s=o.value)?ae(e,!!o.multiple,s,!1):null!=o.defaultValue&&ae(e,!!o.multiple,o.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Oo)}Uo(n,o)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Za(0,t,e.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(a(166));n=Pi(Ti.current),Pi(Di.current),ji(t)?(o=t.stateNode,n=t.memoizedProps,o[$o]=t,o.nodeValue!==n&&(t.flags|=4)):((o=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[$o]=t,t.stateNode=o)}return null;case 13:return ur(Ni),o=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(o=null!==o,n=!1,null===e?void 0!==t.memoizedProps.fallback&&ji(t):n=null!==e.memoizedState,o&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ni.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Rs||0==(134217727&Bs)&&0==(134217727&Hs)||hl(Rs,Ps))),(o||n)&&(t.flags|=4),null);case 4:return Fi(),null===e&&Po(t.stateNode.containerInfo),null;case 10:return ni(t),null;case 19:if(ur(Ni),null===(o=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=o.rendering))if(s)ns(o,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Bi(e))){for(t.flags|=64,ns(o,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=n,n=t.child;null!==n;)e=o,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return cr(Ni,1&Ni.current|2),t.child}e=e.sibling}null!==o.tail&&Ur()>Us&&(t.flags|=64,s=!0,ns(o,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Bi(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ns(o,!0),null===o.tail&&"hidden"===o.tailMode&&!u.alternate&&!zi)return null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null),null}else 2*Ur()-o.renderingStartTime>Us&&1073741824!==n&&(t.flags|=64,s=!0,ns(o,!1),t.lanes=33554432);o.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=o.last)?n.sibling=u:t.child=u,o.last=u)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.lastEffect=t.lastEffect,o.renderingStartTime=Ur(),n.sibling=null,t=Ni.current,cr(Ni,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==o.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function rs(e){switch(e.tag){case 1:gr(e.type)&&vr();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Fi(),ur(fr),ur(pr),Zi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ai(e),null;case 13:return ur(Ni),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ur(Ni),null;case 4:return Fi(),null;case 10:return ni(e),null;case 23:case 24:return vl(),null;default:return null}}function is(e,t){try{var n="",o=t;do{n+=K(o),o=o.return}while(o);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r}}function as(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ka=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,o){var i=e.memoizedProps;if(i!==o){e=t.stateNode,Pi(Di.current);var a,s=null;switch(n){case"input":i=J(e,i),o=J(e,o),s=[];break;case"option":i=ie(e,i),o=ie(e,o),s=[];break;case"select":i=r({},i,{value:void 0}),o=r({},o,{value:void 0}),s=[];break;case"textarea":i=se(e,i),o=se(e,o),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof o.onClick&&(e.onclick=Oo)}for(d in Se(n,o),n=null,i)if(!o.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in o){var c=o[d];if(u=null!=i?i[d]:void 0,o.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Ro("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===A?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Za=function(e,t,n,o){n!==o&&(t.flags|=4)};var ss="function"==typeof WeakMap?WeakMap:Map;function ls(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var o=t.value;return n.callback=function(){Ks||(Ks=!0,qs=o),as(0,t)},n}function us(e,t,n){(n=ui(-1,n)).tag=3;var o=e.type.getDerivedStateFromError;if("function"==typeof o){var r=t.value;n.payload=function(){return as(0,t),o(r)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof o&&(null===Zs?Zs=new Set([this]):Zs.add(this),as(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cs="function"==typeof WeakSet?WeakSet:Set;function ds(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ll(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,o=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yr(t.type,n),o),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ko(t.stateNode.containerInfo))}throw Error(a(163))}function fs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var o=e.create;e.destroy=o()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var r=e;o=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(Pl(n,e),Tl(n,e)),e=o}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(o=n.elementType===n.type?t.memoizedProps:Yr(n.type,t.memoizedProps),e.componentDidUpdate(o,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Uo(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))))}throw Error(a(163))}function hs(e,t){for(var n=e;;){if(5===n.tag){var o=n.stateNode;if(t)"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{o=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,o.style.display=_e("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(e,t){if(Sr&&"function"==typeof Sr.onCommitFiberUnmount)try{Sr.onCommitFiberUnmount(kr,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var o=n,r=o.destroy;if(o=o.tag,void 0!==r)if(0!=(4&o))Pl(t,n);else{o=t;try{r()}catch(e){Ll(o,e)}}n=n.next}while(n!==e)}break;case 1:if(ds(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ll(t,e)}break;case 5:ds(t);break;case 4:Cs(e,t)}}function gs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vs(e){return 5===e.tag||3===e.tag||4===e.tag}function ys(e){e:{for(var t=e.return;null!==t;){if(vs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var o=!1;break;case 3:case 4:t=t.containerInfo,o=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}o?bs(e,n,t):_s(e,n,t)}function bs(e,t,n){var o=e.tag,r=5===o||6===o;if(r)e=r?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Oo));else if(4!==o&&null!==(e=e.child))for(bs(e,t,n),e=e.sibling;null!==e;)bs(e,t,n),e=e.sibling}function _s(e,t,n){var o=e.tag,r=5===o||6===o;if(r)e=r?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==o&&null!==(e=e.child))for(_s(e,t,n),e=e.sibling;null!==e;)_s(e,t,n),e=e.sibling}function Cs(e,t){for(var n,o,r=t,i=!1;;){if(!i){i=r.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:o=!1;break e;case 3:case 4:n=n.containerInfo,o=!0;break e}i=i.return}i=!0}if(5===r.tag||6===r.tag){e:for(var s=e,l=r,u=l;;)if(ms(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(s=n,l=r.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,o=!0,r.child.return=r,r=r.child;continue}}else if(ms(e,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;4===(r=r.return).tag&&(i=!1)}r.sibling.return=r.return,r=r.sibling}}function ks(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var o=n=n.next;do{3==(3&o.tag)&&(e=o.destroy,o.destroy=void 0,void 0!==e&&e()),o=o.next}while(o!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){o=t.memoizedProps;var r=null!==e?e.memoizedProps:o;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xo]=o,"input"===e&&"radio"===o.type&&null!=o.name&&te(n,o),we(e,r),t=we(e,o),r=0;r<i.length;r+=2){var s=i[r],l=i[r+1];"style"===s?Ce(n,l):"dangerouslySetInnerHTML"===s?ge(n,l):"children"===s?ve(n,l):_(n,s,l,t)}switch(e){case"input":ne(n,o);break;case"textarea":ue(n,o);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!o.multiple,null!=(i=o.value)?ae(n,!!o.multiple,i,!1):e!==!!o.multiple&&(null!=o.defaultValue?ae(n,!!o.multiple,o.defaultValue,!0):ae(n,!!o.multiple,o.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ws=Ur(),hs(t.child,!0)),void Ss(t);case 19:return void Ss(t);case 23:case 24:return void hs(t,null!==t.memoizedState)}throw Error(a(163))}function Ss(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cs),t.forEach((function(t){var o=Nl.bind(null,e,t);n.has(t)||(n.add(t),t.then(o,o))}))}}function ws(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var xs=Math.ceil,Es=C.ReactCurrentDispatcher,Is=C.ReactCurrentOwner,Ds=0,Rs=null,Ts=null,Ps=0,Ms=0,Fs=lr(0),Ls=0,As=null,Ns=0,Bs=0,Hs=0,Os=0,zs=null,Ws=0,Us=1/0;function Vs(){Us=Ur()+500}var Gs,js=null,Ks=!1,qs=null,Zs=null,Qs=!1,Ys=null,$s=90,Xs=[],Js=[],el=null,tl=0,nl=null,ol=-1,rl=0,il=0,al=null,sl=!1;function ll(){return 0!=(48&Ds)?Ur():-1!==ol?ol:ol=Ur()}function ul(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Vr()?1:2;if(0===rl&&(rl=Ns),0!==Qr.transition){0!==il&&(il=null!==zs?zs.pendingLanes:0),e=rl;var t=4186112&~il;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Vr(),e=Ht(0!=(4&Ds)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),rl)}function cl(e,t,n){if(50<tl)throw tl=0,nl=null,Error(a(185));if(null===(e=dl(e,t)))return null;Wt(e,t,n),e===Rs&&(Hs|=t,4===Ls&&hl(e,Ps));var o=Vr();1===t?0!=(8&Ds)&&0==(48&Ds)?ml(e):(pl(e,n),0===Ds&&(Vs(),qr())):(0==(4&Ds)||98!==o&&99!==o||(null===el?el=new Set([e]):el.add(e)),pl(e,n)),zs=e}function dl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pl(e,t){for(var n=e.callbackNode,o=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ut(s),u=1<<l,c=i[l];if(-1===c){if(0==(u&o)||0!=(u&r)){c=t,At(u);var d=Lt;i[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(o=Nt(e,e===Rs?Ps:0),t=Lt,0===o)null!==n&&(n!==Nr&&Er(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Nr&&Er(n)}15===t?(n=ml.bind(null,e),null===Hr?(Hr=[n],Or=xr(Pr,Zr)):Hr.push(n),n=Nr):14===t?n=Kr(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Kr(n,fl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(ol=-1,il=rl=0,0!=(48&Ds))throw Error(a(327));var t=e.callbackNode;if(Rl()&&e.callbackNode!==t)return null;var n=Nt(e,e===Rs?Ps:0);if(0===n)return null;var o=n,r=Ds;Ds|=16;var i=_l();for(Rs===e&&Ps===o||(Vs(),yl(e,o));;)try{Sl();break}catch(t){bl(e,t)}if(ti(),Es.current=i,Ds=r,null!==Ts?o=0:(Rs=null,Ps=0,o=Ls),0!=(Ns&Hs))yl(e,0);else if(0!==o){if(2===o&&(Ds|=64,e.hydrate&&(e.hydrate=!1,Ko(e.containerInfo)),0!==(n=Bt(e))&&(o=Cl(e,n))),1===o)throw t=As,yl(e,0),hl(e,n),pl(e,Ur()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,o){case 0:case 1:throw Error(a(345));case 2:case 5:El(e);break;case 3:if(hl(e,n),(62914560&n)===n&&10<(o=Ws+500-Ur())){if(0!==Nt(e,0))break;if(((r=e.suspendedLanes)&n)!==n){ll(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=Go(El.bind(null,e),o);break}El(e);break;case 4:if(hl(e,n),(4186112&n)===n)break;for(o=e.eventTimes,r=-1;0<n;){var s=31-Ut(n);i=1<<s,(s=o[s])>r&&(r=s),n&=~i}if(n=r,10<(n=(120>(n=Ur()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*xs(n/1960))-n)){e.timeoutHandle=Go(El.bind(null,e),n);break}El(e);break;default:throw Error(a(329))}}return pl(e,Ur()),e.callbackNode===t?fl.bind(null,e):null}function hl(e,t){for(t&=~Os,t&=~Hs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),o=1<<n;e[n]=-1,t&=~o}}function ml(e){if(0!=(48&Ds))throw Error(a(327));if(Rl(),e===Rs&&0!=(e.expiredLanes&Ps)){var t=Ps,n=Cl(e,t);0!=(Ns&Hs)&&(n=Cl(e,t=Nt(e,t)))}else n=Cl(e,t=Nt(e,0));if(0!==e.tag&&2===n&&(Ds|=64,e.hydrate&&(e.hydrate=!1,Ko(e.containerInfo)),0!==(t=Bt(e))&&(n=Cl(e,t))),1===n)throw n=As,yl(e,0),hl(e,t),pl(e,Ur()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,El(e),pl(e,Ur()),null}function gl(e,t){cr(Fs,Ms),Ms|=t,Ns|=t}function vl(){Ms=Fs.current,ur(Fs)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,jo(n)),null!==Ts)for(n=Ts.return;null!==n;){var o=n;switch(o.tag){case 1:null!=(o=o.type.childContextTypes)&&vr();break;case 3:Fi(),ur(fr),ur(pr),Zi();break;case 5:Ai(o);break;case 4:Fi();break;case 13:case 19:ur(Ni);break;case 10:ni(o);break;case 23:case 24:vl()}n=n.return}Rs=e,Ts=zl(e.current,null),Ps=Ms=Ns=t,Ls=0,As=null,Os=Hs=Bs=0}function bl(e,t){for(;;){var n=Ts;try{if(ti(),Qi.current=Ta,ta){for(var o=Xi.memoizedState;null!==o;){var r=o.queue;null!==r&&(r.pending=null),o=o.next}ta=!1}if($i=0,ea=Ji=Xi=null,na=!1,Is.current=null,null===n||null===n.return){Ls=1,As=t,Ts=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Ps,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Ni.current),p=a;do{var f;if(f=13===p.tag){var h=p.memoizedState;if(null!==h)f=null!==h.dehydrated;else{var m=p.memoizedProps;f=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(f){var g=p.updateQueue;if(null===g){var v=new Set;v.add(u),p.updateQueue=v}else g.add(u);if(0==(2&p.mode)){if(p.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=ui(-1,1);y.tag=2,ci(s,y)}s.lanes|=1;break e}l=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ss,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var _=Al.bind(null,i,u,s);u.then(_,_)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),l=is(l,s),p=a;do{switch(p.tag){case 3:i=l,p.flags|=4096,t&=-t,p.lanes|=t,di(p,ls(0,i,t));break e;case 1:i=l;var C=p.type,k=p.stateNode;if(0==(64&p.flags)&&("function"==typeof C.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Zs||!Zs.has(k)))){p.flags|=4096,t&=-t,p.lanes|=t,di(p,us(p,i,t));break e}}p=p.return}while(null!==p)}xl(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function _l(){var e=Es.current;return Es.current=Ta,null===e?Ta:e}function Cl(e,t){var n=Ds;Ds|=16;var o=_l();for(Rs===e&&Ps===t||yl(e,t);;)try{kl();break}catch(t){bl(e,t)}if(ti(),Ds=n,Es.current=o,null!==Ts)throw Error(a(261));return Rs=null,Ps=0,Ls}function kl(){for(;null!==Ts;)wl(Ts)}function Sl(){for(;null!==Ts&&!Ir();)wl(Ts)}function wl(e){var t=Gs(e.alternate,e,Ms);e.memoizedProps=e.pendingProps,null===t?xl(e):Ts=t,Is.current=null}function xl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,Ms)))return void(Ts=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ms)||0==(4&n.mode)){for(var o=0,r=n.child;null!==r;)o|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=o}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=rs(t)))return n.flags&=2047,void(Ts=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Ls&&(Ls=5)}function El(e){var t=Vr();return jr(99,Il.bind(null,e,t)),null}function Il(e,t){do{Rl()}while(null!==Ys);if(0!=(48&Ds))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var o=n.lanes|n.childLanes,r=o,i=e.pendingLanes&~r;e.pendingLanes=r,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=r,e.mutableReadLanes&=r,e.entangledLanes&=r,r=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<i;){var u=31-Ut(i),c=1<<u;r[u]=0,s[u]=-1,l[u]=-1,i&=~c}if(null!==el&&0==(24&o)&&el.has(e)&&el.delete(e),e===Rs&&(Ts=Rs=null,Ps=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){if(r=Ds,Ds|=32,Is.current=null,zo=qt,go(s=mo())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var d=0,p=-1,f=-1,h=0,m=0,g=s,v=null;t:for(;;){for(var y;g!==l||0!==i&&3!==g.nodeType||(p=d+i),g!==u||0!==c&&3!==g.nodeType||(f=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===s)break t;if(v===l&&++h===i&&(p=d),v===u&&++m===c&&(f=d),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}l=-1===p||-1===f?null:{start:p,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Wo={focusedElem:s,selectionRange:l},qt=!1,al=null,sl=!1,js=o;do{try{Dl()}catch(e){if(null===js)throw Error(a(330));Ll(js,e),js=js.nextEffect}}while(null!==js);al=null,js=o;do{try{for(s=e;null!==js;){var b=js.flags;if(16&b&&ve(js.stateNode,""),128&b){var _=js.alternate;if(null!==_){var C=_.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&b){case 2:ys(js),js.flags&=-3;break;case 6:ys(js),js.flags&=-3,ks(js.alternate,js);break;case 1024:js.flags&=-1025;break;case 1028:js.flags&=-1025,ks(js.alternate,js);break;case 4:ks(js.alternate,js);break;case 8:Cs(s,l=js);var k=l.alternate;gs(l),null!==k&&gs(k)}js=js.nextEffect}}catch(e){if(null===js)throw Error(a(330));Ll(js,e),js=js.nextEffect}}while(null!==js);if(C=Wo,_=mo(),b=C.focusedElem,s=C.selectionRange,_!==b&&b&&b.ownerDocument&&ho(b.ownerDocument.documentElement,b)){null!==s&&go(b)&&(_=s.start,void 0===(C=s.end)&&(C=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(C,b.value.length)):(C=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(C=C.getSelection(),l=b.textContent.length,k=Math.min(s.start,l),s=void 0===s.end?k:Math.min(s.end,l),!C.extend&&k>s&&(l=s,s=k,k=l),l=fo(b,k),i=fo(b,s),l&&i&&(1!==C.rangeCount||C.anchorNode!==l.node||C.anchorOffset!==l.offset||C.focusNode!==i.node||C.focusOffset!==i.offset)&&((_=_.createRange()).setStart(l.node,l.offset),C.removeAllRanges(),k>s?(C.addRange(_),C.extend(i.node,i.offset)):(_.setEnd(i.node,i.offset),C.addRange(_))))),_=[];for(C=b;C=C.parentNode;)1===C.nodeType&&_.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(C=_[b]).element.scrollLeft=C.left,C.element.scrollTop=C.top}qt=!!zo,Wo=zo=null,e.current=n,js=o;do{try{for(b=e;null!==js;){var S=js.flags;if(36&S&&fs(b,js.alternate,js),128&S){_=void 0;var w=js.ref;if(null!==w){var x=js.stateNode;js.tag,_=x,"function"==typeof w?w(_):w.current=_}}js=js.nextEffect}}catch(e){if(null===js)throw Error(a(330));Ll(js,e),js=js.nextEffect}}while(null!==js);js=null,Br(),Ds=r}else e.current=n;if(Qs)Qs=!1,Ys=e,$s=t;else for(js=o;null!==js;)t=js.nextEffect,js.nextEffect=null,8&js.flags&&((S=js).sibling=null,S.stateNode=null),js=t;if(0===(o=e.pendingLanes)&&(Zs=null),1===o?e===nl?tl++:(tl=0,nl=e):tl=0,n=n.stateNode,Sr&&"function"==typeof Sr.onCommitFiberRoot)try{Sr.onCommitFiberRoot(kr,n,void 0,64==(64&n.current.flags))}catch(e){}if(pl(e,Ur()),Ks)throw Ks=!1,e=qs,qs=null,e;return 0!=(8&Ds)||qr(),null}function Dl(){for(;null!==js;){var e=js.alternate;sl||null===al||(0!=(8&js.flags)?Xe(js,al)&&(sl=!0):13===js.tag&&ws(e,js)&&Xe(js,al)&&(sl=!0));var t=js.flags;0!=(256&t)&&ps(e,js),0==(512&t)||Qs||(Qs=!0,Kr(97,(function(){return Rl(),null}))),js=js.nextEffect}}function Rl(){if(90!==$s){var e=97<$s?97:$s;return $s=90,jr(e,Ml)}return!1}function Tl(e,t){Xs.push(t,e),Qs||(Qs=!0,Kr(97,(function(){return Rl(),null})))}function Pl(e,t){Js.push(t,e),Qs||(Qs=!0,Kr(97,(function(){return Rl(),null})))}function Ml(){if(null===Ys)return!1;var e=Ys;if(Ys=null,0!=(48&Ds))throw Error(a(331));var t=Ds;Ds|=32;var n=Js;Js=[];for(var o=0;o<n.length;o+=2){var r=n[o],i=n[o+1],s=r.destroy;if(r.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));Ll(i,e)}}for(n=Xs,Xs=[],o=0;o<n.length;o+=2){r=n[o],i=n[o+1];try{var l=r.create;r.destroy=l()}catch(e){if(null===i)throw Error(a(330));Ll(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ds=t,qr(),!0}function Fl(e,t,n){ci(e,t=ls(0,t=is(n,t),1)),t=ll(),null!==(e=dl(e,1))&&(Wt(e,1,t),pl(e,t))}function Ll(e,t){if(3===e.tag)Fl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Fl(n,e,t);break}if(1===n.tag){var o=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof o.componentDidCatch&&(null===Zs||!Zs.has(o))){var r=us(n,e=is(t,e),1);if(ci(n,r),r=ll(),null!==(n=dl(n,1)))Wt(n,1,r),pl(n,r);else if("function"==typeof o.componentDidCatch&&(null===Zs||!Zs.has(o)))try{o.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Al(e,t,n){var o=e.pingCache;null!==o&&o.delete(t),t=ll(),e.pingedLanes|=e.suspendedLanes&n,Rs===e&&(Ps&n)===n&&(4===Ls||3===Ls&&(62914560&Ps)===Ps&&500>Ur()-Ws?yl(e,0):Os|=n),pl(e,t)}function Nl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Vr()?1:2:(0===rl&&(rl=Ns),0===(t=Ot(62914560&~rl))&&(t=4194304))),n=ll(),null!==(e=dl(e,t))&&(Wt(e,t,n),pl(e,n))}function Bl(e,t,n,o){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Hl(e,t,n,o){return new Bl(e,t,n,o)}function Ol(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Hl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wl(e,t,n,o,r,i){var s=2;if(o=e,"function"==typeof e)Ol(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case w:return Ul(n.children,r,i,t);case N:s=8,r|=16;break;case x:s=8,r|=1;break;case E:return(e=Hl(12,n,t,8|r)).elementType=E,e.type=E,e.lanes=i,e;case T:return(e=Hl(13,n,t,r)).type=T,e.elementType=T,e.lanes=i,e;case P:return(e=Hl(19,n,t,r)).elementType=P,e.lanes=i,e;case B:return Vl(n,r,i,t);case H:return(e=Hl(24,n,t,r)).elementType=H,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case I:s=10;break e;case D:s=9;break e;case R:s=11;break e;case M:s=14;break e;case F:s=16,o=null;break e;case L:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Hl(s,n,t,r)).elementType=e,t.type=o,t.lanes=i,t}function Ul(e,t,n,o){return(e=Hl(7,e,o,t)).lanes=n,e}function Vl(e,t,n,o){return(e=Hl(23,e,o,t)).elementType=B,e.lanes=n,e}function Gl(e,t,n){return(e=Hl(6,e,null,t)).lanes=n,e}function jl(e,t,n){return(t=Hl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Kl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}function Zl(e,t,n,o){var r=t.current,i=ll(),s=ul(r);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(gr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(gr(u)){n=br(n,u,l);break e}}n=l}else n=dr;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,s)).payload={element:e},null!==(o=void 0===o?null:o)&&(t.callback=o),ci(r,t),cl(r,s,i),s}function Ql(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $l(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Xl(e,t,n){var o=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Kl(e,t,null!=n&&!0===n.hydrate),t=Hl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,si(t),e[Jo]=n.current,Po(8===e.nodeType?e.parentNode:e),o)for(e=0;e<o.length;e++){var r=(t=o[e])._getVersion;r=r(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,r]:n.mutableSourceEagerHydrationData.push(t,r)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,o,r){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof r){var s=r;r=function(){var e=Ql(a);s.call(e)}}Zl(t,a,e,r)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xl(e,0,t?{hydrate:!0}:void 0)}(n,o),a=i._internalRoot,"function"==typeof r){var l=r;r=function(){var e=Ql(a);l.call(e)}}!function(e,t){var n=Ds;Ds&=-2,Ds|=8;try{e(t)}finally{0===(Ds=n)&&(Vs(),qr())}}((function(){Zl(t,a,e,r)}))}return Ql(a)}Gs=function(e,t,n){var o=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fr.current)Aa=!0;else{if(0==(n&o)){switch(Aa=!1,t.tag){case 3:ja(t),Ki();break;case 5:Li(t);break;case 1:gr(t.type)&&_r(t);break;case 4:Mi(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value;var r=t.type._context;cr($r,r._currentValue),r._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ya(e,t,n):(cr(Ni,1&Ni.current),null!==(t=ts(e,t,n))?t.sibling:null);cr(Ni,1&Ni.current);break;case 19:if(o=0!=(n&t.childLanes),0!=(64&e.flags)){if(o)return es(e,t,n);t.flags|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),cr(Ni,Ni.current),o)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return ts(e,t,n)}Aa=0!=(16384&e.flags)}else Aa=!1;switch(t.lanes=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=mr(t,pr.current),ri(t,n),r=ia(null,t,o,e,r,n),t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,gr(o)){var i=!0;_r(t)}else i=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,si(t);var s=o.getDerivedStateFromProps;"function"==typeof s&&mi(t,o,s,e),r.updater=gi,t.stateNode=r,r._reactInternals=t,_i(t,o,e,n),t=Ga(null,t,o,!0,i,n)}else t.tag=0,Na(null,t,r,n),t=t.child;return t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Ol(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===M)return 14}return 2}(r),e=Yr(r,e),i){case 0:t=Ua(null,t,r,e,n);break e;case 1:t=Va(null,t,r,e,n);break e;case 11:t=Ba(null,t,r,e,n);break e;case 14:t=Ha(null,t,r,Yr(r.type,e),o,n);break e}throw Error(a(306,r,""))}return t;case 0:return o=t.type,r=t.pendingProps,Ua(e,t,o,r=t.elementType===o?r:Yr(o,r),n);case 1:return o=t.type,r=t.pendingProps,Va(e,t,o,r=t.elementType===o?r:Yr(o,r),n);case 3:if(ja(t),o=t.updateQueue,null===e||null===o)throw Error(a(282));if(o=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,li(e,t),pi(t,o,null,n),(o=t.memoizedState.element)===r)Ki(),t=ts(e,t,n);else{if((i=(r=t.stateNode).hydrate)&&(Oi=qo(t.stateNode.containerInfo.firstChild),Hi=t,i=zi=!0),i){if(null!=(e=r.mutableSourceEagerHydrationData))for(r=0;r<e.length;r+=2)(i=e[r])._workInProgressVersionPrimary=e[r+1],qi.push(i);for(n=Ei(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Na(e,t,o,n),Ki();t=t.child}return t;case 5:return Li(t),null===e&&Vi(t),o=t.type,r=t.pendingProps,i=null!==e?e.memoizedProps:null,s=r.children,Vo(o,r)?s=null:null!==i&&Vo(o,i)&&(t.flags|=16),Wa(e,t),Na(e,t,s,n),t.child;case 6:return null===e&&Vi(t),null;case 13:return Ya(e,t,n);case 4:return Mi(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=xi(t,null,o,n):Na(e,t,o,n),t.child;case 11:return o=t.type,r=t.pendingProps,Ba(e,t,o,r=t.elementType===o?r:Yr(o,r),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,r=t.pendingProps,s=t.memoizedProps,i=r.value;var l=t.type._context;if(cr($r,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0==(i=lo(l,i)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(l,i):1073741823))){if(s.children===r.children&&!fr.current){t=ts(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===o&&0!=(c.observedBits&i)){1===l.tag&&((c=ui(-1,n&-n)).tag=2,ci(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),oi(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Na(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,o=(i=t.pendingProps).children,ri(t,n),o=o(r=ii(r,i.unstable_observedBits)),t.flags|=1,Na(e,t,o,n),t.child;case 14:return i=Yr(r=t.type,t.pendingProps),Ha(e,t,r,i=Yr(r.type,i),o,n);case 15:return Oa(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,r=t.pendingProps,r=t.elementType===o?r:Yr(o,r),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,gr(o)?(e=!0,_r(t)):e=!1,ri(t,n),yi(t,o,r),_i(t,o,r,n),Ga(null,t,o,!0,e,n);case 19:return es(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},Xl.prototype.render=function(e){Zl(e,this._internalRoot,null,null)},Xl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Zl(null,e,null,(function(){t[Jo]=null}))},Je=function(e){13===e.tag&&(cl(e,4,ll()),$l(e,4))},et=function(e){13===e.tag&&(cl(e,67108864,ll()),$l(e,67108864))},tt=function(e){if(13===e.tag){var t=ll(),n=ul(e);cl(e,n,t),$l(e,n)}},nt=function(e,t){return t()},Ee=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=rr(o);if(!r)throw Error(a(90));$(o),ne(o,r)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Me=function(e,t){var n=Ds;Ds|=1;try{return e(t)}finally{0===(Ds=n)&&(Vs(),qr())}},Fe=function(e,t,n,o,r){var i=Ds;Ds|=4;try{return jr(98,e.bind(null,t,n,o,r))}finally{0===(Ds=i)&&(Vs(),qr())}},Le=function(){0==(49&Ds)&&(function(){if(null!==el){var e=el;el=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pl(e,Ur())}))}qr()}(),Rl())},Ae=function(e,t){var n=Ds;Ds|=2;try{return e(t)}finally{0===(Ds=n)&&(Vs(),qr())}};var tu={findFiberByHostInstance:tr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,o=t;;){var r=n.return;if(null===r)break;var i=r.alternate;if(null===i){if(null!==(o=r.return)){n=o;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===n)return $e(r),e;if(i===o)return $e(r),t;i=i.sibling}throw Error(a(188))}if(n.return!==o.return)n=r,o=i;else{for(var s=!1,l=r.child;l;){if(l===n){s=!0,n=r,o=i;break}if(l===o){s=!0,o=r,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,o=r;break}if(l===o){s=!0,o=i,n=r;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==o)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{kr=ou.inject(nu),Sr=ou}catch(me){}}t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return ql(e,t,null,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return eu(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var o=n(418),r=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;r=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,o(b,g.prototype),b.isPureReactComponent=!0;var _={current:null},C=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var o,i={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:r,type:e,key:a,ref:s,props:i,_owner:_.current}}function w(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var x=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function I(e,t,n,o,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case r:case i:l=!0}}if(l)return a=a(l=e),e=""===o?"."+E(l,0):o,Array.isArray(a)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),I(a,t,n,"",(function(e){return e}))):null!=a&&(w(a)&&(a=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(x,"$&/")+"/")+e)),t.push(a)),1;if(l=0,o=""===o?".":o+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=o+E(s=e[u],u);l+=I(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=I(s=s.value,t,n,c=o+E(s,u++),a);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function D(e,t,n){if(null==e)return e;var o=[],r=0;return I(e,o,"","",(function(e){return t.call(n,e,r++)})),o}function R(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function P(){var e=T.current;if(null===e)throw Error(f(321));return e}var M={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:D,forEach:function(e,t,n){D(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return D(e,(function(){t++})),t},toArray:function(e){return D(e,(function(e){return e}))||[]},only:function(e){if(!w(e))throw Error(f(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var i=o({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)C.call(t,c)&&!k.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:r,type:e.type,key:a,ref:s,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=w,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return P().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,n){return P().useReducer(e,t,n)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,o=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var r=t&&t.prototype instanceof g?t:g,i=Object.create(r.prototype),a=new D(o||[]);return i._invoke=function(e,t,n){var o=d;return function(r,i){if(o===f)throw new Error("Generator is already running");if(o===h){if("throw"===r)throw i;return T()}for(n.method=r,n.arg=i;;){var a=n.delegate;if(a){var s=x(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===d)throw o=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var l=c(e,t,n);if("normal"===l.type){if(o=n.done?h:p,l.arg===m)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=h,n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",h="completed",m={};function g(){}function v(){}function y(){}var b={};l(b,i,(function(){return this}));var _=Object.getPrototypeOf,C=_&&_(_(R([])));C&&C!==n&&o.call(C,i)&&(b=C);var k=y.prototype=g.prototype=Object.create(b);function S(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function n(r,i,a,s){var l=c(e[r],e,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&o.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var r;this._invoke=function(e,o){function i(){return new t((function(t,r){n(e,o,t,r)}))}return r=r?r.then(i,i):i()}}function x(e,n){var o=e.iterator[n.method];if(o===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,x(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var r=c(o,e.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,m;var i=r.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function D(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function R(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function n(){for(;++r<e.length;)if(o.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:T}}function T(){return{value:t,done:!0}}return v.prototype=y,l(k,"constructor",y),l(y,"constructor",v),v.displayName=l(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,s,"GeneratorFunction")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},S(w.prototype),l(w.prototype,a,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,o,r,i){void 0===i&&(i=Promise);var a=new w(u(t,n,o,r),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},S(k),l(k,s,"Generator"),l(k,i,(function(){return this})),l(k,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=R,D.prototype={constructor:D,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(I),!e)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(o,r){return s.type="throw",s.arg=e,n.next=o,r&&(n.method="next",n.arg=t),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=o.call(a,"catchLoc"),u=o.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),I(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var r=o.arg;I(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,o){return this.delegate={iterator:R(e),resultName:n,nextLoc:o},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,o,r,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},o=function(e,t){c=setTimeout(e,t)},r=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,C=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+y;try{g(!0,e)?C.postMessage(null):(m=!1,g=null)}catch(e){throw C.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,C.postMessage(null))},o=function(e,n){v=p((function(){e(t.unstable_now())}),n)},r=function(){f(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var o=n-1>>>1,r=e[o];if(!(void 0!==r&&0<x(r,t)))break e;e[o]=t,e[n]=r,n=o}}function S(e){return void 0===(e=e[0])?null:e}function w(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var o=0,r=e.length;o<r;){var i=2*(o+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>x(a,n))void 0!==l&&0>x(l,a)?(e[o]=l,e[s]=n,o=s):(e[o]=a,e[i]=n,o=i);else{if(!(void 0!==l&&0>x(l,n)))break e;e[o]=l,e[s]=n,o=s}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var E=[],I=[],D=1,R=null,T=3,P=!1,M=!1,F=!1;function L(e){for(var t=S(I);null!==t;){if(null===t.callback)w(I);else{if(!(t.startTime<=e))break;w(I),t.sortIndex=t.expirationTime,k(E,t)}t=S(I)}}function A(e){if(F=!1,L(e),!M)if(null!==S(E))M=!0,n(N);else{var t=S(I);null!==t&&o(A,t.startTime-e)}}function N(e,n){M=!1,F&&(F=!1,r()),P=!0;var i=T;try{for(L(n),R=S(E);null!==R&&(!(R.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=R.callback;if("function"==typeof a){R.callback=null,T=R.priorityLevel;var s=a(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?R.callback=s:R===S(E)&&w(E),L(n)}else w(E);R=S(E)}if(null!==R)var l=!0;else{var u=S(I);null!==u&&o(A,u.startTime-n),l=!1}return l}finally{R=null,T=i,P=!1}}var B=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||P||(M=!0,n(N))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return S(E)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:D++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,k(I,e),null===S(E)&&e===S(I)&&(F?r():F=!0,o(A,a-s))):(e.sortIndex=l,k(E,e),M||P||(M=!0,n(N))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=o.base?l[0]+o.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var p=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=r(f,o);o.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=o(e,r),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},o={};function r(e){var t=o[e];if(void 0!==t)return t.exports;var i=o[e]={id:e,exports:{}};return n[e](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,o){if(1&o&&(n=this(n)),8&o)return n;if("object"==typeof n&&n){if(4&o&&n.__esModule)return n;if(16&o&&"function"==typeof n.then)return n}var i=Object.create(null);r.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&o&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,r.d(i,a),i},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=r(294),t=r.t(e,2),n=r(935);function o(e,t,n,o,r,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(o,r)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function s(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function l(e,t){return l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},l(e,t)}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");Object.defineProperty(e,"prototype",{value:Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),writable:!1}),t&&l(e,t)}function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return d(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var h=r(757),m=r.n(h);function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=f(e);if(t){var r=f(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return p(this,n)}}var y,b=function(){function e(t){i(this,e),g(this,"pathname",""),g(this,"protocol",""),g(this,"search","");var n=new RegExp("^([a-zA-Z]+?:)(\\/*[a-zA-Z0-9-\\.%\\+\\(\\)/#]+)\\/?(\\?.*)?$").exec(t);if(null==n)throw new Error("Regex failed");this.protocol=n[1],this.pathname=n[2],n.length>3&&null!=n[3]?this.search=n[3]:"/"==this.pathname[this.pathname.length-1]||this.pathname.includes("#")||(this.pathname+="/")}return s(e,[{key:"toJSON",value:function(){throw new Error("Method not implemented.")}},{key:"toString",value:function(){return this.protocol+this.pathname+this.search}}]),e}();!function(e){e[e.Text=0]="Text",e[e.Link=1]="Link"}(y||(y={}));var _,C=function(){function e(t){i(this,e),this._type=t}return s(e,[{key:"type",get:function(){return this._type}},{key:"value",get:function(){return""}}]),e}(),k=function(e){u(n,e);var t=v(n);function n(e){var o;return i(this,n),(o=t.call(this,y.Text))._data=e,o}return s(n,[{key:"value",get:function(){return this._data}}]),n}(C),S=function(e){u(n,e);var t=v(n);function n(e,o){var r;return i(this,n),(r=t.call(this,y.Link))._uri=e,r._content=o,r}return s(n,[{key:"value",get:function(){return this._content}},{key:"link",get:function(){return this._uri}}]),n}(C);function w(e){for(var t=[],n=0,o="",r=0,i=0,a=!1,s=!1,l=[],u=function(e,t){return t?e.replace(/\\[\[\]\(\\\)]/g,(function(e,t,n){return e.substr(1)})):e},c=function(e,t,n){if(e.length>=1&&e[e.length-1].type==y.Text){var o=new k(e[e.length-1].value+u(t,n));e[e.length-1]=o}else e.push(new k(u(t,n)))},d=0;d<e.length;d++)switch(e[d]){case"\\":s=!0,d<e.length-1&&-1!="\\()[]".indexOf(e[d+1])&&d++;break;case"[":l.push(d);break;case"]":d<e.length-1&&"("==e[d+1]&&l.length>0&&(i=l[l.length-1],o=u(e.substring(i+1,d),s),a=!0,r=++d),l.length>0&&l.pop();break;case")":if(!a)break;n<i&&(c(t,e.substring(n,i),s),s=!1);try{if(0==o.length)throw new Error("The link content is empty");var p=new b(e.substring(r+1,d));t.push(new S(p,o))}catch(e){i=-1,o.length>0&&(c(t,o,s),s=!1)}a=!1,n=d+1}return n<e.length&&c(t,e.substring(n),s),t}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=f(e);if(t){var r=f(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return p(this,n)}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}!function(e){e[e.Text=0]="Text",e[e.Region=1]="Region",e[e.Tree=2]="Tree"}(_||(_={}));var I=function(){function e(t){i(this,e),this._type=t,this._id=this.templateName+"_"+(e._idCounter++).toString()}return s(e,[{key:"templateName",get:function(){switch(this._type){case _.Text:return"TextItemView";case _.Region:return"RegionItemView";case _.Tree:return"TreeItemView";default:throw new Error("Unknown item type!")}}},{key:"type",get:function(){return this._type}},{key:"id",get:function(){return this._id}}]),e}();g(I,"_idCounter",0);var D=function(){function e(t){i(this,e),g(this,"_items",[]),g(this,"_shortDescription",""),g(this,"_errorCode",""),g(this,"_severity",""),t.shortDescription&&(this._shortDescription=t.shortDescription),t.errorCode&&(this._errorCode=t.errorCode),t.severity&&(this._severity=t.severity),t.details&&(this._items=e.parseDetailItemArray(t.details))}return s(e,[{key:"items",get:function(){return this._items}},{key:"shortDescription",get:function(){return this._shortDescription}},{key:"errorCode",get:function(){return this._errorCode}},{key:"severity",get:function(){return this._severity}},{key:"sortWeight",get:function(){return"warning"==this._severity?2:"info"==this._severity?1:"error"==this._severity?3:-1}}],[{key:"parseDetailItemArray",value:function(t){var n,o=[],r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}(t);try{for(r.s();!(n=r.n()).done;){var i=n.value,a=e.parseDetailItem(i);null!=a&&o.push(a)}}catch(e){r.e(e)}finally{r.f()}return o}},{key:"parseDetailItem",value:function(t){if("text"in t)return new R(t.text);if("region"in t){var n=t.region;if("header"in n&&"items"in n){var o=e.parseDetailItemArray(n.items),r=n.header;return new T(r,o)}}if("tree"in t){var i=t.tree;if("columnModel"in i&&"roots"in i){var a=i.columnModel,s=M.parseRows(i.roots);return new F(a,s)}}return null}}]),e}(),R=function(e){u(n,e);var t=x(n);function n(e){var o;return i(this,n),g(d(o=t.call(this,_.Text)),"_fragments",[]),o._originalText=e,o._fragments=w(e),o}return s(n,[{key:"fragments",get:function(){return this._fragments}},{key:"originalText",get:function(){return this._originalText}}]),n}(I),T=function(e){u(n,e);var t=x(n);function n(e,o){var r;return i(this,n),g(d(r=t.call(this,_.Region)),"_items",[]),r._header=e,r._items=o,r}return s(n,[{key:"header",get:function(){return this._header}},{key:"items",get:function(){return this._items}}]),n}(I),P=function(){function e(t){i(this,e),this._fragments=t}return s(e,[{key:"fragments",get:function(){return this._fragments}}]),e}(),M=function(){function e(){i(this,e),g(this,"values",[]),g(this,"children",[])}return s(e,null,[{key:"parseRows",value:function(t){if(!Array.isArray(t))throw new Error("The row json needs to be an array");return t.map((function(t){var n=new e;if(!("values"in t))throw new Error("The row doesn't contain a values property");var o=t.values;return n.values=o.map((function(e){return"string"==typeof e?new P(w(e)):e})),n.children=e.parseRows(t.children),n}))}}]),e}(),F=function(e){u(n,e);var t=x(n);function n(e,o){var r;return i(this,n),(r=t.call(this,_.Tree))._columnModel=e,r._roots=o,r}return s(n,[{key:"getType",value:function(){return"tree"}},{key:"columnModel",get:function(){return this._columnModel}},{key:"roots",get:function(){return this._roots}}]),n}(I),L=function(){function e(){i(this,e)}return s(e,null,[{key:"reword",value:function(t){if(t.items.length<1||t.items[0].type!=_.Region)return t;var n=t.items[0];if(n.items.length<1||n.items[0].type!=_.Text)return t;var o=n.items[0].originalText.match(/Asynchronous method '(\[.+\]\(.+\))'.+'(\[.+\]\(.+\))'.+/);if(3!=o.length)return t;var r=e.stripModuleNameFromFrameLink(o[1]),i=e.stripModuleNameFromFrameLink(o[2]);return new D({errorCode:t.errorCode,severity:t.severity,shortDescription:"Sync over async",details:[{region:{header:"",items:[{text:r+" is synchronously waiting on "+i+", causing thread pool starvation."}]}},{region:{header:"Why is this bad?",items:[{text:"Once you go async, all of your callers should be async. In many cases, being partially async can be worse than being entirely synchronous."},{region:{header:"",items:[{text:"[Avoid using Task.Result and Task.Wait](https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md/#avoid-using-taskresult-and-taskwait)"}]}}]}},{region:{header:"How do I fix it?",items:[{text:"Use the await keyword to get the result from calling an async method."},{region:{header:"",items:[{text:"[Asynchrony is viral](https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md/#asynchrony-is-viral)"}]}}]}}]})}},{key:"stripModuleNameFromFrameLink",value:function(e){var t=e.match(/\[(.+)!(.+\]\(.+\))/);return 3!=t.length?e:"["+t[2]}}]),e}(),A=function(){function e(){i(this,e)}return s(e,null,[{key:"loadData",value:function(t){var n=[];return t.interpretedResults.forEach((function(t){var o=new D(t);n.push(e.rewordDetailedResult(o))})),this.sortItems(n),n}},{key:"sortItems",value:function(e){e.sort((function(e,t){return t.sortWeight-e.sortWeight}))}},{key:"GetImportantErrorCodes",value:function(){return[e.SyncAsyncMainErrorCode,e.SyncAsyncStarveErrorCode]}},{key:"UpdateCurrentSlug",value:function(e){var t=new URL(document.location.href);t.hash=e?"#"+e:"#",document.location.href=t.toString()}},{key:"GetCurrentSlug",value:function(){var e=new URL(document.location.href);return e.hash?e.hash.substring(1):null}},{key:"rewordDetailedResult",value:function(t){switch(t.errorCode){case e.SyncAsyncMainErrorCode:case e.SyncAsyncStarveErrorCode:return L.reword(t);case e.SyncAsyncStressErrorCode:case e.SyncAsyncThreadQueueErrorCode:default:return t}}}]),e}();g(A,"tableIndex",0),g(A,"SyncAsyncMainErrorCode","AA0004"),g(A,"SyncAsyncStarveErrorCode","AA0005"),g(A,"SyncAsyncStressErrorCode","AA0006"),g(A,"SyncAsyncThreadQueueErrorCode","AA0007");var N=function(e,t){return N=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},N(e,t)};function B(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}N(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var H=function(){return H=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},H.apply(this,arguments)};function O(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}function z(e,t,n,o){var r,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,o);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(i<3?r(a):i>3?r(t,n,a):r(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function W(e,t,n){if(n||2===arguments.length)for(var o,r=0,i=t.length;r<i;r++)!o&&r in t||(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))}Object.create,Object.create;var U=function(){return U=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},U.apply(this,arguments)};function V(e,t,n){if(n||2===arguments.length)for(var o,r=0,i=t.length;r<i;r++)!o&&r in t||(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))}Object.create,Object.create;var G,j="undefined"!=typeof navigator&&/rv:11.0/.test(navigator.userAgent),K={};try{K=window||{}}catch(oe){}var q,Z=function(){function e(e,t){var n,o,r,i,a,s;this._rules=[],this._preservedRules=[],this._counter=0,this._keyToClassName={},this._onInsertRuleCallbacks=[],this._onResetCallbacks=[],this._classNameToArgs={},this._config=U({injectionMode:"undefined"==typeof document?0:1,defaultPrefix:"css",namespace:void 0,cspSettings:void 0},e),this._classNameToArgs=null!==(n=null==t?void 0:t.classNameToArgs)&&void 0!==n?n:this._classNameToArgs,this._counter=null!==(o=null==t?void 0:t.counter)&&void 0!==o?o:this._counter,this._keyToClassName=null!==(i=null!==(r=this._config.classNameCache)&&void 0!==r?r:null==t?void 0:t.keyToClassName)&&void 0!==i?i:this._keyToClassName,this._preservedRules=null!==(a=null==t?void 0:t.preservedRules)&&void 0!==a?a:this._preservedRules,this._rules=null!==(s=null==t?void 0:t.rules)&&void 0!==s?s:this._rules}return e.getInstance=function(){if(!(G=K.__stylesheet__)||G._lastStyleElement&&G._lastStyleElement.ownerDocument!==document){var t=(null==K?void 0:K.FabricConfig)||{},n=new e(t.mergeStyles,t.serializedStylesheet);G=n,K.__stylesheet__=n}return G},e.prototype.serialize=function(){return JSON.stringify({classNameToArgs:this._classNameToArgs,counter:this._counter,keyToClassName:this._keyToClassName,preservedRules:this._preservedRules,rules:this._rules})},e.prototype.setConfig=function(e){this._config=U(U({},this._config),e)},e.prototype.onReset=function(e){var t=this;return this._onResetCallbacks.push(e),function(){t._onResetCallbacks=t._onResetCallbacks.filter((function(t){return t!==e}))}},e.prototype.onInsertRule=function(e){var t=this;return this._onInsertRuleCallbacks.push(e),function(){t._onInsertRuleCallbacks=t._onInsertRuleCallbacks.filter((function(t){return t!==e}))}},e.prototype.getClassName=function(e){var t=this._config.namespace;return(t?t+"-":"")+(e||this._config.defaultPrefix)+"-"+this._counter++},e.prototype.cacheClassName=function(e,t,n,o){this._keyToClassName[t]=e,this._classNameToArgs[e]={args:n,rules:o}},e.prototype.classNameFromKey=function(e){return this._keyToClassName[e]},e.prototype.getClassNameCache=function(){return this._keyToClassName},e.prototype.argsFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.args},e.prototype.insertedRulesFromClassName=function(e){var t=this._classNameToArgs[e];return t&&t.rules},e.prototype.insertRule=function(e,t){var n=this._config.injectionMode,o=0!==n?this._getStyleElement():void 0;if(t&&this._preservedRules.push(e),o)switch(n){case 1:var r=o.sheet;try{r.insertRule(e,r.cssRules.length)}catch(e){}break;case 2:o.appendChild(document.createTextNode(e))}else this._rules.push(e);this._config.onInsertRule&&this._config.onInsertRule(e),this._onInsertRuleCallbacks.forEach((function(e){return e()}))},e.prototype.getRules=function(e){return(e?this._preservedRules.join(""):"")+this._rules.join("")},e.prototype.reset=function(){this._rules=[],this._counter=0,this._classNameToArgs={},this._keyToClassName={},this._onResetCallbacks.forEach((function(e){return e()}))},e.prototype.resetKeys=function(){this._keyToClassName={}},e.prototype._getStyleElement=function(){var e=this;return this._styleElement||"undefined"==typeof document||(this._styleElement=this._createStyleElement(),j||window.requestAnimationFrame((function(){e._styleElement=void 0}))),this._styleElement},e.prototype._createStyleElement=function(){var e=document.head,t=document.createElement("style"),n=null;t.setAttribute("data-merge-styles","true");var o=this._config.cspSettings;if(o&&o.nonce&&t.setAttribute("nonce",o.nonce),this._lastStyleElement)n=this._lastStyleElement.nextElementSibling;else{var r=this._findPlaceholderStyleTag();n=r?r.nextElementSibling:e.childNodes[0]}return e.insertBefore(t,e.contains(n)?n:null),this._lastStyleElement=t,t},e.prototype._findPlaceholderStyleTag=function(){var e=document.head;return e?e.querySelector("style[data-merge-styles]"):null},e}();function Q(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=[],o=[],r=Z.getInstance();function i(e){for(var t=0,a=e;t<a.length;t++){var s=a[t];if(s)if("string"==typeof s)if(s.indexOf(" ")>=0)i(s.split(" "));else{var l=r.argsFromClassName(s);l?i(l):-1===n.indexOf(s)&&n.push(s)}else Array.isArray(s)?i(s):"object"==typeof s&&o.push(s)}}return i(e),{classes:n,objects:o}}function Y(e){q!==e&&(q=e)}function $(){return void 0===q&&(q="undefined"!=typeof document&&!!document.documentElement&&"rtl"===document.documentElement.getAttribute("dir")),q}function X(){return{rtl:$()}}q=$();var J,ee={},te={"user-select":1};function ne(e,t){var n=function(){var e;if(!J){var t="undefined"!=typeof document?document:void 0,n="undefined"!=typeof navigator?navigator:void 0,o=null===(e=null==n?void 0:n.userAgent)||void 0===e?void 0:e.toLowerCase();J=t?{isWebkit:!(!t||!("WebkitAppearance"in t.documentElement.style)),isMoz:!!(o&&o.indexOf("firefox")>-1),isOpera:!!(o&&o.indexOf("opera")>-1),isMs:!(!n||!/rv:11.0/i.test(n.userAgent)&&!/Edge\/\d./i.test(navigator.userAgent))}:{isWebkit:!0,isMoz:!0,isOpera:!0,isMs:!0}}return J}(),o=e[t];if(te[o]){var r=e[t+1];te[o]&&(n.isWebkit&&e.push("-webkit-"+o,r),n.isMoz&&e.push("-moz-"+o,r),n.isMs&&e.push("-ms-"+o,r),n.isOpera&&e.push("-o-"+o,r))}}var oe,re=["column-count","font-weight","flex","flex-grow","flex-shrink","fill-opacity","opacity","order","z-index","zoom"];function ie(e,t){var n=e[t],o=e[t+1];if("number"==typeof o){var r=re.indexOf(n)>-1,i=n.indexOf("--")>-1,a=r||i?"":"px";e[t+1]=""+o+a}}var ae="left",se="right",le=((oe={}).left=se,oe.right=ae,oe),ue={"w-resize":"e-resize","sw-resize":"se-resize","nw-resize":"ne-resize"};function ce(e,t,n){if(e.rtl){var o=t[n];if(!o)return;var r=t[n+1];if("string"==typeof r&&r.indexOf("@noflip")>=0)t[n+1]=r.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g,"");else if(o.indexOf(ae)>=0)t[n]=o.replace(ae,se);else if(o.indexOf(se)>=0)t[n]=o.replace(se,ae);else if(String(r).indexOf(ae)>=0)t[n+1]=r.replace(ae,se);else if(String(r).indexOf(se)>=0)t[n+1]=r.replace(se,ae);else if(le[o])t[n]=le[o];else if(ue[r])t[n+1]=ue[r];else switch(o){case"margin":case"padding":t[n+1]=function(e){if("string"==typeof e){var t=e.split(" ");if(4===t.length)return t[0]+" "+t[3]+" "+t[2]+" "+t[1]}return e}(r);break;case"box-shadow":t[n+1]=function(e,t){var n=e.split(" "),o=parseInt(n[0],10);return n[0]=n[0].replace(String(o),String(-1*o)),n.join(" ")}(r)}}}function de(e){var t=e&&e["&"];return t?t.displayName:void 0}var pe=/\:global\((.+?)\)/g;function fe(e,t){return e.indexOf(":global(")>=0?e.replace(pe,"$1"):0===e.indexOf(":")?t+e:e.indexOf("&")<0?t+" "+e:e}function he(e,t,n,o){void 0===t&&(t={__order:[]}),0===n.indexOf("@")?me([o],t,n=n+"{"+e):n.indexOf(",")>-1?function(e){if(!pe.test(e))return e;for(var t=[],n=/\:global\((.+?)\)/g,o=null;o=n.exec(e);)o[1].indexOf(",")>-1&&t.push([o.index,o.index+o[0].length,o[1].split(",").map((function(e){return":global("+e.trim()+")"})).join(", ")]);return t.reverse().reduce((function(e,t){var n=t[0],o=t[1],r=t[2];return e.slice(0,n)+r+e.slice(o)}),e)}(n).split(",").map((function(e){return e.trim()})).forEach((function(n){return me([o],t,fe(n,e))})):me([o],t,fe(n,e))}function me(e,t,n){void 0===t&&(t={__order:[]}),void 0===n&&(n="&");var o=Z.getInstance(),r=t[n];r||(r={},t[n]=r,t.__order.push(n));for(var i=0,a=e;i<a.length;i++){var s=a[i];if("string"==typeof s){var l=o.argsFromClassName(s);l&&me(l,t,n)}else if(Array.isArray(s))me(s,t,n);else for(var u in s)if(s.hasOwnProperty(u)){var c=s[u];if("selectors"===u){var d=s.selectors;for(var p in d)d.hasOwnProperty(p)&&he(n,t,p,d[p])}else"object"==typeof c?null!==c&&he(n,t,u,c):void 0!==c&&("margin"===u||"padding"===u?ge(r,u,c):r[u]=c)}}return t}function ge(e,t,n){var o="string"==typeof n?function(e){for(var t=[],n=0,o=0,r=0;r<e.length;r++)switch(e[r]){case"(":o++;break;case")":o&&o--;break;case"\t":case" ":o||(r>n&&t.push(e.substring(n,r)),n=r+1)}return n<e.length&&t.push(e.substring(n)),t}(n):[n];0===o.length&&o.push(n),"!important"===o[o.length-1]&&(o=o.slice(0,-1).map((function(e){return e+" !important"}))),e[t+"Top"]=o[0],e[t+"Right"]=o[1]||o[0],e[t+"Bottom"]=o[2]||o[0],e[t+"Left"]=o[3]||o[1]||o[0]}function ve(e,t){for(var n=[e.rtl?"rtl":"ltr"],o=!1,r=0,i=t.__order;r<i.length;r++){var a=i[r];n.push(a);var s=t[a];for(var l in s)s.hasOwnProperty(l)&&void 0!==s[l]&&(o=!0,n.push(l,s[l]))}return o?n.join(""):void 0}function ye(e,t){return t<=0?"":1===t?e:e+ye(e,t-1)}function be(e,t){if(!t)return"";var n,o,r,i=[];for(var a in t)t.hasOwnProperty(a)&&"displayName"!==a&&void 0!==t[a]&&i.push(a,t[a]);for(var s=0;s<i.length;s+=2)r=void 0,"-"!==(r=(n=i)[o=s]).charAt(0)&&(n[o]=ee[r]=ee[r]||r.replace(/([A-Z])/g,"-$1").toLowerCase()),ie(i,s),ce(e,i,s),ne(i,s);for(s=1;s<i.length;s+=4)i.splice(s,1,":",i[s],";");return i.join("")}function _e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=me(t),r=ve(e,o);if(r){var i=Z.getInstance(),a={className:i.classNameFromKey(r),key:r,args:t};if(!a.className){a.className=i.getClassName(de(o));for(var s=[],l=0,u=o.__order;l<u.length;l++){var c=u[l];s.push(c,be(e,o[c]))}a.rulesToInsert=s}return a}}function Ce(e,t){void 0===t&&(t=1);var n=Z.getInstance(),o=e.className,r=e.key,i=e.args,a=e.rulesToInsert;if(a){for(var s=0;s<a.length;s+=2){var l=a[s+1];if(l){var u=a[s],c=(u=u.replace(/&/g,ye("."+e.className,t)))+"{"+l+"}"+(0===u.indexOf("@")?"}":"");n.insertRule(c)}}n.cacheClassName(o,r,i,a)}}function ke(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Se(e,X())}function Se(e,t){var n=Q(e instanceof Array?e:[e]),o=n.classes,r=n.objects;return r.length&&o.push(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=_e.apply(void 0,V([e],t));return o?(Ce(o,e.specificityMultiplier),o.className):""}(t||{},r)),o.join(" ")}function we(e){var t=Z.getInstance(),n=[];for(var o in e)e.hasOwnProperty(o)&&n.push(o,"{",be(X(),e[o]),"}");var r=n.join(""),i=t.classNameFromKey(r);if(i)return i;var a=t.getClassName();return t.insertRule("@keyframes "+a+"{"+r+"}",!0),t.cacheClassName(a,r,[],["keyframes",r]),a}var xe="cubic-bezier(.1,.9,.2,1)",Ee="cubic-bezier(.1,.25,.75,.9)",Ie="0.167s",De="0.267s",Re="0.367s",Te="0.467s",Pe=we({from:{opacity:0},to:{opacity:1}}),Me=we({from:{opacity:1},to:{opacity:0,visibility:"hidden"}}),Fe=pt(-10),Le=pt(-20),Ae=pt(-40),Ne=pt(-400),Be=pt(10),He=pt(20),Oe=pt(40),ze=pt(400),We=ft(10),Ue=ft(20),Ve=ft(-10),Ge=ft(-20),je=ht(10),Ke=ht(20),qe=ht(40),Ze=ht(400),Qe=ht(-10),Ye=ht(-20),$e=ht(-40),Xe=ht(-400),Je=mt(-10),et=mt(-20),tt=mt(10),nt=mt(20),ot=we({from:{transform:"scale3d(.98,.98,1)"},to:{transform:"scale3d(1,1,1)"}}),rt=we({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(.98,.98,1)"}}),it=we({from:{transform:"scale3d(1.03,1.03,1)"},to:{transform:"scale3d(1,1,1)"}}),at=we({from:{transform:"scale3d(1,1,1)"},to:{transform:"scale3d(1.03,1.03,1)"}}),st=we({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(90deg)"}}),lt=we({from:{transform:"rotateZ(0deg)"},to:{transform:"rotateZ(-90deg)"}}),ut=De,ct={slideRightIn10:dt(Pe+","+Fe,Re,xe),slideRightIn20:dt(Pe+","+Le,Re,xe),slideRightIn40:dt(Pe+","+Ae,Re,xe),slideRightIn400:dt(Pe+","+Ne,Re,xe),slideLeftIn10:dt(Pe+","+Be,Re,xe),slideLeftIn20:dt(Pe+","+He,Re,xe),slideLeftIn40:dt(Pe+","+Oe,Re,xe),slideLeftIn400:dt(Pe+","+ze,Re,xe),slideUpIn10:dt(Pe+","+We,Re,xe),slideUpIn20:dt(Pe+","+Ue,Re,xe),slideDownIn10:dt(Pe+","+Ve,Re,xe),slideDownIn20:dt(Pe+","+Ge,Re,xe),slideRightOut10:dt(Me+","+je,Re,xe),slideRightOut20:dt(Me+","+Ke,Re,xe),slideRightOut40:dt(Me+","+qe,Re,xe),slideRightOut400:dt(Me+","+Ze,Re,xe),slideLeftOut10:dt(Me+","+Qe,Re,xe),slideLeftOut20:dt(Me+","+Ye,Re,xe),slideLeftOut40:dt(Me+","+$e,Re,xe),slideLeftOut400:dt(Me+","+Xe,Re,xe),slideUpOut10:dt(Me+","+Je,Re,xe),slideUpOut20:dt(Me+","+et,Re,xe),slideDownOut10:dt(Me+","+tt,Re,xe),slideDownOut20:dt(Me+","+nt,Re,xe),scaleUpIn100:dt(Pe+","+ot,Re,xe),scaleDownIn100:dt(Pe+","+it,Re,xe),scaleUpOut103:dt(Me+","+at,Ie,Ee),scaleDownOut98:dt(Me+","+rt,Ie,Ee),fadeIn100:dt(Pe,Ie,Ee),fadeIn200:dt(Pe,De,Ee),fadeIn400:dt(Pe,Re,Ee),fadeIn500:dt(Pe,Te,Ee),fadeOut100:dt(Me,Ie,Ee),fadeOut200:dt(Me,De,Ee),fadeOut400:dt(Me,Re,Ee),fadeOut500:dt(Me,Te,Ee),rotate90deg:dt(st,"0.1s",Ee),rotateN90deg:dt(lt,"0.1s",Ee)};function dt(e,t,n){return{animationName:e,animationDuration:t,animationTimingFunction:n,animationFillMode:"both"}}function pt(e){return we({from:{transform:"translate3d("+e+"px,0,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function ft(e){return we({from:{transform:"translate3d(0,"+e+"px,0)",pointerEvents:"none"},to:{transform:"translate3d(0,0,0)",pointerEvents:"auto"}})}function ht(e){return we({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d("+e+"px,0,0)"}})}function mt(e){return we({from:{transform:"translate3d(0,0,0)"},to:{transform:"translate3d(0,"+e+"px,0)"}})}var gt,vt,yt,bt,_t,Ct=function(e){var t={},n=function(n){var o;e.hasOwnProperty(n)&&Object.defineProperty(t,n,{get:function(){return void 0===o&&(o=ke(e[n]).toString()),o},enumerable:!0,configurable:!0})};for(var o in e)n(o);return t}(ct);!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"}(gt||(gt={})),function(e){e.Arabic="'"+gt.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+gt.Cyrillic+"'",e.EastEuropean="'"+gt.EastEuropean+"'",e.Greek="'"+gt.Greek+"'",e.Hebrew="'"+gt.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+gt.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+gt.Vietnamese+"'",e.WestEuropean="'"+gt.WestEuropean+"'",e.Armenian="'"+gt.Armenian+"'",e.Georgian="'"+gt.Georgian+"'"}(vt||(vt={})),function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"}(yt||(yt={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(bt||(bt={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(_t||(_t={}));var kt,St="@media screen and (-ms-high-contrast: active), (forced-colors: active)";function wt(e,t){return"@media only screen"+("number"==typeof e?" and (min-width: "+e+"px)":"")+("number"==typeof t?" and (max-width: "+t+"px)":"")}function xt(e,t,n,o,r,i,a){return function(e,t){var n,o;void 0===t&&(t={});var r=t.inset,i=void 0===r?0:r,a=t.width,s=void 0===a?1:a,l=t.position,u=void 0===l?"relative":l,c=t.highContrastStyle,d=t.borderColor,p=void 0===d?e.palette.white:d,f=t.outlineColor,h=void 0===f?e.palette.neutralSecondary:f,m=t.isFocusedOnly;return{outline:"transparent",position:u,selectors:(n={"::-moz-focus-inner":{border:"0"}},n[".ms-Fabric--isFocusVisible &"+(void 0===m||m?":focus":"")+":after"]={content:'""',position:"absolute",left:i+1,top:i+1,bottom:i+1,right:i+1,border:s+"px solid "+p,outline:s+"px solid "+h,zIndex:kt.FocusStyle,selectors:(o={},o[St]=c,o)},n)}}(e,"number"!=typeof t&&t?t:{inset:t,position:n,highContrastStyle:o,borderColor:r,outlineColor:i,isFocusedOnly:a})}!function(e){e.Nav=1,e.ScrollablePane=1,e.FocusStyle=1,e.Coachmark=1e3,e.Layer=1e6,e.KeytipLayer=1000001}(kt||(kt={}));var Et={position:"absolute",width:1,height:1,margin:-1,padding:0,border:0,overflow:"hidden",whiteSpace:"nowrap"},It=!1,Dt=0,Rt={empty:!0},Tt={},Pt="undefined"==typeof WeakMap?null:WeakMap;function Mt(){Dt++}function Ft(e){return e?"object"==typeof e||"function"==typeof e?e:(Tt[e]||(Tt[e]={val:e}),Tt[e]):Rt}function Lt(){return{map:Pt?new Pt:null}}var At=function(e,t,n){if(void 0===t&&(t=100),void 0===n&&(n=!1),!Pt)return e;if(!It){var o=Z.getInstance();o&&o.onReset&&Z.getInstance().onReset(Mt),It=!0}var r,i=0,a=Dt;return function(){for(var o=[],s=0;s<arguments.length;s++)o[s]=arguments[s];var l=r;(void 0===r||a!==Dt||t>0&&i>t)&&(r=Lt(),i=0,a=Dt),l=r;for(var u=0;u<o.length;u++){var c=Ft(o[u]);l.map.has(c)||l.map.set(c,Lt()),l=l.map.get(c)}return l.hasOwnProperty("value")||(l.value=e.apply(void 0,o),i++),!n||null!==l.value&&void 0!==l.value||(l.value=e.apply(void 0,o)),l.value}}((function(e,t){var n=Z.getInstance();return t?Object.keys(e).reduce((function(t,o){return t[o]=n.getClassName(e[o]),t}),{}):e}));function Nt(e,t,n){return At(e,void 0!==n?n:t.disableGlobalClassNames)}var Bt=function(){return Bt=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Bt.apply(this,arguments)};Object.create,Object.create;var Ht=void 0;try{Ht=window}catch(e){}function Ot(e){if(void 0!==Ht){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:Ht}}var zt=0,Wt=function(){function e(){}return e.getValue=function(e,t){var n=Ut();return void 0===n[e]&&(n[e]="function"==typeof t?t():t),n[e]},e.setValue=function(e,t){var n=Ut(),o=n.__callbacks__,r=n[e];if(t!==r){n[e]=t;var i={oldValue:r,value:t,key:e};for(var a in o)o.hasOwnProperty(a)&&o[a](i)}return t},e.addChangeListener=function(e){var t=e.__id__,n=Vt();t||(t=e.__id__=String(zt++)),n[t]=e},e.removeChangeListener=function(e){delete Vt()[e.__id__]},e}();function Ut(){var e,t=Ot()||{};return t.__globalSettings__||(t.__globalSettings__=((e={}).__callbacks__={},e)),t.__globalSettings__}function Vt(){return Ut().__callbacks__}var Gt,jt={settings:{},scopedSettings:{},inCustomizerContext:!1},Kt=Wt.getValue("customizations",{settings:{},scopedSettings:{},inCustomizerContext:!1}),qt=[],Zt=function(){function e(){}return e.reset=function(){Kt.settings={},Kt.scopedSettings={}},e.applySettings=function(t){Kt.settings=Bt(Bt({},Kt.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){Kt.scopedSettings[t]=Bt(Bt({},Kt.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=jt);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&Kt.scopedSettings[t]||{},a=0,s=e;a<s.length;a++){var l=s[a];o[l]=r[l]||n.settings[l]||i[l]||Kt.settings[l]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch(e){}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(e){qt.push(e)},e.unobserve=function(e){qt=qt.filter((function(t){return t!==e}))},e._raiseChange=function(){e._suppressUpdates||qt.forEach((function(e){return e()}))},e}(),Qt=function(){return Qt=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Qt.apply(this,arguments)},Yt="undefined"==typeof window?r.g:window,$t=Yt&&Yt.CSPSettings&&Yt.CSPSettings.nonce,Xt=((Gt=Yt.__themeState__||{theme:void 0,lastStyleElement:void 0,registeredStyles:[]}).runState||(Gt=Qt(Qt({},Gt),{perf:{count:0,duration:0},runState:{flushTimer:0,mode:0,buffer:[]}})),Gt.registeredThemableStyles||(Gt=Qt(Qt({},Gt),{registeredThemableStyles:[]})),Yt.__themeState__=Gt,Gt);function Jt(e){Xt.theme=e,function(){if(Xt.theme){for(var e=[],t=0,n=Xt.registeredThemableStyles;t<n.length;t++){var o=n[t];e.push(o.themableStyle)}e.length>0&&(void 0===(i=1)&&(i=3),3!==i&&2!==i||(en(Xt.registeredStyles),Xt.registeredStyles=[]),3!==i&&1!==i||(en(Xt.registeredThemableStyles),Xt.registeredThemableStyles=[]),r=[].concat.apply([],e),Xt.loadStyles?Xt.loadStyles(tn(r).styleString,r):function(e){if("undefined"!=typeof document){var t=document.getElementsByTagName("head")[0],n=document.createElement("style"),o=tn(e),r=o.styleString,i=o.themable;n.setAttribute("data-load-themed-styles","true"),$t&&n.setAttribute("nonce",$t),n.appendChild(document.createTextNode(r)),Xt.perf.count++,t.appendChild(n);var a=document.createEvent("HTMLEvents");a.initEvent("styleinsert",!0,!1),a.args={newStyle:n},document.dispatchEvent(a);var s={styleElement:n,themableStyle:e};i?Xt.registeredThemableStyles.push(s):Xt.registeredStyles.push(s)}}(r))}var r,i}()}function en(e){e.forEach((function(e){var t=e&&e.styleElement;t&&t.parentElement&&t.parentElement.removeChild(t)}))}function tn(e){var t=Xt.theme,n=!1;return{styleString:(e||[]).map((function(e){var o=e.theme;if(o){n=!0;var r=t?t[o]:void 0,i=e.defaultValue||"inherit";return t&&!r&&console&&!(o in t)&&"undefined"!=typeof DEBUG&&DEBUG&&console.warn('Theming value not provided for "'.concat(o,'". Falling back to "').concat(i,'".')),r||i}return e.rawString})).join(""),themable:n}}var nn,on={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"};!function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"}(nn||(nn={}));var rn={elevation4:nn.depth4,elevation8:nn.depth8,elevation16:nn.depth16,elevation64:nn.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"};function an(e){var t=Z.getInstance(),n=be(X(),e);if(!t.classNameFromKey(n)){var o=t.getClassName();t.insertRule("@font-face{"+n+"}",!0),t.cacheClassName(o,n,[],["font-face",n])}}var sn,ln="'Segoe UI', '"+gt.WestEuropean+"'",un={ar:vt.Arabic,bg:vt.Cyrillic,cs:vt.EastEuropean,el:vt.Greek,et:vt.EastEuropean,he:vt.Hebrew,hi:vt.Hindi,hr:vt.EastEuropean,hu:vt.EastEuropean,ja:vt.Japanese,kk:vt.EastEuropean,ko:vt.Korean,lt:vt.EastEuropean,lv:vt.EastEuropean,pl:vt.EastEuropean,ru:vt.Cyrillic,sk:vt.EastEuropean,"sr-latn":vt.EastEuropean,th:vt.Thai,tr:vt.EastEuropean,uk:vt.Cyrillic,vi:vt.Vietnamese,"zh-hans":vt.ChineseSimplified,"zh-hant":vt.ChineseTraditional,hy:vt.Armenian,ka:vt.Georgian};function cn(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}var dn,pn=(dn=function(e){for(var t in un)if(un.hasOwnProperty(t)&&e&&0===t.indexOf(e))return un[t];return ln}(function(e){if(void 0===e&&(e="sessionStorage"),void 0===sn){var t=function(e){if("undefined"!=typeof document){return document}}(),n="localStorage"===e?function(e){var t=null;try{var n=Ot();t=n?n.localStorage.getItem("language"):null}catch(e){}return t}():"sessionStorage"===e?function(e){var t=null;try{var n=Ot();t=n?n.sessionStorage.getItem("language"):null}catch(e){}return t}():void 0;n&&(sn=n),void 0===sn&&t&&(sn=t.documentElement.getAttribute("lang")),void 0===sn&&(sn="en")}return sn}())+", 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",{tiny:cn(yt.mini,bt.regular,dn),xSmall:cn(yt.xSmall,bt.regular,dn),small:cn(yt.small,bt.regular,dn),smallPlus:cn(yt.smallPlus,bt.regular,dn),medium:cn(yt.medium,bt.regular,dn),mediumPlus:cn(yt.mediumPlus,bt.regular,dn),large:cn(yt.large,bt.regular,dn),xLarge:cn(yt.xLarge,bt.semibold,dn),xLargePlus:cn(yt.xLargePlus,bt.semibold,dn),xxLarge:cn(yt.xxLarge,bt.semibold,dn),xxLargePlus:cn(yt.xxLargePlus,bt.semibold,dn),superLarge:cn(yt.superLarge,bt.semibold,dn),mega:cn(yt.mega,bt.semibold,dn)});function fn(e,t,n,o){an({fontFamily:e="'"+e+"'",src:(void 0!==o?"local('"+o+"'),":"")+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function hn(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;fn(t,i+"-light",bt.light,r&&r+" Light"),fn(t,i+"-semilight",bt.semilight,r&&r+" SemiLight"),fn(t,i+"-regular",bt.regular,r),fn(t,i+"-semibold",bt.semibold,r&&r+" SemiBold"),fn(t,i+"-bold",bt.bold,r&&r+" Bold")}function mn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=0,r=t;o<r.length;o++){var i=r[o];gn(e||{},i)}return e}function gn(e,t,n){for(var o in void 0===n&&(n=[]),n.push(t),t)if(t.hasOwnProperty(o)&&"__proto__"!==o&&"constructor"!==o&&"prototype"!==o){var r=t[o];if("object"!=typeof r||null===r||Array.isArray(r))e[o]=r;else{var i=n.indexOf(r)>-1;e[o]=i?r:gn(e[o]||{},r,n)}}return n.pop(),e}function vn(e,t,n,o,r){return void 0===r&&(r=!1),function(e,t){var n="";return!0===t&&(n=" /* @deprecated */"),e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}(yn(e,t,Bt({primaryButtonBorder:"transparent",errorText:o?"#F1707B":"#a4262c",messageText:o?"#F3F2F1":"#323130",messageLink:o?"#6CB8F6":"#005A9E",messageLinkHovered:o?"#82C7FF":"#004578",infoIcon:o?"#C8C6C4":"#605e5c",errorIcon:o?"#F1707B":"#A80000",blockingIcon:o?"#442726":"#FDE7E9",warningIcon:o?"#C8C6C4":"#797775",severeWarningIcon:o?"#FCE100":"#D83B01",successIcon:o?"#92C353":"#107C10",infoBackground:o?"#323130":"#f3f2f1",errorBackground:o?"#442726":"#FDE7E9",blockingBackground:o?"#442726":"#FDE7E9",warningBackground:o?"#433519":"#FFF4CE",severeWarningBackground:o?"#4F2A0F":"#FED9CC",successBackground:o?"#393D1B":"#DFF6DD",warningHighlight:o?"#fff100":"#ffb900",successText:o?"#92c353":"#107C10"},n),o),r)}function yn(e,t,n,o,r){void 0===r&&(r=!1);var i={},a=e||{},s=a.white,l=a.black,u=a.themePrimary,c=a.themeDark,d=a.themeDarker,p=a.themeDarkAlt,f=a.themeLighter,h=a.neutralLight,m=a.neutralLighter,g=a.neutralDark,v=a.neutralQuaternary,y=a.neutralQuaternaryAlt,b=a.neutralPrimary,_=a.neutralSecondary,C=a.neutralSecondaryAlt,k=a.neutralTertiary,S=a.neutralTertiaryAlt,w=a.neutralLighterAlt,x=a.accent;return s&&(i.bodyBackground=s,i.bodyFrameBackground=s,i.accentButtonText=s,i.buttonBackground=s,i.primaryButtonText=s,i.primaryButtonTextHovered=s,i.primaryButtonTextPressed=s,i.inputBackground=s,i.inputForegroundChecked=s,i.listBackground=s,i.menuBackground=s,i.cardStandoutBackground=s),l&&(i.bodyTextChecked=l,i.buttonTextCheckedHovered=l),u&&(i.link=u,i.primaryButtonBackground=u,i.inputBackgroundChecked=u,i.inputIcon=u,i.inputFocusBorderAlt=u,i.menuIcon=u,i.menuHeader=u,i.accentButtonBackground=u),c&&(i.primaryButtonBackgroundPressed=c,i.inputBackgroundCheckedHovered=c,i.inputIconHovered=c),d&&(i.linkHovered=d),p&&(i.primaryButtonBackgroundHovered=p),f&&(i.inputPlaceholderBackgroundChecked=f),h&&(i.bodyBackgroundChecked=h,i.bodyFrameDivider=h,i.bodyDivider=h,i.variantBorder=h,i.buttonBackgroundCheckedHovered=h,i.buttonBackgroundPressed=h,i.listItemBackgroundChecked=h,i.listHeaderBackgroundPressed=h,i.menuItemBackgroundPressed=h,i.menuItemBackgroundChecked=h),m&&(i.bodyBackgroundHovered=m,i.buttonBackgroundHovered=m,i.buttonBackgroundDisabled=m,i.buttonBorderDisabled=m,i.primaryButtonBackgroundDisabled=m,i.disabledBackground=m,i.listItemBackgroundHovered=m,i.listHeaderBackgroundHovered=m,i.menuItemBackgroundHovered=m),v&&(i.primaryButtonTextDisabled=v,i.disabledSubtext=v),y&&(i.listItemBackgroundCheckedHovered=y),k&&(i.disabledBodyText=k,i.variantBorderHovered=(null==n?void 0:n.variantBorderHovered)||k,i.buttonTextDisabled=k,i.inputIconDisabled=k,i.disabledText=k),b&&(i.bodyText=b,i.actionLink=b,i.buttonText=b,i.inputBorderHovered=b,i.inputText=b,i.listText=b,i.menuItemText=b),w&&(i.bodyStandoutBackground=w,i.defaultStateBackground=w),g&&(i.actionLinkHovered=g,i.buttonTextHovered=g,i.buttonTextChecked=g,i.buttonTextPressed=g,i.inputTextHovered=g,i.menuItemTextHovered=g),_&&(i.bodySubtext=_,i.focusBorder=_,i.inputBorder=_,i.smallInputBorder=_,i.inputPlaceholderText=_),C&&(i.buttonBorder=C),S&&(i.disabledBodySubtext=S,i.disabledBorder=S,i.buttonBackgroundChecked=S,i.menuDivider=S),x&&(i.accentButtonBackground=x),(null==t?void 0:t.elevation4)&&(i.cardShadow=t.elevation4),!o&&(null==t?void 0:t.elevation8)?i.cardShadowHovered=t.elevation8:i.variantBorderHovered&&(i.cardShadowHovered="0 0 1px "+i.variantBorderHovered),Bt(Bt({},i),n)}!function(e){if(e){var t=e+"/fonts";hn(t,gt.Thai,"leelawadeeui-thai","leelawadeeui"),hn(t,gt.Arabic,"segoeui-arabic"),hn(t,gt.Cyrillic,"segoeui-cyrillic"),hn(t,gt.EastEuropean,"segoeui-easteuropean"),hn(t,gt.Greek,"segoeui-greek"),hn(t,gt.Hebrew,"segoeui-hebrew"),hn(t,gt.Vietnamese,"segoeui-vietnamese"),hn(t,gt.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),hn(t,vt.Selawik,"selawik","selawik"),hn(t,gt.Armenian,"segoeui-armenian"),hn(t,gt.Georgian,"segoeui-georgian"),fn("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",bt.light),fn("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",bt.semibold)}}(function(){var e,t,n=null===(e=Ot())||void 0===e?void 0:e.FabricConfig;return null!==(t=null==n?void 0:n.fontBaseUrl)&&void 0!==t?t:"https://static2.sharepointonline.com/files/fabric/assets"}());var bn={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"};function _n(e,t){void 0===e&&(e={}),void 0===t&&(t=!1);var n=!!e.isInverted;return function(e,t){var n,o,r;void 0===t&&(t={});var i=mn({},e,t,{semanticColors:yn(t.palette,t.effects,t.semanticColors,void 0===t.isInverted?e.isInverted:t.isInverted)});if((null===(n=t.palette)||void 0===n?void 0:n.themePrimary)&&!(null===(o=t.palette)||void 0===o?void 0:o.accent)&&(i.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,s=Object.keys(i.fonts);a<s.length;a++){var l=s[a];i.fonts[l]=mn(i.fonts[l],t.defaultFontStyle,null===(r=null==t?void 0:t.fonts)||void 0===r?void 0:r[l])}return i}({palette:on,effects:rn,fonts:pn,spacing:bn,isInverted:n,disableGlobalClassNames:!1,semanticColors:vn(on,rn,void 0,n,t),rtl:void 0},e)}var Cn=_n({}),kn=[];function Sn(){var e,t,n,o=Ot();(null===(t=null==o?void 0:o.FabricConfig)||void 0===t?void 0:t.legacyTheme)?function(e,t){var n;void 0===t&&(t=!1),Cn=_n(e,t),Jt(Bt(Bt(Bt(Bt({},Cn.palette),Cn.semanticColors),Cn.effects),function(e){for(var t={},n=0,o=Object.keys(e.fonts);n<o.length;n++)for(var r=o[n],i=e.fonts[r],a=0,s=Object.keys(i);a<s.length;a++){var l=s[a],u=r+l.charAt(0).toUpperCase()+l.slice(1),c=i[l];"fontSize"===l&&"number"==typeof c&&(c+="px"),t[u]=c}return t}(Cn))),Zt.applySettings(((n={}).theme=Cn,n)),kn.forEach((function(e){try{e(Cn)}catch(e){}}))}(o.FabricConfig.legacyTheme):Zt.getSettings(["theme"]).theme||((null===(n=null==o?void 0:o.FabricConfig)||void 0===n?void 0:n.theme)&&(Cn=_n(o.FabricConfig.theme)),Zt.applySettings(((e={}).theme=Cn,e)))}function wn(e){console&&console.warn&&console.warn(e)}Sn();var xn=Wt.getValue("icons",{__options:{disableWarnings:!1,warnOnMissingIcons:!0},__remapped:{}}),En=Z.getInstance();En&&En.onReset&&En.onReset((function(){for(var e in xn)xn.hasOwnProperty(e)&&xn[e].subset&&(xn[e].subset.className=void 0)}));var In=function(e){return e.toLowerCase()};function Dn(e,t){var n=Bt(Bt({},e),{isRegistered:!1,className:void 0}),o=e.icons;for(var r in t=t?Bt(Bt({},xn.__options),t):xn.__options,o)if(o.hasOwnProperty(r)){var i=o[r],a=In(r);xn[a]?Mn(r):xn[a]={code:i,subset:n}}}function Rn(e,t){xn.__remapped[In(e)]=In(t)}var Tn=[],Pn=void 0;function Mn(e){xn.__options.disableWarnings||(Tn.push(e),void 0===Pn&&(Pn=setTimeout((function(){wn("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n"+Tn.slice(0,10).join(", ")+(Tn.length>10?" (+ "+(Tn.length-10)+" more)":"")),Pn=void 0,Tn=[]}),2e3)))}function Fn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e&&1===e.length&&e[0]&&!e[0].subComponentStyles)return e[0];for(var n={},o={},r=0,i=e;r<i.length;r++){var a=i[r];if(a)for(var s in a)if(a.hasOwnProperty(s)){if("subComponentStyles"===s&&void 0!==a.subComponentStyles){var l=a.subComponentStyles;for(var u in l)l.hasOwnProperty(u)&&(o.hasOwnProperty(u)?o[u].push(l[u]):o[u]=[l[u]]);continue}var c=n[s],d=a[s];n[s]=void 0===c?d:V(V([],Array.isArray(c)?c:[c]),Array.isArray(d)?d:[d])}}if(Object.keys(o).length>0){n.subComponentStyles={};var p=n.subComponentStyles,f=function(e){if(o.hasOwnProperty(e)){var t=o[e];p[e]=function(e){return Fn.apply(void 0,t.map((function(t){return"function"==typeof t?t(e):t})))}}};for(var u in o)f(u)}return n}function Ln(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=[],r=0,i=t;r<i.length;r++){var a=i[r];a&&o.push("function"==typeof a?a(e):a)}return 1===o.length?o[0]:o.length?Fn.apply(void 0,o):{}}function An(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Nn(e,X())}function Nn(e,t){var n={subComponentStyles:{}};if(!e[0]&&e.length<=1)return{subComponentStyles:{}};var o=Fn.apply(void 0,e),r=[];for(var i in o)if(o.hasOwnProperty(i)){if("subComponentStyles"===i){n.subComponentStyles=o.subComponentStyles||{};continue}var a=Q(o[i]),s=a.classes,l=a.objects;(null==l?void 0:l.length)?(d=_e(t||{},{displayName:i},l))&&(r.push(d),n[i]=s.concat([d.className]).join(" ")):n[i]=s.join(" ")}for(var u=0,c=r;u<c.length;u++){var d;(d=c[u])&&Ce(d,null==t?void 0:t.specificityMultiplier)}return n}var Bn={},Hn=void 0;try{Hn=window}catch(e){}function On(e,t){if(void 0!==Hn){var n=Hn.__packages__=Hn.__packages__||{};n[e]&&Bn[e]||(Bn[e]=t,(n[e]=n[e]||[]).push(t))}}On("@fluentui/set-version","6.0.0"),On("@fluentui/style-utilities","8.5.2"),Sn();var zn=An({root:{display:"inline-block"},placeholder:["ms-Icon-placeHolder",{width:"1em"}],image:["ms-Icon-imageContainer",{overflow:"hidden"}]}),Wn="ms-Icon",Un=!1,Vn=0,Gn={empty:!0},jn={},Kn="undefined"==typeof WeakMap?null:WeakMap;function qn(){Vn++}function Zn(e,t,n){if(void 0===t&&(t=100),void 0===n&&(n=!1),!Kn)return e;if(!Un){var o=Z.getInstance();o&&o.onReset&&Z.getInstance().onReset(qn),Un=!0}var r,i=0,a=Vn;return function(){for(var o=[],s=0;s<arguments.length;s++)o[s]=arguments[s];var l=r;(void 0===r||a!==Vn||t>0&&i>t)&&(r=$n(),i=0,a=Vn),l=r;for(var u=0;u<o.length;u++){var c=Yn(o[u]);l.map.has(c)||l.map.set(c,$n()),l=l.map.get(c)}return l.hasOwnProperty("value")||(l.value=e.apply(void 0,o),i++),!n||null!==l.value&&void 0!==l.value||(l.value=e.apply(void 0,o)),l.value}}function Qn(e){if(!Kn)return e;var t=new Kn;return function(n){if(!n||"function"!=typeof n&&"object"!=typeof n)return e(n);if(t.has(n))return t.get(n);var o=e(n);return t.set(n,o),o}}function Yn(e){return e?"object"==typeof e||"function"==typeof e?e:(jn[e]||(jn[e]={val:e}),jn[e]):Gn}function $n(){return{map:Kn?new Kn:null}}var Xn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n={},o=0,r=e;o<r.length;o++)for(var i=r[o],a=Array.isArray(i)?i:Object.keys(i),s=0,l=a;s<l.length;s++){var u=l[s];n[u]=1}return n},Jn=Xn(["onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onInput","onSubmit","onLoad","onError","onKeyDown","onKeyDownCapture","onKeyPress","onKeyUp","onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting","onClick","onClickCapture","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onMouseUpCapture","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","onScroll","onWheel","onPointerCancel","onPointerDown","onPointerEnter","onPointerLeave","onPointerMove","onPointerOut","onPointerOver","onPointerUp","onGotPointerCapture","onLostPointerCapture"]),eo=Xn(["accessKey","children","className","contentEditable","dir","draggable","hidden","htmlFor","id","lang","ref","role","style","tabIndex","title","translate","spellCheck","name"]),to=Xn(eo,Jn),no=Xn(to,["form"]),oo=Xn(to,["height","loop","muted","preload","src","width"]),ro=Xn(oo,["poster"]),io=Xn(to,["start"]),ao=Xn(to,["value"]),so=Xn(to,["download","href","hrefLang","media","rel","target","type"]),lo=Xn(to,["autoFocus","disabled","form","formAction","formEncType","formMethod","formNoValidate","formTarget","type","value"]),uo=Xn(lo,["accept","alt","autoCapitalize","autoComplete","checked","dirname","form","height","inputMode","list","max","maxLength","min","minLength","multiple","pattern","placeholder","readOnly","required","src","step","size","type","value","width"]),co=Xn(lo,["autoCapitalize","cols","dirname","form","maxLength","minLength","placeholder","readOnly","required","rows","wrap"]),po=Xn(lo,["form","multiple","required"]),fo=Xn(to,["selected","value"]),ho=Xn(to,["cellPadding","cellSpacing"]),mo=to,go=Xn(to,["rowSpan","scope"]),vo=Xn(to,["colSpan","headers","rowSpan","scope"]),yo=Xn(to,["span"]),bo=Xn(to,["span"]),_o=Xn(to,["acceptCharset","action","encType","encType","method","noValidate","target"]),Co=Xn(to,["allow","allowFullScreen","allowPaymentRequest","allowTransparency","csp","height","importance","referrerPolicy","sandbox","src","srcDoc","width"]),ko=Xn(to,["alt","crossOrigin","height","src","srcSet","useMap","width"]),So=to;function wo(e,t,n){for(var o=Array.isArray(t),r={},i=0,a=Object.keys(e);i<a.length;i++){var s=a[i];!(!o&&t[s]||o&&t.indexOf(s)>=0||0===s.indexOf("data-")||0===s.indexOf("aria-"))||n&&-1!==(null==n?void 0:n.indexOf(s))||(r[s]=e[s])}return r}function xo(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],o=0,r=e;o<r.length;o++){var i=r[o];if(i)if("string"==typeof i)n.push(i);else if(i.hasOwnProperty("toString")&&"function"==typeof i.toString)n.push(i.toString());else for(var a in i)i[a]&&n.push(a)}return n.join(" ")}var Eo=Zn((function(e){var t=function(e){var t=void 0,n=xn.__options;if(e=e?In(e):"",e=xn.__remapped[e]||e)if(t=xn[e]){var o=t.subset;o&&o.fontFace&&(o.isRegistered||(an(o.fontFace),o.isRegistered=!0),o.className||(o.className=ke(o.style,{fontFamily:o.fontFace.fontFamily,fontWeight:o.fontFace.fontWeight||"normal",fontStyle:o.fontFace.fontStyle||"normal"})))}else!n.disableWarnings&&n.warnOnMissingIcons&&wn('The icon "'+e+'" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.');return t}(e)||{subset:{},code:void 0},n=t.code,o=t.subset;return n?{children:n,iconClassName:o.className,fontFamily:o.fontFace&&o.fontFace.fontFamily,mergeImageProps:o.mergeImageProps}:null}),void 0,!0),Io=function(t){var n=t.iconName,o=t.className,r=t.style,i=void 0===r?{}:r,a=Eo(n)||{},s=a.iconClassName,l=a.children,u=a.fontFamily,c=a.mergeImageProps,d=wo(t,to),p=t["aria-label"]||t.title,f=t["aria-label"]||t["aria-labelledby"]||t.title?{role:c?void 0:"img"}:{"aria-hidden":!0},h=l;return c&&"object"==typeof l&&"object"==typeof l.props&&p&&(h=e.cloneElement(l,{alt:p})),e.createElement("i",H({"data-icon-name":n},f,d,c?{title:void 0,"aria-label":void 0}:{},{className:xo(Wn,zn.root,s,!n&&zn.placeholder,o),style:H({fontFamily:u},i)}),h)},Do=(Zn((function(e,t,n){return Io({iconName:e,className:t,"aria-label":n})})),9),Ro=13,To=27,Po=32,Mo=37,Fo=38,Lo=39,Ao=40;function No(e){if("undefined"!=typeof document){var t=e;return t&&t.ownerDocument?t.ownerDocument:document}}var Bo=void 0;try{Bo=window}catch(e){}function Ho(e){if(void 0!==Bo){var t=e;return t&&t.ownerDocument&&t.ownerDocument.defaultView?t.ownerDocument.defaultView:Bo}}function Oo(e){var t=null;try{var n=Ho();t=n?n.sessionStorage.getItem(e):null}catch(e){}return t}var zo,Wo="isRTL";function Uo(e){if(void 0===e&&(e={}),void 0!==e.rtl)return e.rtl;if(void 0===zo){var t=Oo(Wo);null!==t&&function(e,t){void 0===t&&(t=!1);var n=No();n&&n.documentElement.setAttribute("dir",e?"rtl":"ltr"),t&&function(e,t){var n;try{null===(n=Ho())||void 0===n||n.sessionStorage.setItem("isRTL",t)}catch(e){}}(0,e?"1":"0"),Y(zo=e)}(zo="1"===t);var n=No();void 0===zo&&n&&Y(zo="rtl"===(n.body&&n.body.getAttribute("dir")||n.documentElement.getAttribute("dir")))}return!!zo}function Vo(e,t){return void 0===t&&(t={}),Uo(t)&&(e===Mo?e=Lo:e===Lo&&(e=Mo)),e}var Go=H;function jo(n,o){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var a=n;return a.isSlot?0===(r=e.Children.toArray(r)).length?a(o):a(H(H({},o),{children:r})):e.createElement.apply(t,W([n,o],r))}function Ko(t,n){void 0===n&&(n={});var o=n.defaultProp,r=void 0===o?"children":o;return function(n,o,i,a,s){if(e.isValidElement(o))return o;var l=function(e,t){var n,o;return"string"==typeof t||"number"==typeof t||"boolean"==typeof t?((n={})[e]=t,o=n):o=t,o}(r,o),u=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];for(var r={},i=[],a=0,s=n;a<s.length;a++){var l=s[a];i.push(l&&l.className),Go(r,l)}return r.className=Se([e,i],{rtl:Uo(t)}),r}(a,s,n,l);if(i){if(i.component){var c=i.component;return e.createElement(c,H({},u))}if(i.render)return i.render(u,t)}return e.createElement(t,H({},u))}}var qo=Zn((function(e){return Ko(e)}));function Zo(e,t){var n={},o=e,r=function(e){if(t.hasOwnProperty(e)){var r=function(n){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];if(r.length>0)throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");return Qo(t[e],n,o[e],o.slots&&o.slots[e],o._defaultStyles&&o._defaultStyles[e],o.theme)};r.isSlot=!0,n[e]=r}};for(var i in t)r(i);return n}function Qo(e,t,n,o,r,i){return void 0!==e.create?e.create(t,n,o,r):qo(e)(t,n,o,r,i)}var Yo=e.createContext({customizations:{inCustomizerContext:!1,settings:{},scopedSettings:{}}}),$o=0,Xo=function(){function e(){}return e.getValue=function(e,t){var n=Jo();return void 0===n[e]&&(n[e]="function"==typeof t?t():t),n[e]},e.setValue=function(e,t){var n=Jo(),o=n.__callbacks__,r=n[e];if(t!==r){n[e]=t;var i={oldValue:r,value:t,key:e};for(var a in o)o.hasOwnProperty(a)&&o[a](i)}return t},e.addChangeListener=function(e){var t=e.__id__,n=er();t||(t=e.__id__=String($o++)),n[t]=e},e.removeChangeListener=function(e){delete er()[e.__id__]},e}();function Jo(){var e,t=Ho()||{};return t.__globalSettings__||(t.__globalSettings__=((e={}).__callbacks__={},e)),t.__globalSettings__}function er(){return Jo().__callbacks__}var tr={settings:{},scopedSettings:{},inCustomizerContext:!1},nr=Xo.getValue("customizations",{settings:{},scopedSettings:{},inCustomizerContext:!1}),or=[],rr=function(){function e(){}return e.reset=function(){nr.settings={},nr.scopedSettings={}},e.applySettings=function(t){nr.settings=H(H({},nr.settings),t),e._raiseChange()},e.applyScopedSettings=function(t,n){nr.scopedSettings[t]=H(H({},nr.scopedSettings[t]),n),e._raiseChange()},e.getSettings=function(e,t,n){void 0===n&&(n=tr);for(var o={},r=t&&n.scopedSettings[t]||{},i=t&&nr.scopedSettings[t]||{},a=0,s=e;a<s.length;a++){var l=s[a];o[l]=r[l]||n.settings[l]||i[l]||nr.settings[l]}return o},e.applyBatchedUpdates=function(t,n){e._suppressUpdates=!0;try{t()}catch(e){}e._suppressUpdates=!1,n||e._raiseChange()},e.observe=function(e){or.push(e)},e.unobserve=function(e){or=or.filter((function(t){return t!==e}))},e._raiseChange=function(){e._suppressUpdates||or.forEach((function(e){return e()}))},e}();function ir(t,n){void 0===n&&(n={});var o=n.factoryOptions,r=(void 0===o?{}:o).defaultProp,i=function(o){var r,i,a,s=(r=n.displayName,i=e.useContext(Yo),a=n.fields,rr.getSettings(a||["theme","styles","tokens"],r,i.customizations)),l=n.state;l&&(o=H(H({},o),l(o)));var u=o.theme||s.theme,c=ar(o,u,n.tokens,s.tokens,o.tokens),d=function(e,t,n){for(var o=[],r=3;r<arguments.length;r++)o[r-3]=arguments[r];return Fn.apply(void 0,o.map((function(o){return"function"==typeof o?o(e,t,n):o})))}(o,u,c,n.styles,s.styles,o.styles),p=H(H({},o),{styles:d,tokens:c,_defaultStyles:d,theme:u});return t(p)};return i.displayName=n.displayName||t.name,r&&(i.create=Ko(i,{defaultProp:r})),Go(i,n.statics),i}function ar(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];for(var r={},i=0,a=n;i<a.length;i++){var s=a[i];s&&(s="function"==typeof s?s(e,t):s,Array.isArray(s)&&(s=ar.apply(void 0,W([e,t],s))),Go(r,s))}return r}var sr=function(e,t){return t.spacing.hasOwnProperty(e)?t.spacing[e]:e},lr=function(e){var t=parseFloat(e),n=isNaN(t)?0:t,o=isNaN(t)?"":t.toString();return{value:n,unit:e.substring(o.toString().length)||"px"}},ur=function(e,t){if(void 0===e||"number"==typeof e||""===e)return e;var n=e.split(" ");return n.length<2?sr(e,t):n.reduce((function(e,n){return sr(e,t)+" "+sr(n,t)}))},cr={start:"flex-start",end:"flex-end"},dr={root:"ms-Stack",inner:"ms-Stack-inner"},pr={root:"ms-StackItem"},fr={start:"flex-start",end:"flex-end"},hr=ir((function(e){var t=e.children,n=wo(e,to);return null==t?null:jo(Zo(e,{root:"div"}).root,H({},n),t)}),{displayName:"StackItem",styles:function(e,t,n){var o=e.grow,r=e.shrink,i=e.disableShrink,a=e.align,s=e.verticalFill,l=e.order,u=e.className,c=Nt(pr,t);return{root:[t.fonts.medium,c.root,{margin:n.margin,padding:n.padding,height:s?"100%":"auto",width:"auto"},o&&{flexGrow:!0===o?1:o},(i||!o&&!r)&&{flexShrink:0},r&&!i&&{flexShrink:1},a&&{alignSelf:fr[a]||a},l&&{order:l},u]}}}),mr=ir((function(t){var n=t.as,o=void 0===n?"div":n,r=t.disableShrink,i=t.wrap,a=O(t,["as","disableShrink","wrap"]),s=e.Children.toArray(t.children);1===s.length&&e.isValidElement(s[0])&&s[0].type===e.Fragment&&(s=s[0].props.children),s=e.Children.map(s,(function(t,n){if(!t)return null;if((i=t)&&"object"==typeof i&&i.type&&i.type.displayName===hr.displayName){var o={shrink:!r};return e.cloneElement(t,H(H({},o),t.props))}var i;return t}));var l=wo(a,to),u=Zo(t,{root:o,inner:"div"});return jo(u.root,H({},l),i?jo(u.inner,null,s):s)}),{displayName:"Stack",styles:function(e,t,n){var o,r,i,a,s,l,u,c=e.verticalFill,d=e.horizontal,p=e.reversed,f=e.grow,h=e.wrap,m=e.horizontalAlign,g=e.verticalAlign,v=e.disableShrink,y=e.className,b=Nt(dr,t),_=n&&n.childrenGap?n.childrenGap:e.gap,C=n&&n.maxHeight?n.maxHeight:e.maxHeight,k=n&&n.maxWidth?n.maxWidth:e.maxWidth,S=n&&n.padding?n.padding:e.padding,w=function(e,t){if(void 0===e||""===e)return{rowGap:{value:0,unit:"px"},columnGap:{value:0,unit:"px"}};if("number"==typeof e)return{rowGap:{value:e,unit:"px"},columnGap:{value:e,unit:"px"}};var n=e.split(" ");if(n.length>2)return{rowGap:{value:0,unit:"px"},columnGap:{value:0,unit:"px"}};if(2===n.length)return{rowGap:lr(sr(n[0],t)),columnGap:lr(sr(n[1],t))};var o=lr(sr(e,t));return{rowGap:o,columnGap:o}}(_,t),x=w.rowGap,E=w.columnGap,I=""+-.5*E.value+E.unit,D=""+-.5*x.value+x.unit,R={textOverflow:"ellipsis"},T={"> *:not(.ms-StackItem)":{flexShrink:v?0:1}};return h?{root:[b.root,{flexWrap:"wrap",maxWidth:k,maxHeight:C,width:"auto",overflow:"visible",height:"100%"},m&&(o={},o[d?"justifyContent":"alignItems"]=cr[m]||m,o),g&&(r={},r[d?"alignItems":"justifyContent"]=cr[g]||g,r),y,{display:"flex"},d&&{height:c?"100%":"auto"}],inner:[b.inner,{display:"flex",flexWrap:"wrap",marginLeft:I,marginRight:I,marginTop:D,marginBottom:D,overflow:"visible",boxSizing:"border-box",padding:ur(S,t),width:0===E.value?"100%":"calc(100% + "+E.value+E.unit+")",maxWidth:"100vw",selectors:H({"> *":H({margin:""+.5*x.value+x.unit+" "+.5*E.value+E.unit},R)},T)},m&&(i={},i[d?"justifyContent":"alignItems"]=cr[m]||m,i),g&&(a={},a[d?"alignItems":"justifyContent"]=cr[g]||g,a),d&&{flexDirection:p?"row-reverse":"row",height:0===x.value?"100%":"calc(100% + "+x.value+x.unit+")",selectors:{"> *":{maxWidth:0===E.value?"100%":"calc(100% - "+E.value+E.unit+")"}}},!d&&{flexDirection:p?"column-reverse":"column",height:"calc(100% + "+x.value+x.unit+")",selectors:{"> *":{maxHeight:0===x.value?"100%":"calc(100% - "+x.value+x.unit+")"}}}]}:{root:[b.root,{display:"flex",flexDirection:d?p?"row-reverse":"row":p?"column-reverse":"column",flexWrap:"nowrap",width:"auto",height:c?"100%":"auto",maxWidth:k,maxHeight:C,padding:ur(S,t),boxSizing:"border-box",selectors:H((s={"> *":R},s[p?"> *:not(:last-child)":"> *:not(:first-child)"]=[d&&{marginLeft:""+E.value+E.unit},!d&&{marginTop:""+x.value+x.unit}],s),T)},f&&{flexGrow:!0===f?1:f},m&&(l={},l[d?"justifyContent":"alignItems"]=cr[m]||m,l),g&&(u={},u[d?"alignItems":"justifyContent"]=cr[g]||g,u),y]}},statics:{Item:hr}});var gr=["theme","styles"];function vr(t,n,o,r,i){var a=(r=r||{scope:"",fields:void 0}).scope,s=r.fields,l=void 0===s?gr:s,u=e.forwardRef((function(r,i){var s,u,c,d,p,f,h=e.useRef(),m=(s=l,u=a,c=e.useState(0)[1],d=function(){return c((function(e){return++e}))},p=e.useContext(Yo).customizations,f=p.inCustomizerContext,e.useEffect((function(){return f||rr.observe(d),function(){f||rr.unobserve(d)}}),[f]),rr.getSettings(s,u,p)),g=m.styles,v=(m.dir,O(m,["styles","dir"])),y=o?o(r):void 0,b=h.current&&h.current.__cachedInputs__||[];if(!h.current||g!==b[1]||r.styles!==b[2]){var _=function(e){return Ln(e,n,g,r.styles)};_.__cachedInputs__=[n,g,r.styles],_.__noStyleOverride__=!g&&!r.styles,h.current=_}return e.createElement(t,H({ref:i},v,y,r,{styles:h.current}))}));u.displayName="Styled"+(t.displayName||t.name);var c=i?e.memo(u):u;return u.displayName&&(c.displayName=u.displayName),c}var yr=0,br=Z.getInstance();br&&br.onReset&&br.onReset((function(){return yr++}));var _r,Cr="__retval__";function kr(e){void 0===e&&(e={});var t=new Map,n=0,o=0,r=yr;return function(i,a){var s;if(void 0===a&&(a={}),e.useStaticStyles&&"function"==typeof i&&i.__noStyleOverride__)return i(a);o++;var l=t,u=a.theme,c=u&&void 0!==u.rtl?u.rtl:Uo(),d=e.disableCaching;if(r!==yr&&(r=yr,t=new Map,n=0),e.disableCaching||(l=wr(t,i),l=wr(l,a)),!d&&l[Cr]||(l[Cr]=void 0===i?{}:Nn(["function"==typeof i?i(a):i],{rtl:!!c,specificityMultiplier:e.useStaticStyles?5:void 0}),d||n++),n>(e.cacheSize||50)){var p=Ho();(null===(s=null==p?void 0:p.FabricConfig)||void 0===s?void 0:s.enableClassNameCacheFullWarning)&&(console.warn("Styles are being recalculated too frequently. Cache miss rate is "+n+"/"+o+"."),console.trace()),t.clear(),n=0,e.disableCaching=!0}return l[Cr]}}function Sr(e,t){return t=function(e){switch(e){case void 0:return"__undefined__";case null:return"__null__";default:return e}}(t),e.has(t)||e.set(t,new Map),e.get(t)}function wr(e,t){if("function"==typeof t)if(t.__cachedInputs__)for(var n=0,o=t.__cachedInputs__;n<o.length;n++)e=Sr(e,o[n]);else e=Sr(e,t);else if("object"==typeof t)for(var r in t)t.hasOwnProperty(r)&&(e=Sr(e,t[r]));return e}var xr=((_r={})[38]=1,_r[40]=1,_r[37]=1,_r[39]=1,_r[36]=1,_r[35]=1,_r[Do]=1,_r[33]=1,_r[34]=1,_r),Er="ms-Fabric--isFocusVisible",Ir="ms-Fabric--isFocusHidden";function Dr(e,t){var n=t?Ho(t):Ho();if(n){var o=n.document.body.classList;o.add(e?Er:Ir),o.remove(e?Ir:Er)}}var Rr=new WeakMap;function Tr(e,t){var n,o=Rr.get(e);return n=o?o+t:1,Rr.set(e,n),n}function Pr(t){e.useEffect((function(){var e,n=Ho(null==t?void 0:t.current);if(n&&!0!==(null===(e=n.FabricConfig)||void 0===e?void 0:e.disableFocusRects)){var o=Tr(n,1);return o<=1&&(n.addEventListener("mousedown",Fr,!0),n.addEventListener("pointerdown",Lr,!0),n.addEventListener("keydown",Ar,!0)),function(){var e;n&&!0!==(null===(e=n.FabricConfig)||void 0===e?void 0:e.disableFocusRects)&&0===(o=Tr(n,-1))&&(n.removeEventListener("mousedown",Fr,!0),n.removeEventListener("pointerdown",Lr,!0),n.removeEventListener("keydown",Ar,!0))}}}),[t])}var Mr=function(e){return Pr(e.rootRef),null};function Fr(e){Dr(!1,e.target)}function Lr(e){"mouse"!==e.pointerType&&Dr(!1,e.target)}function Ar(e){var t;t=e.which,xr[t]&&Dr(!0,e.target)}function Nr(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.length<2?t[0]:function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];t.forEach((function(t){return t&&t.apply(e,n)}))}}function Br(e){!function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=Nr(e,e[n],t[n]))}(e,{componentDidMount:Hr,componentDidUpdate:Or,componentWillUnmount:zr})}function Hr(){Wr(this.props.componentRef,this)}function Or(e){e.componentRef!==this.props.componentRef&&(Wr(e.componentRef,null),Wr(this.props.componentRef,this))}function zr(){Wr(this.props.componentRef,null)}function Wr(e,t){e&&("object"==typeof e?e.current=t:"function"==typeof e&&e(t))}var Ur,Vr,Gr,jr,Kr,qr=function(){function e(e,t){this._timeoutIds=null,this._immediateIds=null,this._intervalIds=null,this._animationFrameIds=null,this._isDisposed=!1,this._parent=e||null,this._onErrorHandler=t,this._noop=function(){}}return e.prototype.dispose=function(){var e;if(this._isDisposed=!0,this._parent=null,this._timeoutIds){for(e in this._timeoutIds)this._timeoutIds.hasOwnProperty(e)&&this.clearTimeout(parseInt(e,10));this._timeoutIds=null}if(this._immediateIds){for(e in this._immediateIds)this._immediateIds.hasOwnProperty(e)&&this.clearImmediate(parseInt(e,10));this._immediateIds=null}if(this._intervalIds){for(e in this._intervalIds)this._intervalIds.hasOwnProperty(e)&&this.clearInterval(parseInt(e,10));this._intervalIds=null}if(this._animationFrameIds){for(e in this._animationFrameIds)this._animationFrameIds.hasOwnProperty(e)&&this.cancelAnimationFrame(parseInt(e,10));this._animationFrameIds=null}},e.prototype.setTimeout=function(e,t){var n=this,o=0;return this._isDisposed||(this._timeoutIds||(this._timeoutIds={}),o=setTimeout((function(){try{n._timeoutIds&&delete n._timeoutIds[o],e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._timeoutIds[o]=!0),o},e.prototype.clearTimeout=function(e){this._timeoutIds&&this._timeoutIds[e]&&(clearTimeout(e),delete this._timeoutIds[e])},e.prototype.setImmediate=function(e,t){var n=this,o=0,r=Ho(t);return this._isDisposed||(this._immediateIds||(this._immediateIds={}),o=r.setTimeout((function(){try{n._immediateIds&&delete n._immediateIds[o],e.apply(n._parent)}catch(e){n._logError(e)}}),0),this._immediateIds[o]=!0),o},e.prototype.clearImmediate=function(e,t){var n=Ho(t);this._immediateIds&&this._immediateIds[e]&&(n.clearTimeout(e),delete this._immediateIds[e])},e.prototype.setInterval=function(e,t){var n=this,o=0;return this._isDisposed||(this._intervalIds||(this._intervalIds={}),o=setInterval((function(){try{e.apply(n._parent)}catch(e){n._logError(e)}}),t),this._intervalIds[o]=!0),o},e.prototype.clearInterval=function(e){this._intervalIds&&this._intervalIds[e]&&(clearInterval(e),delete this._intervalIds[e])},e.prototype.throttle=function(e,t,n){var o=this;if(this._isDisposed)return this._noop;var r,i,a=t||0,s=!0,l=!0,u=0,c=null;n&&"boolean"==typeof n.leading&&(s=n.leading),n&&"boolean"==typeof n.trailing&&(l=n.trailing);var d=function(t){var n=Date.now(),p=n-u,f=s?a-p:a;return p>=a&&(!t||s)?(u=n,c&&(o.clearTimeout(c),c=null),r=e.apply(o._parent,i)):null===c&&l&&(c=o.setTimeout(d,f)),r};return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i=e,d(!0)}},e.prototype.debounce=function(e,t,n){var o=this;if(this._isDisposed){var r=function(){};return r.cancel=function(){},r.flush=function(){return null},r.pending=function(){return!1},r}var i,a,s=t||0,l=!1,u=!0,c=null,d=0,p=Date.now(),f=null;n&&"boolean"==typeof n.leading&&(l=n.leading),n&&"boolean"==typeof n.trailing&&(u=n.trailing),n&&"number"==typeof n.maxWait&&!isNaN(n.maxWait)&&(c=n.maxWait);var h=function(e){f&&(o.clearTimeout(f),f=null),p=e},m=function(t){h(t),i=e.apply(o._parent,a)},g=function(e){var t=Date.now(),n=!1;e&&(l&&t-d>=s&&(n=!0),d=t);var r=t-d,a=s-r,h=t-p,v=!1;return null!==c&&(h>=c&&f?v=!0:a=Math.min(a,c-h)),r>=s||v||n?m(t):null!==f&&e||!u||(f=o.setTimeout(g,a)),i},v=function(){return!!f},y=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a=e,g(!0)};return y.cancel=function(){v()&&h(Date.now())},y.flush=function(){return v()&&m(Date.now()),i},y.pending=v,y},e.prototype.requestAnimationFrame=function(e,t){var n=this,o=0,r=Ho(t);if(!this._isDisposed){this._animationFrameIds||(this._animationFrameIds={});var i=function(){try{n._animationFrameIds&&delete n._animationFrameIds[o],e.apply(n._parent)}catch(e){n._logError(e)}};o=r.requestAnimationFrame?r.requestAnimationFrame(i):r.setTimeout(i,0),this._animationFrameIds[o]=!0}return o},e.prototype.cancelAnimationFrame=function(e,t){var n=Ho(t);this._animationFrameIds&&this._animationFrameIds[e]&&(n.cancelAnimationFrame?n.cancelAnimationFrame(e):n.clearTimeout(e),delete this._animationFrameIds[e])},e.prototype._logError=function(e){this._onErrorHandler&&this._onErrorHandler(e)},e}();function Zr(e,t){return void 0===t&&(t=!0),e&&(t&&function(e){var t,n;return e&&(n=e)&&n._virtual&&(t=e._virtual.parent),t}(e)||e.parentNode&&e.parentNode)}function Qr(e,t,n){void 0===n&&(n=!0);var o=!1;if(e&&t)if(n)if(e===t)o=!0;else for(o=!1;t;){var r=Zr(t);if(r===e){o=!0;break}t=r}else e.contains&&(o=e.contains(t));return o}function Yr(e,t){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(var n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}function $r(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return Xr.apply(this,[null,e].concat(t))}function Xr(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];t=t||{};for(var r=0,i=n;r<i.length;r++){var a=i[r];if(a)for(var s in a)!a.hasOwnProperty(s)||e&&!e(s)||(t[s]=a[s])}return t}!function(e){e[e.disabled=0]="disabled",e[e.clickable=1]="clickable",e[e.hasDropdown=2]="hasDropdown"}(Ur||(Ur={})),function(e){e[e.unconstrained=0]="unconstrained",e[e.horizontalConstrained=1]="horizontalConstrained"}(Vr||(Vr={})),function(e){e[e.outside=0]="outside",e[e.surface=1]="surface",e[e.header=2]="header"}(Gr||(Gr={})),function(e){e[e.fixedColumns=0]="fixedColumns",e[e.justified=1]="justified"}(jr||(jr={})),function(e){e[e.onHover=0]="onHover",e[e.always=1]="always",e[e.hidden=2]="hidden"}(Kr||(Kr={}));var Jr=function(){function e(t){this._id=e._uniqueId++,this._parent=t,this._eventRecords=[]}return e.raise=function(t,n,o,r){var i;if(e._isElement(t)){if("undefined"!=typeof document&&document.createEvent){var a=document.createEvent("HTMLEvents");a.initEvent(n,r||!1,!0),$r(a,o),i=t.dispatchEvent(a)}else if("undefined"!=typeof document&&document.createEventObject){var s=document.createEventObject(o);t.fireEvent("on"+n,s)}}else for(;t&&!1!==i;){var l=t.__events__,u=l?l[n]:null;if(u)for(var c in u)if(u.hasOwnProperty(c))for(var d=u[c],p=0;!1!==i&&p<d.length;p++){var f=d[p];f.objectCallback&&(i=f.objectCallback.call(f.parent,o))}t=r?t.parent:null}return i},e.isObserved=function(e,t){var n=e&&e.__events__;return!!n&&!!n[t]},e.isDeclared=function(e,t){var n=e&&e.__declaredEvents;return!!n&&!!n[t]},e.stopPropagation=function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0},e._isElement=function(e){return!!e&&(!!e.addEventListener||"undefined"!=typeof HTMLElement&&e instanceof HTMLElement)},e.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this.off(),this._parent=null)},e.prototype.onAll=function(e,t,n){for(var o in t)t.hasOwnProperty(o)&&this.on(e,o,t[o],n)},e.prototype.on=function(t,n,o,r){var i=this;if(n.indexOf(",")>-1)for(var a=n.split(/[ ,]+/),s=0;s<a.length;s++)this.on(t,a[s],o,r);else{var l=this._parent,u={target:t,eventName:n,parent:l,callback:o,options:r};if((a=t.__events__=t.__events__||{})[n]=a[n]||{count:0},a[n][this._id]=a[n][this._id]||[],a[n][this._id].push(u),a[n].count++,e._isElement(t)){var c=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed){var n;try{if(!1===(n=o.apply(l,e))&&e[0]){var r=e[0];r.preventDefault&&r.preventDefault(),r.stopPropagation&&r.stopPropagation(),r.cancelBubble=!0}}catch(r){}return n}};u.elementCallback=c,t.addEventListener?t.addEventListener(n,c,r):t.attachEvent&&t.attachEvent("on"+n,c)}else u.objectCallback=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!i._isDisposed)return o.apply(l,e)};this._eventRecords.push(u)}},e.prototype.off=function(e,t,n,o){for(var r=0;r<this._eventRecords.length;r++){var i=this._eventRecords[r];if(!(e&&e!==i.target||t&&t!==i.eventName||n&&n!==i.callback||"boolean"==typeof o&&o!==i.options)){var a=i.target.__events__,s=a[i.eventName],l=s?s[this._id]:null;l&&(1!==l.length&&n?(s.count--,l.splice(l.indexOf(i),1)):(s.count-=l.length,delete a[i.eventName][this._id]),s.count||delete a[i.eventName]),i.elementCallback&&(i.target.removeEventListener?i.target.removeEventListener(i.eventName,i.elementCallback,i.options):i.target.detachEvent&&i.target.detachEvent("on"+i.eventName,i.elementCallback)),this._eventRecords.splice(r--,1)}}},e.prototype.raise=function(t,n,o){return e.raise(this._parent,t,n,o)},e.prototype.declare=function(e){var t=this._parent.__declaredEvents=this._parent.__declaredEvents||{};if("string"==typeof e)t[e]=!0;else for(var n=0;n<e.length;n++)t[e[n]]=!0},e._uniqueId=0,e}(),ei=Ho()||{};void 0===ei.__currentId__&&(ei.__currentId__=0);var ti=!1;function ni(e){if(!ti){var t=Z.getInstance();t&&t.onReset&&t.onReset(oi),ti=!0}return(void 0===e?"id__":e)+ei.__currentId__++}function oi(e){void 0===e&&(e=0),ei.__currentId__=e}var ri;function ii(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}!function(e){e[e.vertical=0]="vertical",e[e.horizontal=1]="horizontal",e[e.bidirectional=2]="bidirectional",e[e.domOrder=3]="domOrder"}(ri||(ri={}));var ai=function(e){return function(t){for(var n=0,o=e.refs;n<o.length;n++){var r=o[n];"function"==typeof r?r(t):r&&(r.current=t)}}},si=function(e){var t={refs:[]};return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.resolver&&ii(t.refs,e)||(t.resolver=ai(t)),t.refs=e,t.resolver}};function li(e,t){return e&&e!==document.body?t(e)?e:li(Zr(e),t):null}function ui(e,t,n,o,r,i,a,s){if(!t||!a&&t===e)return null;var l=di(t);if(r&&l&&(i||!fi(t)&&!hi(t))){var u=ui(e,t.lastElementChild,!0,!0,!0,i,a,s);if(u){if(s&&pi(u,!0)||!s)return u;var c=ui(e,u.previousElementSibling,!0,!0,!0,i,a,s);if(c)return c;for(var d=u.parentElement;d&&d!==t;){var p=ui(e,d.previousElementSibling,!0,!0,!0,i,a,s);if(p)return p;d=d.parentElement}}}return n&&l&&pi(t,s)?t:ui(e,t.previousElementSibling,!0,!0,!0,i,a,s)||(o?null:ui(e,t.parentElement,!0,!1,!1,i,a,s))}function ci(e,t,n,o,r,i,a,s){if(!t||t===e&&r&&!a)return null;var l=di(t);if(n&&l&&pi(t,s))return t;if(!r&&l&&(i||!fi(t)&&!hi(t))){var u=ci(e,t.firstElementChild,!0,!0,!1,i,a,s);if(u)return u}return t===e?null:ci(e,t.nextElementSibling,!0,!0,!1,i,a,s)||(o?null:ci(e,t.parentElement,!1,!1,!0,i,a,s))}function di(e){if(!e||!e.getAttribute)return!1;var t=e.getAttribute("data-is-visible");return null!=t?"true"===t:0!==e.offsetHeight||null!==e.offsetParent||!0===e.isVisible}function pi(e,t){if(!e||e.disabled)return!1;var n=0,o=null;e&&e.getAttribute&&(o=e.getAttribute("tabIndex"))&&(n=parseInt(o,10));var r=e.getAttribute?e.getAttribute("data-is-focusable"):null,i=null!==o&&n>=0,a=!!e&&"false"!==r&&("A"===e.tagName||"BUTTON"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName||"SELECT"===e.tagName||"true"===r||i);return t?-1!==n&&a:a}function fi(e){return!!(e&&e.getAttribute&&e.getAttribute("data-focuszone-id"))}function hi(e){return!(!e||!e.getAttribute||"true"!==e.getAttribute("data-is-sub-focuszone"))}function mi(e,t){return"true"!==function(e,t){var n=li(e,(function(e){return e.hasAttribute(t)}));return n&&n.getAttribute(t)}(e,t)}var gi,vi=void 0;function yi(e){if(e){if(vi)return void(vi=e);vi=e;var t=Ho(e);t&&t.requestAnimationFrame((function(){vi&&vi.focus(),vi=void 0}))}}function bi(e){var t=function(e){var t;return"function"==typeof Event?t=new Event(e):(t=document.createEvent("Event")).initEvent(e,!0,!0),t}("MouseEvents");t.initEvent("click",!0,!0),e.dispatchEvent(t)}var _i=0,Ci=ke({overflow:"hidden !important"}),ki="data-is-scrollable",Si=function(e){e.preventDefault()};function wi(e){for(var t=e,n=No(e);t&&t!==n.body;){if("true"===t.getAttribute(ki))return t;t=t.parentElement}for(t=e;t&&t!==n.body;){if("false"!==t.getAttribute(ki)){var o=getComputedStyle(t),r=o?o.getPropertyValue("overflow-y"):"";if(r&&("scroll"===r||"auto"===r))return t}t=t.parentElement}return t&&t!==n.body||(t=Ho(e)),t}var xi="data-portal-element";function Ei(e,t){var n=li(e,(function(e){return t===e||e.hasAttribute(xi)}));return null!==n&&n.hasAttribute(xi)}var Ii,Di,Ri,Ti,Pi,Mi="data-is-focusable",Fi="data-focuszone-id",Li="tabindex",Ai="data-no-vertical-wrap",Ni="data-no-horizontal-wrap",Bi=999999999,Hi=-999999999,Oi={},zi=new Set,Wi=["text","number","password","email","tel","url","search"],Ui=!1,Vi=function(t){function n(o){var r,i,a,s,l=t.call(this,o)||this;l._root=e.createRef(),l._mergedRef=si(),l._onFocus=function(e){if(!l._portalContainsElement(e.target)){var t,n=l.props,o=n.onActiveElementChanged,r=n.doNotAllowFocusEventToPropagate,i=n.stopFocusPropagation,a=n.onFocusNotification,s=n.onFocus,u=n.shouldFocusInnerElementWhenReceivedFocus,c=n.defaultTabbableElement,d=l._isImmediateDescendantOfZone(e.target);if(d)t=e.target;else for(var p=e.target;p&&p!==l._root.current;){if(pi(p)&&l._isImmediateDescendantOfZone(p)){t=p;break}p=Zr(p,Ui)}if(u&&e.target===l._root.current){var f=c&&"function"==typeof c&&l._root.current&&c(l._root.current);f&&pi(f)?(t=f,f.focus()):(l.focus(!0),l._activeElement&&(t=null))}var h=!l._activeElement;t&&t!==l._activeElement&&((d||h)&&l._setFocusAlignment(t,!0,!0),l._activeElement=t,h&&l._updateTabIndexes()),o&&o(l._activeElement,e),(i||r)&&e.stopPropagation(),s?s(e):a&&a()}},l._onBlur=function(){l._setParkedFocus(!1)},l._onMouseDown=function(e){if(!l._portalContainsElement(e.target)&&!l.props.disabled){for(var t=e.target,n=[];t&&t!==l._root.current;)n.push(t),t=Zr(t,Ui);for(;n.length&&((t=n.pop())&&pi(t)&&l._setActiveElement(t,!0),!fi(t)););}},l._onKeyDown=function(e,t){if(!l._portalContainsElement(e.target)){var n=l.props,o=n.direction,r=n.disabled,i=n.isInnerZoneKeystroke,a=n.pagingSupportDisabled,s=n.shouldEnterInnerZone;if(!(r||(l.props.onKeyDown&&l.props.onKeyDown(e),e.isDefaultPrevented()||l._getDocument().activeElement===l._root.current&&l._isInnerZone))){if((s&&s(e)||i&&i(e))&&l._isImmediateDescendantOfZone(e.target)){var u=l._getFirstInnerZone();if(u){if(!u.focus(!0))return}else{if(!hi(e.target))return;if(!l.focusElement(ci(e.target,e.target.firstChild,!0)))return}}else{if(e.altKey)return;switch(e.which){case Po:if(l._shouldRaiseClicksOnSpace&&l._tryInvokeClickForFocusable(e.target))break;return;case Mo:if(o!==ri.vertical&&(l._preventDefaultWhenHandled(e),l._moveFocusLeft(t)))break;return;case Lo:if(o!==ri.vertical&&(l._preventDefaultWhenHandled(e),l._moveFocusRight(t)))break;return;case Fo:if(o!==ri.horizontal&&(l._preventDefaultWhenHandled(e),l._moveFocusUp()))break;return;case Ao:if(o!==ri.horizontal&&(l._preventDefaultWhenHandled(e),l._moveFocusDown()))break;return;case 34:if(!a&&l._moveFocusPaging(!0))break;return;case 33:if(!a&&l._moveFocusPaging(!1))break;return;case Do:if(l.props.allowTabKey||1===l.props.handleTabKey||2===l.props.handleTabKey&&l._isElementInput(e.target)){var c=!1;if(l._processingTabKey=!0,c=o!==ri.vertical&&l._shouldWrapFocus(l._activeElement,Ni)?(Uo(t)?!e.shiftKey:e.shiftKey)?l._moveFocusLeft(t):l._moveFocusRight(t):e.shiftKey?l._moveFocusUp():l._moveFocusDown(),l._processingTabKey=!1,c)break;l.props.shouldResetActiveElementWhenTabFromZone&&(l._activeElement=null)}return;case 36:if(l._isContentEditableElement(e.target)||l._isElementInput(e.target)&&!l._shouldInputLoseFocus(e.target,!1))return!1;var d=l._root.current&&l._root.current.firstChild;if(l._root.current&&d&&l.focusElement(ci(l._root.current,d,!0)))break;return;case 35:if(l._isContentEditableElement(e.target)||l._isElementInput(e.target)&&!l._shouldInputLoseFocus(e.target,!0))return!1;var p=l._root.current&&l._root.current.lastChild;if(l._root.current&&l.focusElement(ui(l._root.current,p,!0,!0,!0)))break;return;case Ro:if(l._shouldRaiseClicksOnEnter&&l._tryInvokeClickForFocusable(e.target))break;return;default:return}}e.preventDefault(),e.stopPropagation()}}},l._getHorizontalDistanceFromCenter=function(e,t,n){var o=l._focusAlignment.left||l._focusAlignment.x||0,r=Math.floor(n.top),i=Math.floor(t.bottom),a=Math.floor(n.bottom),s=Math.floor(t.top);return e&&r>i||!e&&a<s?o>=n.left&&o<=n.left+n.width?0:Math.abs(n.left+n.width/2-o):l._shouldWrapFocus(l._activeElement,Ai)?Bi:Hi},Br(l),l._id=ni("FocusZone"),l._focusAlignment={left:0,top:0},l._processingTabKey=!1;var u=null===(i=null!==(r=o.shouldRaiseClicks)&&void 0!==r?r:n.defaultProps.shouldRaiseClicks)||void 0===i||i;return l._shouldRaiseClicksOnEnter=null!==(a=o.shouldRaiseClicksOnEnter)&&void 0!==a?a:u,l._shouldRaiseClicksOnSpace=null!==(s=o.shouldRaiseClicksOnSpace)&&void 0!==s?s:u,l}return B(n,t),n.getOuterZones=function(){return zi.size},n._onKeyDownCapture=function(e){e.which===Do&&zi.forEach((function(e){return e._updateTabIndexes()}))},n.prototype.componentDidMount=function(){var e=this._root.current;if(Oi[this._id]=this,e){this._windowElement=Ho(e);for(var t=Zr(e,Ui);t&&t!==this._getDocument().body&&1===t.nodeType;){if(fi(t)){this._isInnerZone=!0;break}t=Zr(t,Ui)}this._isInnerZone||(zi.add(this),this._windowElement&&1===zi.size&&this._windowElement.addEventListener("keydown",n._onKeyDownCapture,!0)),this._root.current&&this._root.current.addEventListener("blur",this._onBlur,!0),this._updateTabIndexes(),this.props.defaultTabbableElement&&"string"==typeof this.props.defaultTabbableElement?this._activeElement=this._getDocument().querySelector(this.props.defaultTabbableElement):this.props.defaultActiveElement&&(this._activeElement=this._getDocument().querySelector(this.props.defaultActiveElement)),this.props.shouldFocusOnMount&&this.focus()}},n.prototype.componentDidUpdate=function(){var e=this._root.current,t=this._getDocument();if(!this.props.preventFocusRestoration&&t&&this._lastIndexPath&&(t.activeElement===t.body||null===t.activeElement||t.activeElement===e)){var n=function(e,t){for(var n=e,o=0,r=t;o<r.length;o++){var i=r[o],a=n.children[Math.min(i,n.children.length-1)];if(!a)break;n=a}return pi(n)&&di(n)?n:ci(e,n,!0)||ui(e,n)}(e,this._lastIndexPath);n?(this._setActiveElement(n,!0),n.focus(),this._setParkedFocus(!1)):this._setParkedFocus(!0)}},n.prototype.componentWillUnmount=function(){delete Oi[this._id],this._isInnerZone||(zi.delete(this),this._windowElement&&0===zi.size&&this._windowElement.removeEventListener("keydown",n._onKeyDownCapture,!0)),this._root.current&&this._root.current.removeEventListener("blur",this._onBlur,!0),this._activeElement=null,this._defaultFocusElement=null},n.prototype.render=function(){var t=this,n=this.props,o=n.as,r=n.elementType,i=n.rootProps,a=n.ariaDescribedBy,s=n.ariaLabelledBy,l=n.className,u=wo(this.props,to),c=o||r||"div";this._evaluateFocusBeforeRender();var d,p=(void 0===d&&(d=!1),!0===d&&(Cn=_n({},d)),Cn);return e.createElement(c,H({"aria-labelledby":s,"aria-describedby":a},u,i,{className:xo((Ii||(Ii=ke({selectors:{":focus":{outline:"none"}}},"ms-FocusZone")),Ii),l),ref:this._mergedRef(this.props.elementRef,this._root),"data-focuszone-id":this._id,onKeyDown:function(e){return t._onKeyDown(e,p)},onFocus:this._onFocus,onMouseDownCapture:this._onMouseDown}),this.props.children)},n.prototype.focus=function(e){if(void 0===e&&(e=!1),this._root.current){if(!e&&"true"===this._root.current.getAttribute(Mi)&&this._isInnerZone){var t=this._getOwnerZone(this._root.current);if(t!==this._root.current){var n=Oi[t.getAttribute(Fi)];return!!n&&n.focusElement(this._root.current)}return!1}if(!e&&this._activeElement&&Qr(this._root.current,this._activeElement)&&pi(this._activeElement))return this._activeElement.focus(),!0;var o=this._root.current.firstChild;return this.focusElement(ci(this._root.current,o,!0))}return!1},n.prototype.focusLast=function(){if(this._root.current){var e=this._root.current&&this._root.current.lastChild;return this.focusElement(ui(this._root.current,e,!0,!0,!0))}return!1},n.prototype.focusElement=function(e,t){var n=this.props,o=n.onBeforeFocus,r=n.shouldReceiveFocus;return!(r&&!r(e)||o&&!o(e)||!e||(this._setActiveElement(e,t),this._activeElement&&this._activeElement.focus(),0))},n.prototype.setFocusAlignment=function(e){this._focusAlignment=e},n.prototype._evaluateFocusBeforeRender=function(){var e=this._root.current,t=this._getDocument();if(t){var n=t.activeElement;if(n!==e){var o=Qr(e,n,!1);this._lastIndexPath=o?function(e,t){for(var n=[];t&&e&&t!==e;){var o=Zr(t,!0);if(null===o)return[];n.unshift(Array.prototype.indexOf.call(o.children,t)),t=o}return n}(e,n):void 0}}},n.prototype._setParkedFocus=function(e){var t=this._root.current;t&&this._isParked!==e&&(this._isParked=e,e?(this.props.allowFocusRoot||(this._parkedTabIndex=t.getAttribute("tabindex"),t.setAttribute("tabindex","-1")),t.focus()):this.props.allowFocusRoot||(this._parkedTabIndex?(t.setAttribute("tabindex",this._parkedTabIndex),this._parkedTabIndex=void 0):t.removeAttribute("tabindex")))},n.prototype._setActiveElement=function(e,t){var n=this._activeElement;this._activeElement=e,n&&(fi(n)&&this._updateTabIndexes(n),n.tabIndex=-1),this._activeElement&&(this._focusAlignment&&!t||this._setFocusAlignment(e,!0,!0),this._activeElement.tabIndex=0)},n.prototype._preventDefaultWhenHandled=function(e){this.props.preventDefaultWhenHandled&&e.preventDefault()},n.prototype._tryInvokeClickForFocusable=function(e){if(e===this._root.current)return!1;do{if("BUTTON"===e.tagName||"A"===e.tagName||"INPUT"===e.tagName||"TEXTAREA"===e.tagName)return!1;if(this._isImmediateDescendantOfZone(e)&&"true"===e.getAttribute(Mi)&&"true"!==e.getAttribute("data-disable-click-on-enter"))return bi(e),!0;e=Zr(e,Ui)}while(e!==this._root.current);return!1},n.prototype._getFirstInnerZone=function(e){if(!(e=e||this._activeElement||this._root.current))return null;if(fi(e))return Oi[e.getAttribute(Fi)];for(var t=e.firstElementChild;t;){if(fi(t))return Oi[t.getAttribute(Fi)];var n=this._getFirstInnerZone(t);if(n)return n;t=t.nextElementSibling}return null},n.prototype._moveFocus=function(e,t,n,o){void 0===o&&(o=!0);var r=this._activeElement,i=-1,a=void 0,s=!1,l=this.props.direction===ri.bidirectional;if(!r||!this._root.current)return!1;if(this._isElementInput(r)&&!this._shouldInputLoseFocus(r,e))return!1;var u=l?r.getBoundingClientRect():null;do{if(r=e?ci(this._root.current,r):ui(this._root.current,r),!l){a=r;break}if(r){var c=t(u,r.getBoundingClientRect());if(-1===c&&-1===i){a=r;break}if(c>-1&&(-1===i||c<i)&&(i=c,a=r),i>=0&&c<0)break}}while(r);if(a&&a!==this._activeElement)s=!0,this.focusElement(a);else if(this.props.isCircularNavigation&&o)return e?this.focusElement(ci(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ui(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return s},n.prototype._moveFocusDown=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!0,(function(o,r){var i=-1,a=Math.floor(r.top),s=Math.floor(o.bottom);return a<s?e._shouldWrapFocus(e._activeElement,Ai)?Bi:Hi:((-1===t&&a>=s||a===t)&&(t=a,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},n.prototype._moveFocusUp=function(){var e=this,t=-1,n=this._focusAlignment.left||this._focusAlignment.x||0;return!!this._moveFocus(!1,(function(o,r){var i=-1,a=Math.floor(r.bottom),s=Math.floor(r.top),l=Math.floor(o.top);return a>l?e._shouldWrapFocus(e._activeElement,Ai)?Bi:Hi:((-1===t&&a<=l||s===t)&&(t=s,i=n>=r.left&&n<=r.left+r.width?0:Math.abs(r.left+r.width/2-n)),i)}))&&(this._setFocusAlignment(this._activeElement,!1,!0),!0)},n.prototype._moveFocusLeft=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,Ni);return!!this._moveFocus(Uo(e),(function(o,r){var i=-1;return(Uo(e)?parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)):parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)))&&r.right<=o.right&&t.props.direction!==ri.vertical?i=o.right-r.right:n||(i=Hi),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},n.prototype._moveFocusRight=function(e){var t=this,n=this._shouldWrapFocus(this._activeElement,Ni);return!!this._moveFocus(!Uo(e),(function(o,r){var i=-1;return(Uo(e)?parseFloat(r.bottom.toFixed(3))>parseFloat(o.top.toFixed(3)):parseFloat(r.top.toFixed(3))<parseFloat(o.bottom.toFixed(3)))&&r.left>=o.left&&t.props.direction!==ri.vertical?i=r.left-o.left:n||(i=Hi),i}),void 0,n)&&(this._setFocusAlignment(this._activeElement,!0,!1),!0)},n.prototype._moveFocusPaging=function(e,t){void 0===t&&(t=!0);var n=this._activeElement;if(!n||!this._root.current)return!1;if(this._isElementInput(n)&&!this._shouldInputLoseFocus(n,e))return!1;var o=wi(n);if(!o)return!1;var r=-1,i=void 0,a=-1,s=-1,l=o.clientHeight,u=n.getBoundingClientRect();do{if(n=e?ci(this._root.current,n):ui(this._root.current,n)){var c=n.getBoundingClientRect(),d=Math.floor(c.top),p=Math.floor(u.bottom),f=Math.floor(c.bottom),h=Math.floor(u.top),m=this._getHorizontalDistanceFromCenter(e,u,c);if(e&&d>p+l||!e&&f<h-l)break;m>-1&&(e&&d>a?(a=d,r=m,i=n):!e&&f<s?(s=f,r=m,i=n):(-1===r||m<=r)&&(r=m,i=n))}}while(n);var g=!1;if(i&&i!==this._activeElement)g=!0,this.focusElement(i),this._setFocusAlignment(i,!1,!0);else if(this.props.isCircularNavigation&&t)return e?this.focusElement(ci(this._root.current,this._root.current.firstElementChild,!0)):this.focusElement(ui(this._root.current,this._root.current.lastElementChild,!0,!0,!0));return g},n.prototype._setFocusAlignment=function(e,t,n){if(this.props.direction===ri.bidirectional&&(!this._focusAlignment||t||n)){var o=e.getBoundingClientRect(),r=o.left+o.width/2,i=o.top+o.height/2;this._focusAlignment||(this._focusAlignment={left:r,top:i}),t&&(this._focusAlignment.left=r),n&&(this._focusAlignment.top=i)}},n.prototype._isImmediateDescendantOfZone=function(e){return this._getOwnerZone(e)===this._root.current},n.prototype._getOwnerZone=function(e){for(var t=Zr(e,Ui);t&&t!==this._root.current&&t!==this._getDocument().body;){if(fi(t))return t;t=Zr(t,Ui)}return t},n.prototype._updateTabIndexes=function(e){!this._activeElement&&this.props.defaultTabbableElement&&"function"==typeof this.props.defaultTabbableElement&&(this._activeElement=this.props.defaultTabbableElement(this._root.current)),!e&&this._root.current&&(this._defaultFocusElement=null,e=this._root.current,this._activeElement&&!Qr(e,this._activeElement)&&(this._activeElement=null)),this._activeElement&&!pi(this._activeElement)&&(this._activeElement=null);for(var t=e&&e.children,n=0;t&&n<t.length;n++){var o=t[n];fi(o)?"true"===o.getAttribute(Mi)&&(this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute(Li)&&o.setAttribute(Li,"-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute(Li)&&o.setAttribute(Li,"0"))):(o.getAttribute&&"false"===o.getAttribute(Mi)&&o.setAttribute(Li,"-1"),pi(o)?this.props.disabled?o.setAttribute(Li,"-1"):this._isInnerZone||(this._activeElement||this._defaultFocusElement)&&this._activeElement!==o?"-1"!==o.getAttribute(Li)&&o.setAttribute(Li,"-1"):(this._defaultFocusElement=o,"0"!==o.getAttribute(Li)&&o.setAttribute(Li,"0")):"svg"===o.tagName&&"false"!==o.getAttribute("focusable")&&o.setAttribute("focusable","false")),this._updateTabIndexes(o)}},n.prototype._isContentEditableElement=function(e){return e&&"true"===e.getAttribute("contenteditable")},n.prototype._isElementInput=function(e){return!(!e||!e.tagName||"input"!==e.tagName.toLowerCase()&&"textarea"!==e.tagName.toLowerCase())},n.prototype._shouldInputLoseFocus=function(e,t){if(!this._processingTabKey&&e&&e.type&&Wi.indexOf(e.type.toLowerCase())>-1){var n=e.selectionStart,o=n!==e.selectionEnd,r=e.value,i=e.readOnly;if(o||n>0&&!t&&!i||n!==r.length&&t&&!i||this.props.handleTabKey&&(!this.props.shouldInputLoseFocusOnArrowKey||!this.props.shouldInputLoseFocusOnArrowKey(e)))return!1}return!0},n.prototype._shouldWrapFocus=function(e,t){return!this.props.checkForNoWrap||mi(e,t)},n.prototype._portalContainsElement=function(e){return e&&!!this._root.current&&Ei(e,this._root.current)},n.prototype._getDocument=function(){return No(this._root.current)},n.defaultProps={isCircularNavigation:!1,direction:ri.bidirectional,shouldRaiseClicks:!0},n}(e.Component);function Gi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var o=e.useCallback((function(e){o.current=e;for(var n=0,r=t;n<r.length;n++){var i=r[n];"function"==typeof i?i(e):i&&(i.current=e)}}),W([],t));return o}!function(e){e[e.default=0]="default",e[e.image=1]="image",e[e.Default=1e5]="Default",e[e.Image=100001]="Image"}(Di||(Di={})),function(e){e[e.center=0]="center",e[e.contain=1]="contain",e[e.cover=2]="cover",e[e.none=3]="none",e[e.centerCover=4]="centerCover",e[e.centerContain=5]="centerContain"}(Ri||(Ri={})),function(e){e[e.landscape=0]="landscape",e[e.portrait=1]="portrait"}(Ti||(Ti={})),function(e){e[e.notLoaded=0]="notLoaded",e[e.loaded=1]="loaded",e[e.error=2]="error",e[e.errorLoaded=3]="errorLoaded"}(Pi||(Pi={}));var ji=kr(),Ki=/\.svg$/i,qi=e.forwardRef((function(t,n){var o=e.useRef(),r=e.useRef(),i=function(t,n){var o=t.onLoadingStateChange,r=t.onLoad,i=t.onError,a=t.src,s=e.useState(Pi.notLoaded),l=s[0],u=s[1];e.useLayoutEffect((function(){u(Pi.notLoaded)}),[a]),e.useEffect((function(){l===Pi.notLoaded&&n.current&&(a&&n.current.naturalWidth>0&&n.current.naturalHeight>0||n.current.complete&&Ki.test(a))&&u(Pi.loaded)})),e.useEffect((function(){null==o||o(l)}),[l]);var c=e.useCallback((function(e){null==r||r(e),a&&u(Pi.loaded)}),[a,r]),d=e.useCallback((function(e){null==i||i(e),u(Pi.error)}),[i]);return[l,c,d]}(t,r),a=i[0],s=i[1],l=i[2],u=wo(t,ko,["width","height"]),c=t.src,d=t.alt,p=t.width,f=t.height,h=t.shouldFadeIn,m=void 0===h||h,g=t.shouldStartVisible,v=t.className,y=t.imageFit,b=t.role,_=t.maximizeFrame,C=t.styles,k=t.theme,S=t.loading,w=function(t,n,o,r){var i=e.useRef(n),a=e.useRef();return(void 0===a||i.current===Pi.notLoaded&&n===Pi.loaded)&&(a.current=function(e,t,n,o){var r=e.imageFit,i=e.width,a=e.height;if(void 0!==e.coverStyle)return e.coverStyle;if(t===Pi.loaded&&(r===Ri.cover||r===Ri.contain||r===Ri.centerContain||r===Ri.centerCover)&&n.current&&o.current){var s;if(s="number"==typeof i&&"number"==typeof a&&r!==Ri.centerContain&&r!==Ri.centerCover?i/a:o.current.clientWidth/o.current.clientHeight,n.current.naturalWidth/n.current.naturalHeight>s)return Ti.landscape}return Ti.portrait}(t,n,o,r)),i.current=n,a.current}(t,a,r,o),x=ji(C,{theme:k,className:v,width:p,height:f,maximizeFrame:_,shouldFadeIn:m,shouldStartVisible:g,isLoaded:a===Pi.loaded||a===Pi.notLoaded&&t.shouldStartVisible,isLandscape:w===Ti.landscape,isCenter:y===Ri.center,isCenterContain:y===Ri.centerContain,isCenterCover:y===Ri.centerCover,isContain:y===Ri.contain,isCover:y===Ri.cover,isNone:y===Ri.none,isError:a===Pi.error,isNotImageFit:void 0===y});return e.createElement("div",{className:x.root,style:{width:p,height:f},ref:o},e.createElement("img",H({},u,{onLoad:s,onError:l,key:"fabricImage"+t.src||"",className:x.image,ref:Gi(r,n),src:c,alt:d,role:b,loading:S})))}));qi.displayName="ImageBase";var Zi={root:"ms-Image",rootMaximizeFrame:"ms-Image--maximizeFrame",image:"ms-Image-image",imageCenter:"ms-Image-image--center",imageContain:"ms-Image-image--contain",imageCover:"ms-Image-image--cover",imageCenterContain:"ms-Image-image--centerContain",imageCenterCover:"ms-Image-image--centerCover",imageNone:"ms-Image-image--none",imageLandscape:"ms-Image-image--landscape",imagePortrait:"ms-Image-image--portrait"},Qi=vr(qi,(function(e){var t=e.className,n=e.width,o=e.height,r=e.maximizeFrame,i=e.isLoaded,a=e.shouldFadeIn,s=e.shouldStartVisible,l=e.isLandscape,u=e.isCenter,c=e.isContain,d=e.isCover,p=e.isCenterContain,f=e.isCenterCover,h=e.isNone,m=e.isError,g=e.isNotImageFit,v=e.theme,y=Nt(Zi,v),b={position:"absolute",left:"50% /* @noflip */",top:"50%",transform:"translate(-50%,-50%)"},_=Ho(),C=void 0!==_&&void 0===_.navigator.msMaxTouchPoints,k=c&&l||d&&!l?{width:"100%",height:"auto"}:{width:"auto",height:"100%"};return{root:[y.root,v.fonts.medium,{overflow:"hidden"},r&&[y.rootMaximizeFrame,{height:"100%",width:"100%"}],i&&a&&!s&&Ct.fadeIn400,(u||c||d||p||f)&&{position:"relative"},t],image:[y.image,{display:"block",opacity:0},i&&["is-loaded",{opacity:1}],u&&[y.imageCenter,b],c&&[y.imageContain,C&&{width:"100%",height:"100%",objectFit:"contain"},!C&&k,!C&&b],d&&[y.imageCover,C&&{width:"100%",height:"100%",objectFit:"cover"},!C&&k,!C&&b],p&&[y.imageCenterContain,l&&{maxWidth:"100%"},!l&&{maxHeight:"100%"},b],f&&[y.imageCenterCover,l&&{maxHeight:"100%"},!l&&{maxWidth:"100%"},b],h&&[y.imageNone,{width:"auto",height:"auto"}],g&&[!!n&&!o&&{height:"auto",width:"100%"},!n&&!!o&&{height:"100%",width:"auto"},!!n&&!!o&&{height:"100%",width:"100%"}],l&&y.imageLandscape,!l&&y.imagePortrait,!i&&"is-notLoaded",a&&"is-fadeIn",m&&"is-error"]}}),void 0,{scope:"Image"},!0);Qi.displayName="Image";var Yi=kr({cacheSize:100}),$i=function(t){function n(e){var n=t.call(this,e)||this;return n._onImageLoadingStateChange=function(e){n.props.imageProps&&n.props.imageProps.onLoadingStateChange&&n.props.imageProps.onLoadingStateChange(e),e===Pi.error&&n.setState({imageLoadError:!0})},n.state={imageLoadError:!1},n}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.children,o=t.className,r=t.styles,i=t.iconName,a=t.imageErrorAs,s=t.theme,l="string"==typeof i&&0===i.length,u=!!this.props.imageProps||this.props.iconType===Di.image||this.props.iconType===Di.Image,c=Eo(i)||{},d=c.iconClassName,p=c.children,f=c.mergeImageProps,h=Yi(r,{theme:s,className:o,iconClassName:d,isImage:u,isPlaceholder:l}),m=u?"span":"i",g=wo(this.props,to,["aria-label"]),v=this.state.imageLoadError,y=H(H({},this.props.imageProps),{onLoadingStateChange:this._onImageLoadingStateChange}),b=v&&a||Qi,_=this.props["aria-label"]||this.props.ariaLabel,C=y.alt||_||this.props.title,k=C||this.props["aria-labelledby"]||y["aria-label"]||y["aria-labelledby"]?{role:u||f?void 0:"img","aria-label":u||f?void 0:C}:{"aria-hidden":!0},S=p;return f&&p&&"object"==typeof p&&C&&(S=e.cloneElement(p,{alt:C})),e.createElement(m,H({"data-icon-name":i},k,g,f?{title:void 0,"aria-label":void 0}:{},{className:h.root}),u?e.createElement(b,H({},y)):n||S)},n}(e.Component),Xi=vr($i,(function(e){var t=e.className,n=e.iconClassName,o=e.isPlaceholder,r=e.isImage,i=e.styles;return{root:[o&&zn.placeholder,zn.root,r&&zn.image,n,t,i&&i.root,i&&i.imageContainer]}}),void 0,{scope:"Icon"},!0);function Ji(e,t){void 0===e&&(e={});var n=ea(t)?t:function(e){return function(t){return e?H(H({},t),e):t}}(t);return n(e)}function ea(e){return"function"==typeof e}Xi.displayName="Icon";var ta,na=function(t){function n(){var e=null!==t&&t.apply(this,arguments)||this;return e._onCustomizationChange=function(){return e.forceUpdate()},e}return B(n,t),n.prototype.componentDidMount=function(){rr.observe(this._onCustomizationChange)},n.prototype.componentWillUnmount=function(){rr.unobserve(this._onCustomizationChange)},n.prototype.render=function(){var t=this,n=this.props.contextTransform;return e.createElement(Yo.Consumer,null,(function(o){var r=function(e,t){var n,o,r,i=(t||{}).customizations,a=void 0===i?{settings:{},scopedSettings:{}}:i;return{customizations:{settings:Ji(a.settings,e.settings),scopedSettings:(n=a.scopedSettings,o=e.scopedSettings,void 0===n&&(n={}),(ea(o)?o:(void 0===(r=o)&&(r={}),function(e){var t=H({},e);for(var n in r)r.hasOwnProperty(n)&&(t[n]=H(H({},e[n]),r[n]));return t}))(n)),inCustomizerContext:!0}}}(t.props,o);return n&&(r=n(r)),e.createElement(Yo.Provider,{value:r},t.props.children)}))},n}(e.Component),oa={themeDarker:"#004578",themeDark:"#005a9e",themeDarkAlt:"#106ebe",themePrimary:"#0078d4",themeSecondary:"#2b88d8",themeTertiary:"#71afe5",themeLight:"#c7e0f4",themeLighter:"#deecf9",themeLighterAlt:"#eff6fc",black:"#000000",blackTranslucent40:"rgba(0,0,0,.4)",neutralDark:"#201f1e",neutralPrimary:"#323130",neutralPrimaryAlt:"#3b3a39",neutralSecondary:"#605e5c",neutralSecondaryAlt:"#8a8886",neutralTertiary:"#a19f9d",neutralTertiaryAlt:"#c8c6c4",neutralQuaternary:"#d2d0ce",neutralQuaternaryAlt:"#e1dfdd",neutralLight:"#edebe9",neutralLighter:"#f3f2f1",neutralLighterAlt:"#faf9f8",accent:"#0078d4",white:"#ffffff",whiteTranslucent40:"rgba(255,255,255,.4)",yellowDark:"#d29200",yellow:"#ffb900",yellowLight:"#fff100",orange:"#d83b01",orangeLight:"#ea4300",orangeLighter:"#ff8c00",redDark:"#a4262c",red:"#e81123",magentaDark:"#5c005c",magenta:"#b4009e",magentaLight:"#e3008c",purpleDark:"#32145a",purple:"#5c2d91",purpleLight:"#b4a0ff",blueDark:"#002050",blueMid:"#00188f",blue:"#0078d4",blueLight:"#00bcf2",tealDark:"#004b50",teal:"#008272",tealLight:"#00b294",greenDark:"#004b1c",green:"#107c10",greenLight:"#bad80a"};!function(e){e.depth0="0 0 0 0 transparent",e.depth4="0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)",e.depth8="0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)",e.depth16="0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)",e.depth64="0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)"}(ta||(ta={}));var ra,ia,aa,sa,la,ua={elevation4:ta.depth4,elevation8:ta.depth8,elevation16:ta.depth16,elevation64:ta.depth64,roundedCorner2:"2px",roundedCorner4:"4px",roundedCorner6:"6px"};!function(e){e.Arabic="Segoe UI Web (Arabic)",e.Cyrillic="Segoe UI Web (Cyrillic)",e.EastEuropean="Segoe UI Web (East European)",e.Greek="Segoe UI Web (Greek)",e.Hebrew="Segoe UI Web (Hebrew)",e.Thai="Leelawadee UI Web",e.Vietnamese="Segoe UI Web (Vietnamese)",e.WestEuropean="Segoe UI Web (West European)",e.Selawik="Selawik Web",e.Armenian="Segoe UI Web (Armenian)",e.Georgian="Segoe UI Web (Georgian)"}(ra||(ra={})),function(e){e.Arabic="'"+ra.Arabic+"'",e.ChineseSimplified="'Microsoft Yahei UI', Verdana, Simsun",e.ChineseTraditional="'Microsoft Jhenghei UI', Pmingliu",e.Cyrillic="'"+ra.Cyrillic+"'",e.EastEuropean="'"+ra.EastEuropean+"'",e.Greek="'"+ra.Greek+"'",e.Hebrew="'"+ra.Hebrew+"'",e.Hindi="'Nirmala UI'",e.Japanese="'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka",e.Korean="'Malgun Gothic', Gulim",e.Selawik="'"+ra.Selawik+"'",e.Thai="'Leelawadee UI Web', 'Kmer UI'",e.Vietnamese="'"+ra.Vietnamese+"'",e.WestEuropean="'"+ra.WestEuropean+"'",e.Armenian="'"+ra.Armenian+"'",e.Georgian="'"+ra.Georgian+"'"}(ia||(ia={})),function(e){e.size10="10px",e.size12="12px",e.size14="14px",e.size16="16px",e.size18="18px",e.size20="20px",e.size24="24px",e.size28="28px",e.size32="32px",e.size42="42px",e.size68="68px",e.mini="10px",e.xSmall="10px",e.small="12px",e.smallPlus="12px",e.medium="14px",e.mediumPlus="16px",e.icon="16px",e.large="18px",e.xLarge="20px",e.xLargePlus="24px",e.xxLarge="28px",e.xxLargePlus="32px",e.superLarge="42px",e.mega="68px"}(aa||(aa={})),function(e){e.light=100,e.semilight=300,e.regular=400,e.semibold=600,e.bold=700}(sa||(sa={})),function(e){e.xSmall="10px",e.small="12px",e.medium="16px",e.large="20px"}(la||(la={}));var ca,da="'Segoe UI', '"+ra.WestEuropean+"'",pa={ar:ia.Arabic,bg:ia.Cyrillic,cs:ia.EastEuropean,el:ia.Greek,et:ia.EastEuropean,he:ia.Hebrew,hi:ia.Hindi,hr:ia.EastEuropean,hu:ia.EastEuropean,ja:ia.Japanese,kk:ia.EastEuropean,ko:ia.Korean,lt:ia.EastEuropean,lv:ia.EastEuropean,pl:ia.EastEuropean,ru:ia.Cyrillic,sk:ia.EastEuropean,"sr-latn":ia.EastEuropean,th:ia.Thai,tr:ia.EastEuropean,uk:ia.Cyrillic,vi:ia.Vietnamese,"zh-hans":ia.ChineseSimplified,"zh-hant":ia.ChineseTraditional,hy:ia.Armenian,ka:ia.Georgian};function fa(e,t,n){return{fontFamily:n,MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontSize:e,fontWeight:t}}var ha="language",ma=function(e){var t=function(e){for(var t in pa)if(pa.hasOwnProperty(t)&&e&&0===t.indexOf(e))return pa[t];return da}(e)+", 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";return{tiny:fa(aa.mini,sa.regular,t),xSmall:fa(aa.xSmall,sa.regular,t),small:fa(aa.small,sa.regular,t),smallPlus:fa(aa.smallPlus,sa.regular,t),medium:fa(aa.medium,sa.regular,t),mediumPlus:fa(aa.mediumPlus,sa.regular,t),large:fa(aa.large,sa.regular,t),xLarge:fa(aa.xLarge,sa.semibold,t),xLargePlus:fa(aa.xLargePlus,sa.semibold,t),xxLarge:fa(aa.xxLarge,sa.semibold,t),xxLargePlus:fa(aa.xxLargePlus,sa.semibold,t),superLarge:fa(aa.superLarge,sa.semibold,t),mega:fa(aa.mega,sa.semibold,t)}}(function(e){if(void 0===e&&(e="sessionStorage"),void 0===ca){var t=No(),n="localStorage"===e?function(e){var t=null;try{var n=Ho();t=n?n.localStorage.getItem("language"):null}catch(e){}return t}():"sessionStorage"===e?Oo(ha):void 0;n&&(ca=n),void 0===ca&&t&&(ca=t.documentElement.getAttribute("lang")),void 0===ca&&(ca="en")}return ca}());function ga(e,t,n,o){an({fontFamily:e="'"+e+"'",src:(void 0!==o?"local('"+o+"'),":"")+"url('"+t+".woff2') format('woff2'),url('"+t+".woff') format('woff')",fontWeight:n,fontStyle:"normal",fontDisplay:"swap"})}function va(e,t,n,o,r){void 0===o&&(o="segoeui");var i=e+"/"+n+"/"+o;ga(t,i+"-light",sa.light,r&&r+" Light"),ga(t,i+"-semilight",sa.semilight,r&&r+" SemiLight"),ga(t,i+"-regular",sa.regular,r),ga(t,i+"-semibold",sa.semibold,r&&r+" SemiBold"),ga(t,i+"-bold",sa.bold,r&&r+" Bold")}function ya(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var o=0,r=t;o<r.length;o++){var i=r[o];ba(e||{},i)}return e}function ba(e,t,n){for(var o in void 0===n&&(n=[]),n.push(t),t)if(t.hasOwnProperty(o)&&"__proto__"!==o&&"constructor"!==o&&"prototype"!==o){var r=t[o];if("object"!=typeof r||null===r||Array.isArray(r))e[o]=r;else{var i=n.indexOf(r)>-1;e[o]=i?r:ba(e[o]||{},r,n)}}return n.pop(),e}function _a(e,t,n,o,r){return void 0===r&&(r=!1),function(e,t){var n="";return!0===t&&(n=" /* @deprecated */"),e.listTextColor=e.listText+n,e.menuItemBackgroundChecked+=n,e.warningHighlight+=n,e.warningText=e.messageText+n,e.successText+=n,e}(Ca(e,t,H({primaryButtonBorder:"transparent",errorText:o?"#F1707B":"#a4262c",messageText:o?"#F3F2F1":"#323130",messageLink:o?"#6CB8F6":"#005A9E",messageLinkHovered:o?"#82C7FF":"#004578",infoIcon:o?"#C8C6C4":"#605e5c",errorIcon:o?"#F1707B":"#A80000",blockingIcon:o?"#442726":"#FDE7E9",warningIcon:o?"#C8C6C4":"#797775",severeWarningIcon:o?"#FCE100":"#D83B01",successIcon:o?"#92C353":"#107C10",infoBackground:o?"#323130":"#f3f2f1",errorBackground:o?"#442726":"#FDE7E9",blockingBackground:o?"#442726":"#FDE7E9",warningBackground:o?"#433519":"#FFF4CE",severeWarningBackground:o?"#4F2A0F":"#FED9CC",successBackground:o?"#393D1B":"#DFF6DD",warningHighlight:o?"#fff100":"#ffb900",successText:o?"#92c353":"#107C10"},n),o),r)}function Ca(e,t,n,o,r){void 0===r&&(r=!1);var i={},a=e||{},s=a.white,l=a.black,u=a.themePrimary,c=a.themeDark,d=a.themeDarker,p=a.themeDarkAlt,f=a.themeLighter,h=a.neutralLight,m=a.neutralLighter,g=a.neutralDark,v=a.neutralQuaternary,y=a.neutralQuaternaryAlt,b=a.neutralPrimary,_=a.neutralSecondary,C=a.neutralSecondaryAlt,k=a.neutralTertiary,S=a.neutralTertiaryAlt,w=a.neutralLighterAlt,x=a.accent;return s&&(i.bodyBackground=s,i.bodyFrameBackground=s,i.accentButtonText=s,i.buttonBackground=s,i.primaryButtonText=s,i.primaryButtonTextHovered=s,i.primaryButtonTextPressed=s,i.inputBackground=s,i.inputForegroundChecked=s,i.listBackground=s,i.menuBackground=s,i.cardStandoutBackground=s),l&&(i.bodyTextChecked=l,i.buttonTextCheckedHovered=l),u&&(i.link=u,i.primaryButtonBackground=u,i.inputBackgroundChecked=u,i.inputIcon=u,i.inputFocusBorderAlt=u,i.menuIcon=u,i.menuHeader=u,i.accentButtonBackground=u),c&&(i.primaryButtonBackgroundPressed=c,i.inputBackgroundCheckedHovered=c,i.inputIconHovered=c),d&&(i.linkHovered=d),p&&(i.primaryButtonBackgroundHovered=p),f&&(i.inputPlaceholderBackgroundChecked=f),h&&(i.bodyBackgroundChecked=h,i.bodyFrameDivider=h,i.bodyDivider=h,i.variantBorder=h,i.buttonBackgroundCheckedHovered=h,i.buttonBackgroundPressed=h,i.listItemBackgroundChecked=h,i.listHeaderBackgroundPressed=h,i.menuItemBackgroundPressed=h,i.menuItemBackgroundChecked=h),m&&(i.bodyBackgroundHovered=m,i.buttonBackgroundHovered=m,i.buttonBackgroundDisabled=m,i.buttonBorderDisabled=m,i.primaryButtonBackgroundDisabled=m,i.disabledBackground=m,i.listItemBackgroundHovered=m,i.listHeaderBackgroundHovered=m,i.menuItemBackgroundHovered=m),v&&(i.primaryButtonTextDisabled=v,i.disabledSubtext=v),y&&(i.listItemBackgroundCheckedHovered=y),k&&(i.disabledBodyText=k,i.variantBorderHovered=(null==n?void 0:n.variantBorderHovered)||k,i.buttonTextDisabled=k,i.inputIconDisabled=k,i.disabledText=k),b&&(i.bodyText=b,i.actionLink=b,i.buttonText=b,i.inputBorderHovered=b,i.inputText=b,i.listText=b,i.menuItemText=b),w&&(i.bodyStandoutBackground=w,i.defaultStateBackground=w),g&&(i.actionLinkHovered=g,i.buttonTextHovered=g,i.buttonTextChecked=g,i.buttonTextPressed=g,i.inputTextHovered=g,i.menuItemTextHovered=g),_&&(i.bodySubtext=_,i.focusBorder=_,i.inputBorder=_,i.smallInputBorder=_,i.inputPlaceholderText=_),C&&(i.buttonBorder=C),S&&(i.disabledBodySubtext=S,i.disabledBorder=S,i.buttonBackgroundChecked=S,i.menuDivider=S),x&&(i.accentButtonBackground=x),(null==t?void 0:t.elevation4)&&(i.cardShadow=t.elevation4),!o&&(null==t?void 0:t.elevation8)?i.cardShadowHovered=t.elevation8:i.variantBorderHovered&&(i.cardShadowHovered="0 0 1px "+i.variantBorderHovered),H(H({},i),n)}!function(e){if(e){var t=e+"/fonts";va(t,ra.Thai,"leelawadeeui-thai","leelawadeeui"),va(t,ra.Arabic,"segoeui-arabic"),va(t,ra.Cyrillic,"segoeui-cyrillic"),va(t,ra.EastEuropean,"segoeui-easteuropean"),va(t,ra.Greek,"segoeui-greek"),va(t,ra.Hebrew,"segoeui-hebrew"),va(t,ra.Vietnamese,"segoeui-vietnamese"),va(t,ra.WestEuropean,"segoeui-westeuropean","segoeui","Segoe UI"),va(t,ia.Selawik,"selawik","selawik"),va(t,ra.Armenian,"segoeui-armenian"),va(t,ra.Georgian,"segoeui-georgian"),ga("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-semilight",sa.light),ga("Leelawadee UI Web",t+"/leelawadeeui-thai/leelawadeeui-bold",sa.semibold)}}(function(){var e,t,n=null===(e=Ho())||void 0===e?void 0:e.FabricConfig;return null!==(t=null==n?void 0:n.fontBaseUrl)&&void 0!==t?t:"https://static2.sharepointonline.com/files/fabric/assets"}());var ka={s2:"4px",s1:"8px",m:"16px",l1:"20px",l2:"32px"};var Sa=kr(),wa=Zn((function(e,t){return function(e,t){void 0===e&&(e={}),void 0===t&&(t=!1);var n=!!e.isInverted;return function(e,t){var n,o,r;void 0===t&&(t={});var i=ya({},e,t,{semanticColors:Ca(t.palette,t.effects,t.semanticColors,void 0===t.isInverted?e.isInverted:t.isInverted)});if((null===(n=t.palette)||void 0===n?void 0:n.themePrimary)&&!(null===(o=t.palette)||void 0===o?void 0:o.accent)&&(i.palette.accent=t.palette.themePrimary),t.defaultFontStyle)for(var a=0,s=Object.keys(i.fonts);a<s.length;a++){var l=s[a];i.fonts[l]=ya(i.fonts[l],t.defaultFontStyle,null===(r=null==t?void 0:t.fonts)||void 0===r?void 0:r[l])}return i}({palette:oa,effects:ua,fonts:ma,spacing:ka,isInverted:n,disableGlobalClassNames:!1,semanticColors:_a(oa,ua,void 0,n,t),rtl:void 0},e)}(H(H({},e),{rtl:t}))})),xa=e.forwardRef((function(t,n){var o=t.className,r=t.theme,i=t.applyTheme,a=t.applyThemeToBody,s=t.styles,l=Sa(s,{theme:r,applyTheme:i,className:o}),u=e.useRef(null);return function(t,n,o){var r=n.bodyThemed;e.useEffect((function(){if(t){var e=No(o.current);if(e)return e.body.classList.add(r),function(){e.body.classList.remove(r)}}}),[r,t,o])}(a,l,u),Pr(u),e.createElement(e.Fragment,null,function(t,n,o,r){var i=n.root,a=t.as,s=void 0===a?"div":a,l=t.dir,u=t.theme,c=wo(t,So,["dir"]),d=function(e){var t=e.theme,n=e.dir,o=Uo(t)?"rtl":"ltr",r=Uo()?"rtl":"ltr",i=n||o;return{rootDir:i!==o||i!==r?i:n,needsTheme:i!==o}}(t),p=d.rootDir,f=d.needsTheme,h=e.createElement(s,H({dir:p},c,{className:i,ref:Gi(o,r)}));return f&&(h=e.createElement(na,{settings:{theme:wa(u,"rtl"===l)}},h)),h}(t,l,u,n))}));xa.displayName="FabricBase";var Ea,Ia={fontFamily:"inherit"},Da={root:"ms-Fabric",bodyThemed:"ms-Fabric-bodyThemed"},Ra=vr(xa,(function(e){var t=e.theme,n=e.className,o=e.applyTheme;return{root:[Nt(Da,t).root,t.fonts.medium,{color:t.palette.neutralPrimary,selectors:{"& button":Ia,"& input":Ia,"& textarea":Ia}},o&&{color:t.semanticColors.bodyText,backgroundColor:t.semanticColors.bodyBackground},n],bodyThemed:[{backgroundColor:t.semanticColors.bodyBackground}]}}),void 0,{scope:"Fabric"}),Ta={},Pa=e.createContext({window:"object"==typeof window?window:void 0}),Ma=function(){return e.useContext(Pa).window},Fa=function(){var t;return null===(t=e.useContext(Pa).window)||void 0===t?void 0:t.document},La=kr(),Aa=e.forwardRef((function(t,o){var r=e.useRef(null),i=Gi(r,o),a=e.useRef(),s=e.useState(!1),l=s[0],u=s[1],c=Fa(),d=t.eventBubblingEnabled,p=t.styles,f=t.theme,h=t.className,m=t.children,g=t.hostId,v=t.onLayerDidMount,y=void 0===v?function(){}:v,b=t.onLayerMounted,_=void 0===b?function(){}:b,C=t.onLayerWillUnmount,k=t.insertFirst,S=La(p,{theme:f,className:h,isNotHost:!g}),w=function(){null==C||C();var e=a.current;a.current=void 0,e&&e.parentNode&&e.parentNode.removeChild(e)},x=function(){var e=function(){if(c)return g?c.getElementById(g):c.body}();if(c&&e){w();var t=c.createElement("div");t.className=S.root,t.setAttribute(xi,"true"),function(e,t){var n=e,o=t;n._virtual||(n._virtual={children:[]});var r=n._virtual.parent;if(r&&r!==t){var i=r._virtual.children.indexOf(n);i>-1&&r._virtual.children.splice(i,1)}n._virtual.parent=o||void 0,o&&(o._virtual||(o._virtual={children:[]}),o._virtual.children.push(n))}(t,r.current),k?e.insertBefore(t,e.firstChild):e.appendChild(t),a.current=t,u(!0)}};return e.useLayoutEffect((function(){return x(),g&&function(e,t){Ta[e]||(Ta[e]=[]),Ta[e].push(t)}(g,x),function(){w(),g&&function(e,t){if(Ta[e]){var n=Ta[e].indexOf(t);n>=0&&(Ta[e].splice(n,1),0===Ta[e].length&&delete Ta[e])}}(g,x)}}),[g]),e.useEffect((function(){a.current&&l&&(null==_||_(),null==y||y(),u(!1))}),[l,_,y]),e.createElement("span",{className:"ms-layer",ref:i},a.current&&n.createPortal(e.createElement(Ra,H({},!d&&(Ea||(Ea={},["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onTouchMove","onTouchStart","onTouchCancel","onTouchEnd","onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onInvalid","onSubmit"].forEach((function(e){return Ea[e]=Ba}))),Ea),{className:S.content}),m),a.current))}));Aa.displayName="LayerBase";var Na,Ba=function(e){e.eventPhase===Event.BUBBLING_PHASE&&"mouseenter"!==e.type&&"mouseleave"!==e.type&&"touchstart"!==e.type&&"touchend"!==e.type&&e.stopPropagation()},Ha={root:"ms-Layer",rootNoHost:"ms-Layer--fixed",content:"ms-Layer-content"},Oa=vr(Aa,(function(e){var t=e.className,n=e.isNotHost,o=e.theme,r=Nt(Ha,o);return{root:[r.root,o.fonts.medium,n&&[r.rootNoHost,{position:"fixed",zIndex:kt.Layer,top:0,left:0,bottom:0,right:0,visibility:"hidden"}],t],content:[r.content,{visibility:"visible"}]}}),void 0,{scope:"Layer",fields:["hostId","theme","styles"]}),za=function(t){var n=t.count,o=t.indentWidth,r=void 0===o?36:o,i=t.role,a=void 0===i?"presentation":i,s=n*r;return n>0?e.createElement("span",{className:"ms-GroupSpacer",style:{display:"inline-block",width:s},role:a}):null};!function(e){e[e.hidden=0]="hidden",e[e.visible=1]="visible"}(Na||(Na={}));var Wa=Qn((function(e){return Qn((function(t){var n=Qn((function(e){return function(n){return t(n,e)}}));return function(o,r){return e(o,r?n(r):t)}}))}));function Ua(e,t){return Wa(e)(t)}var Va={label:no,audio:oo,video:ro,ol:io,li:ao,a:so,button:lo,input:uo,textarea:co,select:po,option:fo,table:ho,tr:mo,th:go,td:vo,colGroup:yo,col:bo,form:_o,iframe:Co,img:ko},Ga=kr(),ja=e.forwardRef((function(t,n){var o=t.checked,r=void 0!==o&&o,i=t.className,a=t.theme,s=t.styles,l=t.useFastIcons,u=void 0===l||l,c=Ga(s,{theme:a,className:i,checked:r}),d=u?Io:Xi;return e.createElement("div",{className:c.root,ref:n},e.createElement(d,{iconName:"CircleRing",className:c.circle}),e.createElement(d,{iconName:"StatusCircleCheckmark",className:c.check}))}));ja.displayName="CheckBase";var Ka,qa,Za={root:"ms-Check",circle:"ms-Check-circle",check:"ms-Check-check",checkHost:"ms-Check-checkHost"},Qa=vr(ja,(function(e){var t,n,o,r,i,a=e.height,s=void 0===a?e.checkBoxHeight||"18px":a,l=e.checked,u=e.className,c=e.theme,d=c.palette,p=c.semanticColors,f=c.fonts,h=Uo(c),m=Nt(Za,c),g={fontSize:s,position:"absolute",left:0,top:0,width:s,height:s,textAlign:"center",display:"inline-flex",alignItems:"center",justifyContent:"center",verticalAlign:"middle"};return{root:[m.root,f.medium,{lineHeight:"1",width:s,height:s,verticalAlign:"top",position:"relative",userSelect:"none",selectors:(t={":before":{content:'""',position:"absolute",top:"1px",right:"1px",bottom:"1px",left:"1px",borderRadius:"50%",opacity:1,background:p.bodyBackground}},t["."+m.checkHost+":hover &, ."+m.checkHost+":focus &, &:hover, &:focus"]={opacity:1},t)},l&&["is-checked",{selectors:{":before":{background:d.themePrimary,opacity:1,selectors:(n={},n[St]={background:"Window"},n)}}}],u],circle:[m.circle,g,{color:d.neutralSecondary,selectors:(o={},o[St]={color:"WindowText"},o)},l&&{color:d.white}],check:[m.check,g,{opacity:0,color:d.neutralSecondary,fontSize:_t.medium,left:h?"-0.5px":".5px",top:"-1px",selectors:(r={":hover":{opacity:1}},r[St]=H({},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),r)},l&&{opacity:1,color:d.white,fontWeight:900,selectors:(i={},i[St]={border:"none",color:"WindowText"},i)}],checkHost:m.checkHost}}),void 0,{scope:"Check"},!0),Ya={root:"ms-Link"},$a={root:"ms-DetailsRow",compact:"ms-DetailsList--Compact",cell:"ms-DetailsRow-cell",cellAnimation:"ms-DetailsRow-cellAnimation",cellCheck:"ms-DetailsRow-cellCheck",check:"ms-DetailsRow-check",cellMeasurer:"ms-DetailsRow-cellMeasurer",listCellFirstChild:"ms-List-cell:first-child",isContentUnselectable:"is-contentUnselectable",isSelected:"is-selected",isCheckVisible:"is-check-visible",isRowHeader:"is-row-header",fields:"ms-DetailsRow-fields"},Xa={cellLeftPadding:12,cellRightPadding:8,cellExtraRightPadding:24},Ja={rowHeight:42,compactRowHeight:32},es=H(H({},Ja),{rowVerticalPadding:11,compactRowVerticalPadding:6}),ts={tooltipHost:"ms-TooltipHost",root:"ms-DetailsHeader",cell:"ms-DetailsHeader-cell",cellIsCheck:"ms-DetailsHeader-cellIsCheck",collapseButton:"ms-DetailsHeader-collapseButton",isCollapsed:"is-collapsed",isAllSelected:"is-allSelected",isSelectAllHidden:"is-selectAllHidden",isResizingColumn:"is-resizingColumn",cellSizer:"ms-DetailsHeader-cellSizer",isResizing:"is-resizing",dropHintCircleStyle:"ms-DetailsHeader-dropHintCircleStyle",dropHintCaretStyle:"ms-DetailsHeader-dropHintCaretStyle",dropHintLineStyle:"ms-DetailsHeader-dropHintLineStyle",cellTitle:"ms-DetailsHeader-cellTitle",cellName:"ms-DetailsHeader-cellName",filterChevron:"ms-DetailsHeader-filterChevron",gripperBarVertical:"ms-DetailsColumn-gripperBarVertical",checkTooltip:"ms-DetailsHeader-checkTooltip",check:"ms-DetailsHeader-check"},ns=function(e){var t=e.theme,n=e.cellStyleProps,o=void 0===n?Xa:n,r=t.semanticColors;return[Nt(ts,t).cell,xt(t),{color:r.bodyText,position:"relative",display:"inline-block",boxSizing:"border-box",padding:"0 "+o.cellRightPadding+"px 0 "+o.cellLeftPadding+"px",lineHeight:"inherit",margin:"0",height:42,verticalAlign:"top",whiteSpace:"nowrap",textOverflow:"ellipsis",textAlign:"left"}]},os={root:"ms-DetailsRow-check",isDisabled:"ms-DetailsRow-check--isDisabled",isHeader:"ms-DetailsRow-check--isHeader"},rs="change";!function(e){e[e.none=0]="none",e[e.single=1]="single",e[e.multiple=2]="multiple"}(Ka||(Ka={})),function(e){e[e.horizontal=0]="horizontal",e[e.vertical=1]="vertical"}(qa||(qa={}));var is=kr(),as=e.memo((function(t){return e.createElement(Qa,{theme:t.theme,checked:t.checked,className:t.className,useFastIcons:!0})}));function ss(t){return e.createElement(Qa,{checked:t.checked})}function ls(t){return e.createElement(as,{theme:t.theme,checked:t.checked})}var us,cs=vr((function(t){var n=t.isVisible,o=void 0!==n&&n,r=t.canSelect,i=void 0!==r&&r,a=t.anySelected,s=void 0!==a&&a,l=t.selected,u=void 0!==l&&l,c=t.selectionMode,d=t.isHeader,p=void 0!==d&&d,f=t.className,h=(t.checkClassName,t.styles),m=t.theme,g=t.compact,v=t.onRenderDetailsCheckbox,y=t.useFastIcons,b=void 0===y||y,_=O(t,["isVisible","canSelect","anySelected","selected","selectionMode","isHeader","className","checkClassName","styles","theme","compact","onRenderDetailsCheckbox","useFastIcons"]),C=b?ls:ss,k=v?Ua(v,C):C,S=is(h,{theme:m,canSelect:i,selected:u,anySelected:s,className:f,isHeader:p,isVisible:o,compact:g}),w={checked:u,theme:m},x=function(e,t,n){return wo(t,Va.div||to,["aria-label","aria-labelledby","aria-describedby"])}(0,_),E=c===Ka.single?"radio":"checkbox";return i?e.createElement("div",H({},_,{role:E,className:xo(S.root,S.check),"aria-checked":u,"data-selection-toggle":!0,"data-automationid":"DetailsRowCheck",tabIndex:-1}),k(w)):e.createElement("div",H({},x,{className:xo(S.root,S.check)}))}),(function(e){var t=e.theme,n=e.className,o=e.isHeader,r=e.selected,i=e.anySelected,a=e.canSelect,s=e.compact,l=e.isVisible,u=Nt(os,t),c=o?42:s?Ja.compactRowHeight:Ja.rowHeight,d=l||r||i;return{root:[u.root,n],check:[!a&&u.isDisabled,o&&u.isHeader,xt(t),t.fonts.small,Za.checkHost,{display:"flex",alignItems:"center",justifyContent:"center",cursor:"default",boxSizing:"border-box",verticalAlign:"top",background:"none",backgroundColor:"transparent",border:"none",opacity:d?1:0,height:c,width:48,padding:0,margin:0}],isDisabled:[]}}),void 0,{scope:"DetailsRowCheck"},!0),ds=function(){function e(e){this._selection=e.selection,this._dragEnterCounts={},this._activeTargets={},this._lastId=0,this._initialized=!1}return e.prototype.dispose=function(){this._events&&this._events.dispose()},e.prototype.subscribe=function(e,t,n){var o=this;if(!this._initialized){this._events=new Jr(this);var r=No();r&&(this._events.on(r.body,"mouseup",this._onMouseUp.bind(this),!0),this._events.on(r,"mouseup",this._onDocumentMouseUp.bind(this),!0)),this._initialized=!0}var i,a,s,l,u,c,d,p,f,h,m=n.key,g=void 0===m?""+ ++this._lastId:m,v=[];if(n&&e){var y=n.eventMap,b=n.context,_=n.updateDropState,C={root:e,options:n,key:g};if(p=this._isDraggable(C),f=this._isDroppable(C),(p||f)&&y)for(var k=0,S=y;k<S.length;k++){var w=S[k],x={callback:w.callback.bind(null,b),eventName:w.eventName};v.push(x),this._events.on(e,x.eventName,x.callback)}f&&(a=function(e){e.isHandled||(e.isHandled=!0,o._dragEnterCounts[g]--,0===o._dragEnterCounts[g]&&_(!1,e))},s=function(e){e.preventDefault(),e.isHandled||(e.isHandled=!0,o._dragEnterCounts[g]++,1===o._dragEnterCounts[g]&&_(!0,e))},l=function(e){o._dragEnterCounts[g]=0,_(!1,e)},u=function(e){o._dragEnterCounts[g]=0,_(!1,e),n.onDrop&&n.onDrop(n.context.data,e)},c=function(e){e.preventDefault(),n.onDragOver&&n.onDragOver(n.context.data,e)},this._dragEnterCounts[g]=0,t.on(e,"dragenter",s),t.on(e,"dragleave",a),t.on(e,"dragend",l),t.on(e,"drop",u),t.on(e,"dragover",c)),p&&(d=this._onMouseDown.bind(this,C),l=this._onDragEnd.bind(this,C),i=function(t){var r=n;r&&r.onDragStart&&r.onDragStart(r.context.data,r.context.index,o._selection.getSelection(),t),o._isDragging=!0,t.dataTransfer&&t.dataTransfer.setData("id",e.id)},t.on(e,"dragstart",i),t.on(e,"mousedown",d),t.on(e,"dragend",l)),h={target:C,dispose:function(){if(o._activeTargets[g]===h&&delete o._activeTargets[g],e){for(var n=0,r=v;n<r.length;n++){var m=r[n];o._events.off(e,m.eventName,m.callback)}f&&(t.off(e,"dragenter",s),t.off(e,"dragleave",a),t.off(e,"dragend",l),t.off(e,"dragover",c),t.off(e,"drop",u)),p&&(t.off(e,"dragstart",i),t.off(e,"mousedown",d),t.off(e,"dragend",l))}}},this._activeTargets[g]=h}return{key:g,dispose:function(){h&&h.dispose()}}},e.prototype.unsubscribe=function(e,t){var n=this._activeTargets[t];n&&n.dispose()},e.prototype._onDragEnd=function(e,t){var n=e.options;n.onDragEnd&&n.onDragEnd(n.context.data,t)},e.prototype._onMouseUp=function(e){if(this._isDragging=!1,this._dragData){for(var t=0,n=Object.keys(this._activeTargets);t<n.length;t++){var o=n[t],r=this._activeTargets[o];r.target.root&&(this._events.off(r.target.root,"mousemove"),this._events.off(r.target.root,"mouseleave"))}this._dragData.dropTarget&&(Jr.raise(this._dragData.dropTarget.root,"dragleave"),Jr.raise(this._dragData.dropTarget.root,"drop"))}this._dragData=null},e.prototype._onDocumentMouseUp=function(e){var t=No();t&&e.target===t.documentElement&&this._onMouseUp(e)},e.prototype._onMouseMove=function(e,t){var n=t.buttons,o=void 0===n?1:n;if(this._dragData&&1!==o)this._onMouseUp(t);else{var r=e.root,i=e.key;this._isDragging&&this._isDroppable(e)&&this._dragData&&this._dragData.dropTarget&&this._dragData.dropTarget.key!==i&&!this._isChild(r,this._dragData.dropTarget.root)&&this._dragEnterCounts[this._dragData.dropTarget.key]>0&&(Jr.raise(this._dragData.dropTarget.root,"dragleave"),Jr.raise(r,"dragenter"),this._dragData.dropTarget=e)}},e.prototype._onMouseLeave=function(e,t){this._isDragging&&this._dragData&&this._dragData.dropTarget&&this._dragData.dropTarget.key===e.key&&(Jr.raise(e.root,"dragleave"),this._dragData.dropTarget=void 0)},e.prototype._onMouseDown=function(e,t){if(0===t.button)if(this._isDraggable(e)){this._dragData={clientX:t.clientX,clientY:t.clientY,eventTarget:t.target,dragTarget:e};for(var n=0,o=Object.keys(this._activeTargets);n<o.length;n++){var r=o[n],i=this._activeTargets[r];i.target.root&&(this._events.on(i.target.root,"mousemove",this._onMouseMove.bind(this,i.target)),this._events.on(i.target.root,"mouseleave",this._onMouseLeave.bind(this,i.target)))}}else this._dragData=null},e.prototype._isChild=function(e,t){for(;t&&t.parentElement;){if(t.parentElement===e)return!0;t=t.parentElement}return!1},e.prototype._isDraggable=function(e){var t=e.options;return!(!t.canDrag||!t.canDrag(t.context.data))},e.prototype._isDroppable=function(e){var t=e.options,n=this._dragData&&this._dragData.dragTarget?this._dragData.dragTarget.options.context:void 0;return!(!t.canDrop||!t.canDrop(t.context,n))},e}(),ps=kr(),fs=function(t){return function(n){return n?n.column.isIconOnly?e.createElement("span",{className:t.accessibleLabel},n.column.name):e.createElement(e.Fragment,null,n.column.name):null}},hs=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._onRenderFilterIcon=function(t){return function(t){var n=t.columnProps,o=O(t,["columnProps"]),r=(null==n?void 0:n.useFastIcons)?Io:Xi;return e.createElement(r,H({},o))}},o._onRenderColumnHeaderTooltip=function(t){return e.createElement("span",{className:t.hostClassName},t.children)},o._onColumnClick=function(e){var t=o.props,n=t.onColumnClick,r=t.column;r.columnActionsMode!==Ur.disabled&&(r.onColumnClick&&r.onColumnClick(e,r),n&&n(e,r))},o._onDragStart=function(e,t,n,r){var i=o._classNames;t&&(o._updateHeaderDragInfo(t),o._root.current.classList.add(i.borderWhileDragging),o._async.setTimeout((function(){o._root.current&&o._root.current.classList.add(i.noBorderWhileDragging)}),20))},o._onDragEnd=function(e,t){var n=o._classNames;t&&o._updateHeaderDragInfo(-1,t),o._root.current.classList.remove(n.borderWhileDragging),o._root.current.classList.remove(n.noBorderWhileDragging)},o._updateHeaderDragInfo=function(e,t){o.props.setDraggedItemIndex&&o.props.setDraggedItemIndex(e),o.props.updateDragInfo&&o.props.updateDragInfo({itemIndex:e},t)},o._onColumnContextMenu=function(e){var t=o.props,n=t.onColumnContextMenu,r=t.column;r.onColumnContextMenu&&(r.onColumnContextMenu(r,e),e.preventDefault()),n&&(n(r,e),e.preventDefault())},o._onRootMouseDown=function(e){o.props.isDraggable&&0===e.button&&e.stopPropagation()},Br(o),o._async=new qr(o),o._events=new Jr(o),o}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.column,o=t.columnIndex,r=t.parentId,i=t.isDraggable,a=t.styles,s=t.theme,l=t.cellStyleProps,u=void 0===l?Xa:l,c=t.useFastIcons,d=void 0===c||c,p=this.props.onRenderColumnHeaderTooltip,f=void 0===p?this._onRenderColumnHeaderTooltip:p;this._classNames=ps(a,{theme:s,headerClassName:n.headerClassName,iconClassName:n.iconClassName,isActionable:n.columnActionsMode!==Ur.disabled,isEmpty:!n.name,isIconVisible:n.isSorted||n.isGrouped||n.isFiltered,isPadded:n.isPadded,isIconOnly:n.isIconOnly,cellStyleProps:u,transitionDurationDrag:200,transitionDurationDrop:1500});var h=this._classNames,m=d?Io:Xi,g=n.onRenderFilterIcon?Ua(n.onRenderFilterIcon,this._onRenderFilterIcon(this._classNames)):this._onRenderFilterIcon(this._classNames),v=n.onRenderHeader?Ua(n.onRenderHeader,fs(this._classNames)):fs(this._classNames),y=n.columnActionsMode!==Ur.disabled&&(void 0!==n.onColumnClick||void 0!==this.props.onColumnClick),b={"aria-label":n.isIconOnly?n.name:void 0,"aria-labelledby":n.isIconOnly?void 0:r+"-"+n.key+"-name","aria-describedby":!this.props.onRenderColumnHeaderTooltip&&this._hasAccessibleLabel()?r+"-"+n.key+"-tooltip":void 0};return e.createElement(e.Fragment,null,e.createElement("div",H({key:n.key,ref:this._root,role:"columnheader"},!y&&b,{"aria-sort":n.isSorted?n.isSortedDescending?"descending":"ascending":"none","aria-colindex":o,"data-is-focusable":y||n.columnActionsMode===Ur.disabled?void 0:"true",className:h.root,"data-is-draggable":i,draggable:i,style:{width:n.calculatedWidth+u.cellLeftPadding+u.cellRightPadding+(n.isPadded?u.cellExtraRightPadding:0)},"data-automationid":"ColumnsHeaderColumn","data-item-key":n.key}),i&&e.createElement(m,{iconName:"GripperBarVertical",className:h.gripperBarVerticalStyle}),f({hostClassName:h.cellTooltip,id:r+"-"+n.key+"-tooltip",setAriaDescribedBy:!1,column:n,content:n.columnActionsMode!==Ur.disabled?n.ariaLabel:"",children:e.createElement("span",H({id:r+"-"+n.key,className:h.cellTitle,"data-is-focusable":y&&n.columnActionsMode!==Ur.disabled?"true":void 0,role:y?"button":void 0},y&&b,{onContextMenu:this._onColumnContextMenu,onClick:this._onColumnClick,"aria-haspopup":n.columnActionsMode===Ur.hasDropdown?"menu":void 0,"aria-expanded":n.columnActionsMode===Ur.hasDropdown?!!n.isMenuOpen:void 0}),e.createElement("span",{id:r+"-"+n.key+"-name",className:h.cellName},(n.iconName||n.iconClassName)&&e.createElement(m,{className:h.iconClassName,iconName:n.iconName}),v(this.props)),n.isFiltered&&e.createElement(m,{className:h.nearIcon,iconName:"Filter"}),n.isSorted&&e.createElement(m,{className:h.sortIcon,iconName:n.isSortedDescending?"SortDown":"SortUp"}),n.isGrouped&&e.createElement(m,{className:h.nearIcon,iconName:"GroupedDescending"}),n.columnActionsMode===Ur.hasDropdown&&!n.isIconOnly&&g({"aria-hidden":!0,columnProps:this.props,className:h.filterChevron,iconName:"ChevronDown"}))},this._onRenderColumnHeaderTooltip)),this.props.onRenderColumnHeaderTooltip?null:this._renderAccessibleLabel())},n.prototype.componentDidMount=function(){var e=this;this.props.dragDropHelper&&this.props.isDraggable&&this._addDragDropHandling();var t=this._classNames;this.props.isDropped&&(this._root.current&&(this._root.current.classList.add(t.borderAfterDropping),this._async.setTimeout((function(){e._root.current&&e._root.current.classList.add(t.noBorderAfterDropping)}),20)),this._async.setTimeout((function(){e._root.current&&(e._root.current.classList.remove(t.borderAfterDropping),e._root.current.classList.remove(t.noBorderAfterDropping))}),1520))},n.prototype.componentWillUnmount=function(){this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this._async.dispose(),this._events.dispose()},n.prototype.componentDidUpdate=function(){!this._dragDropSubscription&&this.props.dragDropHelper&&this.props.isDraggable&&this._addDragDropHandling(),this._dragDropSubscription&&!this.props.isDraggable&&(this._dragDropSubscription.dispose(),this._events.off(this._root.current,"mousedown"),delete this._dragDropSubscription)},n.prototype._getColumnDragDropOptions=function(){var e=this,t=this.props.columnIndex;return{selectionIndex:t,context:{data:t,index:t},canDrag:function(){return e.props.isDraggable},canDrop:function(){return!1},onDragStart:this._onDragStart,updateDropState:function(){},onDrop:function(){},onDragEnd:this._onDragEnd}},n.prototype._hasAccessibleLabel=function(){var e=this.props.column;return!!(e.ariaLabel||e.filterAriaLabel||e.sortAscendingAriaLabel||e.sortDescendingAriaLabel||e.groupAriaLabel)},n.prototype._renderAccessibleLabel=function(){var t=this.props,n=t.column,o=t.parentId,r=this._classNames;return this._hasAccessibleLabel()&&!this.props.onRenderColumnHeaderTooltip?e.createElement("label",{key:n.key+"_label",id:o+"-"+n.key+"-tooltip",className:r.accessibleLabel},n.ariaLabel,n.isFiltered&&n.filterAriaLabel||null,n.isSorted&&(n.isSortedDescending?n.sortDescendingAriaLabel:n.sortAscendingAriaLabel)||null,n.isGrouped&&n.groupAriaLabel||null):null},n.prototype._addDragDropHandling=function(){this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getColumnDragDropOptions()),this._events.on(this._root.current,"mousedown",this._onRootMouseDown)},n}(e.Component),ms={isActionable:"is-actionable",cellIsCheck:"ms-DetailsHeader-cellIsCheck",collapseButton:"ms-DetailsHeader-collapseButton",isCollapsed:"is-collapsed",isAllSelected:"is-allSelected",isSelectAllHidden:"is-selectAllHidden",isResizingColumn:"is-resizingColumn",isEmpty:"is-empty",isIconVisible:"is-icon-visible",cellSizer:"ms-DetailsHeader-cellSizer",isResizing:"is-resizing",dropHintCircleStyle:"ms-DetailsHeader-dropHintCircleStyle",dropHintLineStyle:"ms-DetailsHeader-dropHintLineStyle",cellTitle:"ms-DetailsHeader-cellTitle",cellName:"ms-DetailsHeader-cellName",filterChevron:"ms-DetailsHeader-filterChevron",gripperBarVerticalStyle:"ms-DetailsColumn-gripperBar",nearIcon:"ms-DetailsColumn-nearIcon"},gs=vr(hs,(function(e){var t,n=e.theme,o=e.headerClassName,r=e.iconClassName,i=e.isActionable,a=e.isEmpty,s=e.isIconVisible,l=e.isPadded,u=e.isIconOnly,c=e.cellStyleProps,d=void 0===c?Xa:c,p=e.transitionDurationDrag,f=e.transitionDurationDrop,h=n.semanticColors,m=n.palette,g=n.fonts,v=Nt(ms,n),y={iconForegroundColor:h.bodySubtext,headerForegroundColor:h.bodyText,headerBackgroundColor:h.bodyBackground,dropdownChevronForegroundColor:m.neutralSecondary,resizerColor:m.neutralTertiaryAlt},b={color:y.iconForegroundColor,opacity:1,paddingLeft:8},_={outline:"1px solid "+m.themePrimary},C={outlineColor:"transparent"};return{root:[ns(e),g.small,i&&[v.isActionable,{selectors:{":hover":{color:h.bodyText,background:h.listHeaderBackgroundHovered},":active":{background:h.listHeaderBackgroundPressed}}}],a&&[v.isEmpty,{textOverflow:"clip"}],s&&v.isIconVisible,l&&{paddingRight:d.cellExtraRightPadding+d.cellRightPadding},{selectors:{':hover i[data-icon-name="GripperBarVertical"]':{display:"block"}}},o],gripperBarVerticalStyle:{display:"none",position:"absolute",textAlign:"left",color:m.neutralTertiary,left:1},nearIcon:[v.nearIcon,b],sortIcon:[b,{paddingLeft:4,position:"relative",top:1}],iconClassName:[{color:y.iconForegroundColor,opacity:1},r],filterChevron:[v.filterChevron,{color:y.dropdownChevronForegroundColor,paddingLeft:6,verticalAlign:"middle",fontSize:g.small.fontSize}],cellTitle:[v.cellTitle,xt(n),H({display:"flex",flexDirection:"row",justifyContent:"flex-start",alignItems:"stretch",boxSizing:"border-box",overflow:"hidden",padding:"0 "+d.cellRightPadding+"px 0 "+d.cellLeftPadding+"px"},u?{alignContent:"flex-end",maxHeight:"100%",flexWrap:"wrap-reverse"}:{})],cellName:[v.cellName,{flex:"0 1 auto",overflow:"hidden",textOverflow:"ellipsis",fontWeight:bt.semibold,fontSize:g.medium.fontSize},u&&{selectors:(t={},t["."+v.nearIcon]={paddingLeft:0},t)}],cellTooltip:{display:"block",position:"absolute",top:0,left:0,bottom:0,right:0},accessibleLabel:Et,borderWhileDragging:_,noBorderWhileDragging:[C,{transition:"outline "+p+"ms ease"}],borderAfterDropping:_,noBorderAfterDropping:[C,{transition:"outline  "+f+"ms ease"}]}}),void 0,{scope:"DetailsColumn"});!function(e){e[e.none=0]="none",e[e.hidden=1]="hidden",e[e.visible=2]="visible"}(us||(us={}));var vs=kr(),ys=[],bs=function(t){function n(n){var o=t.call(this,n)||this;return o._rootElement=e.createRef(),o._rootComponent=e.createRef(),o._draggedColumnIndex=-1,o._dropHintDetails={},o._updateDroppingState=function(e,t){o._draggedColumnIndex>=0&&"drop"!==t.type&&!e&&o._resetDropHints()},o._onDragOver=function(e,t){o._draggedColumnIndex>=0&&(t.stopPropagation(),o._computeDropHintToBeShown(t.clientX))},o._onDrop=function(e,t){var n=o._getColumnReorderProps();if(o._draggedColumnIndex>=0&&t){var r=o._draggedColumnIndex>o._currentDropHintIndex?o._currentDropHintIndex:o._currentDropHintIndex-1,i=o._isValidCurrentDropHintIndex();if(t.stopPropagation(),i)if(o._onDropIndexInfo.sourceIndex=o._draggedColumnIndex,o._onDropIndexInfo.targetIndex=r,n.onColumnDrop){var a={draggedIndex:o._draggedColumnIndex,targetIndex:r};n.onColumnDrop(a)}else n.handleColumnReorder&&n.handleColumnReorder(o._draggedColumnIndex,r)}o._resetDropHints(),o._dropHintDetails={},o._draggedColumnIndex=-1},o._updateDragInfo=function(e,t){var n=o._getColumnReorderProps(),r=e.itemIndex;if(r>=0)o._draggedColumnIndex=o._isCheckboxColumnHidden()?r-1:r-2,o._getDropHintPositions(),n.onColumnDragStart&&n.onColumnDragStart(!0);else if(t&&o._draggedColumnIndex>=0&&(o._resetDropHints(),o._draggedColumnIndex=-1,o._dropHintDetails={},n.onColumnDragEnd)){var i=o._isEventOnHeader(t);n.onColumnDragEnd({dropLocation:i},t)}},o._getDropHintPositions=function(){for(var e,t=o.props.columns,n=void 0===t?ys:t,r=o._getColumnReorderProps(),i=0,a=0,s=r.frozenColumnCountFromStart||0,l=r.frozenColumnCountFromEnd||0,u=s;u<n.length-l+1;u++)if(o._rootElement.current){var c=o._rootElement.current.querySelectorAll("#columnDropHint_"+u)[0];if(c)if(u===s)i=c.offsetLeft,a=c.offsetLeft,e=c;else{var d=(c.offsetLeft+i)/2;o._dropHintDetails[u-1]={originX:i,startX:a,endX:d,dropHintElementRef:e},a=d,e=c,i=c.offsetLeft,u===n.length-l&&(o._dropHintDetails[u]={originX:i,startX:a,endX:c.offsetLeft,dropHintElementRef:e})}}},o._computeDropHintToBeShown=function(e){var t=Uo(o.props.theme);if(o._rootElement.current){var n=e-o._rootElement.current.getBoundingClientRect().left,r=o._currentDropHintIndex;if(o._isValidCurrentDropHintIndex()&&_s(t,n,o._dropHintDetails[r].startX,o._dropHintDetails[r].endX))return;var i=o.props.columns,a=void 0===i?ys:i,s=o._getColumnReorderProps(),l=s.frozenColumnCountFromStart||0,u=s.frozenColumnCountFromEnd||0,c=l,d=a.length-u,p=-1;if(Cs(t,n,o._dropHintDetails[c].endX)?p=c:ks(t,n,o._dropHintDetails[d].startX)?p=d:o._isValidCurrentDropHintIndex()&&(o._dropHintDetails[r+1]&&_s(t,n,o._dropHintDetails[r+1].startX,o._dropHintDetails[r+1].endX)?p=r+1:o._dropHintDetails[r-1]&&_s(t,n,o._dropHintDetails[r-1].startX,o._dropHintDetails[r-1].endX)&&(p=r-1)),-1===p)for(var f=l,h=d;f<h;){var m=Math.ceil((h+f)/2);if(_s(t,n,o._dropHintDetails[m].startX,o._dropHintDetails[m].endX)){p=m;break}Cs(t,n,o._dropHintDetails[m].originX)?h=m:ks(t,n,o._dropHintDetails[m].originX)&&(f=m)}p===o._draggedColumnIndex||p===o._draggedColumnIndex+1?o._isValidCurrentDropHintIndex()&&o._resetDropHints():r!==p&&p>=0&&(o._resetDropHints(),o._updateDropHintElement(o._dropHintDetails[p].dropHintElementRef,"inline-block"),o._currentDropHintIndex=p)}},o._renderColumnSizer=function(t){var n,r=t.columnIndex,i=o.props.columns,a=void 0===i?ys:i,s=a[r],l=o.state.columnResizeDetails,u=o._classNames;return s.isResizable?e.createElement("div",{key:s.key+"_sizer","aria-hidden":!0,role:"button","data-is-focusable":!1,onClick:Ss,"data-sizer-index":r,onBlur:o._onSizerBlur,className:xo(u.cellSizer,r<a.length-1?u.cellSizerStart:u.cellSizerEnd,(n={},n[u.cellIsResizing]=l&&l.columnIndex===r,n)),onDoubleClick:o._onSizerDoubleClick.bind(o,r)}):null},o._onRenderColumnHeaderTooltip=function(t){return e.createElement("span",{className:t.hostClassName},t.children)},o._onSelectAllClicked=function(){var e=o.props.selection;e&&e.toggleAllSelected()},o._onRootMouseDown=function(e){var t=e.target.getAttribute("data-sizer-index"),n=Number(t),r=o.props.columns,i=void 0===r?ys:r;null!==t&&0===e.button&&(o.setState({columnResizeDetails:{columnIndex:n,columnMinWidth:i[n].calculatedWidth,originX:e.clientX}}),e.preventDefault(),e.stopPropagation())},o._onRootMouseMove=function(e){var t=o.state,n=t.columnResizeDetails,r=t.isSizing;n&&!r&&e.clientX!==n.originX&&o.setState({isSizing:!0})},o._onRootKeyDown=function(e){var t=o.state,n=t.columnResizeDetails,r=t.isSizing,i=o.props,a=i.columns,s=void 0===a?ys:a,l=i.onColumnResized,u=e.target.getAttribute("data-sizer-index");if(u&&!r){var c=Number(u);if(n){var d=void 0;e.which===Ro?(o.setState({columnResizeDetails:void 0}),e.preventDefault(),e.stopPropagation()):e.which===Mo?d=Uo(o.props.theme)?1:-1:e.which===Lo&&(d=Uo(o.props.theme)?-1:1),d&&(e.shiftKey||(d*=10),o.setState({columnResizeDetails:H(H({},n),{columnMinWidth:n.columnMinWidth+d})}),l&&l(s[c],n.columnMinWidth+d,c),e.preventDefault(),e.stopPropagation())}else e.which===Ro&&(o.setState({columnResizeDetails:{columnIndex:c,columnMinWidth:s[c].calculatedWidth}}),e.preventDefault(),e.stopPropagation())}},o._onSizerMouseMove=function(e){var t=e.buttons,n=o.props,r=n.onColumnIsSizingChanged,i=n.onColumnResized,a=n.columns,s=void 0===a?ys:a,l=o.state.columnResizeDetails;if(void 0===t||1===t){if(e.clientX!==l.originX&&r&&r(s[l.columnIndex],!0),i){var u=e.clientX-l.originX;Uo(o.props.theme)&&(u=-u),i(s[l.columnIndex],l.columnMinWidth+u,l.columnIndex)}}else o._onSizerMouseUp(e)},o._onSizerBlur=function(e){o.state.columnResizeDetails&&o.setState({columnResizeDetails:void 0,isSizing:!1})},o._onSizerMouseUp=function(e){var t=o.props,n=t.columns,r=void 0===n?ys:n,i=t.onColumnIsSizingChanged,a=o.state.columnResizeDetails;o.setState({columnResizeDetails:void 0,isSizing:!1}),i&&i(r[a.columnIndex],!1)},o._onToggleCollapseAll=function(){var e=o.props.onToggleCollapseAll,t=!o.state.isAllCollapsed;o.setState({isAllCollapsed:t}),e&&e(t)},Br(o),o._events=new Jr(o),o.state={columnResizeDetails:void 0,isAllCollapsed:o.props.isAllCollapsed,isAllSelected:!!o.props.selection&&o.props.selection.isAllSelected()},o._onDropIndexInfo={sourceIndex:-1,targetIndex:-1},o._id=ni("header"),o._currentDropHintIndex=-1,o._dragDropHelper=new ds({selection:{getSelection:function(){}},minimumPixelsForDrag:o.props.minimumPixelsForDrag}),o}return B(n,t),n.prototype.componentDidMount=function(){var e=this.props.selection;this._events.on(e,rs,this._onSelectionChanged),this._rootElement.current&&(this._events.on(this._rootElement.current,"mousedown",this._onRootMouseDown),this._events.on(this._rootElement.current,"keydown",this._onRootKeyDown),this._getColumnReorderProps()&&(this._subscriptionObject=this._dragDropHelper.subscribe(this._rootElement.current,this._events,this._getHeaderDragDropOptions())))},n.prototype.componentDidUpdate=function(e){if(this._getColumnReorderProps()?!this._subscriptionObject&&this._rootElement.current&&(this._subscriptionObject=this._dragDropHelper.subscribe(this._rootElement.current,this._events,this._getHeaderDragDropOptions())):this._subscriptionObject&&(this._subscriptionObject.dispose(),delete this._subscriptionObject),this.props!==e&&this._onDropIndexInfo.sourceIndex>=0&&this._onDropIndexInfo.targetIndex>=0){var t=e.columns,n=void 0===t?ys:t,o=this.props.columns,r=void 0===o?ys:o;n[this._onDropIndexInfo.sourceIndex].key===r[this._onDropIndexInfo.targetIndex].key&&(this._onDropIndexInfo={sourceIndex:-1,targetIndex:-1})}this.props.isAllCollapsed!==e.isAllCollapsed&&this.setState({isAllCollapsed:this.props.isAllCollapsed})},n.prototype.componentWillUnmount=function(){this._subscriptionObject&&(this._subscriptionObject.dispose(),delete this._subscriptionObject),this._dragDropHelper.dispose(),this._events.dispose()},n.prototype.render=function(){var t=this,n=this.props,o=n.columns,r=void 0===o?ys:o,i=n.ariaLabel,a=n.ariaLabelForToggleAllGroupsButton,s=n.ariaLabelForSelectAllCheckbox,l=n.selectAllVisibility,u=n.ariaLabelForSelectionColumn,c=n.indentWidth,d=n.onColumnClick,p=n.onColumnContextMenu,f=n.onRenderColumnHeaderTooltip,h=void 0===f?this._onRenderColumnHeaderTooltip:f,m=n.styles,g=n.selectionMode,v=n.theme,y=n.onRenderDetailsCheckbox,b=n.groupNestingDepth,_=n.useFastIcons,C=n.checkboxVisibility,k=n.className,S=this.state,w=S.isAllSelected,x=S.columnResizeDetails,E=S.isSizing,I=S.isAllCollapsed,D=l!==us.none,R=l===us.hidden,T=C===Kr.always,P=this._getColumnReorderProps(),M=P&&P.frozenColumnCountFromStart?P.frozenColumnCountFromStart:0,F=P&&P.frozenColumnCountFromEnd?P.frozenColumnCountFromEnd:0;this._classNames=vs(m,{theme:v,isAllSelected:w,isSelectAllHidden:l===us.hidden,isResizingColumn:!!x&&E,isSizing:E,isAllCollapsed:I,isCheckboxHidden:R,className:k});var L=this._classNames,A=_?Io:Xi,N=Uo(v);return e.createElement(Vi,{role:"row","aria-label":i,className:L.root,componentRef:this._rootComponent,elementRef:this._rootElement,onMouseMove:this._onRootMouseMove,"data-automationid":"DetailsHeader",direction:ri.horizontal},D?[e.createElement("div",{key:"__checkbox",className:L.cellIsCheck,"aria-labelledby":this._id+"-checkTooltip",onClick:R?void 0:this._onSelectAllClicked,"aria-colindex":1,role:"columnheader"},h({hostClassName:L.checkTooltip,id:this._id+"-checkTooltip",setAriaDescribedBy:!1,content:s,children:e.createElement(cs,{id:this._id+"-check","aria-label":g===Ka.multiple?s:u,"data-is-focusable":!R||void 0,isHeader:!0,selected:w,anySelected:!1,canSelect:!R,className:L.check,onRenderDetailsCheckbox:y,useFastIcons:_,isVisible:T})},this._onRenderColumnHeaderTooltip)),this.props.onRenderColumnHeaderTooltip?null:s&&!R?e.createElement("label",{key:"__checkboxLabel",id:this._id+"-checkTooltip",className:L.accessibleLabel,"aria-hidden":!0},s):u&&R?e.createElement("label",{key:"__checkboxLabel",id:this._id+"-checkTooltip",className:L.accessibleLabel,"aria-hidden":!0},u):null]:null,b>0&&this.props.collapseAllVisibility===Na.visible?e.createElement("div",{className:L.cellIsGroupExpander,onClick:this._onToggleCollapseAll,"data-is-focusable":!0,"aria-label":a,"aria-expanded":!I,role:"columnheader"},e.createElement(A,{className:L.collapseButton,iconName:N?"ChevronLeftMed":"ChevronRightMed"})):null,e.createElement(za,{indentWidth:c,role:"gridcell",count:b-1}),r.map((function(n,o){var i=!!P&&o>=M&&o<r.length-F;return[P&&(i||o===r.length-F)&&t._renderDropHint(o),e.createElement(gs,{column:n,styles:n.styles,key:n.key,columnIndex:(D?2:1)+o,parentId:t._id,isDraggable:i,updateDragInfo:t._updateDragInfo,dragDropHelper:t._dragDropHelper,onColumnClick:d,onColumnContextMenu:p,onRenderColumnHeaderTooltip:t.props.onRenderColumnHeaderTooltip,isDropped:t._onDropIndexInfo.targetIndex===o,cellStyleProps:t.props.cellStyleProps,useFastIcons:_}),t._renderColumnDivider(o)]})),P&&0===F&&this._renderDropHint(r.length),E&&e.createElement(Oa,null,e.createElement("div",{className:L.sizingOverlay,onMouseMove:this._onSizerMouseMove,onMouseUp:this._onSizerMouseUp})))},n.prototype.focus=function(){var e;return!!(null===(e=this._rootComponent.current)||void 0===e?void 0:e.focus())},n.prototype._getColumnReorderProps=function(){var e=this.props,t=e.columnReorderOptions;return e.columnReorderProps||t&&H(H({},t),{onColumnDragEnd:void 0})},n.prototype._getHeaderDragDropOptions=function(){return{selectionIndex:1,context:{data:this,index:0},canDrag:function(){return!1},canDrop:function(){return!0},onDragStart:function(){},updateDropState:this._updateDroppingState,onDrop:this._onDrop,onDragEnd:function(){},onDragOver:this._onDragOver}},n.prototype._isValidCurrentDropHintIndex=function(){return this._currentDropHintIndex>=0},n.prototype._isCheckboxColumnHidden=function(){var e=this.props,t=e.selectionMode,n=e.checkboxVisibility;return t===Ka.none||n===Kr.hidden},n.prototype._resetDropHints=function(){this._currentDropHintIndex>=0&&(this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef,"none"),this._currentDropHintIndex=-1)},n.prototype._updateDropHintElement=function(e,t){e.childNodes[1].style.display=t,e.childNodes[0].style.display=t},n.prototype._isEventOnHeader=function(e){if(this._rootElement.current){var t=this._rootElement.current.getBoundingClientRect();if(e.clientX>t.left&&e.clientX<t.right&&e.clientY>t.top&&e.clientY<t.bottom)return Gr.header}},n.prototype._renderColumnDivider=function(e){var t=this.props.columns,n=(void 0===t?ys:t)[e],o=n.onRenderDivider;return o?o({column:n,columnIndex:e},this._renderColumnSizer):this._renderColumnSizer({column:n,columnIndex:e})},n.prototype._renderDropHint=function(t){var n=this._classNames,o=this.props.useFastIcons?Io:Xi;return e.createElement("div",{key:"dropHintKey",className:n.dropHintStyle,id:"columnDropHint_"+t},e.createElement("div",{role:"presentation",key:"dropHintCircleKey",className:n.dropHintCaretStyle,"data-is-focusable":!1,"data-sizer-index":t,"aria-hidden":!0},e.createElement(o,{iconName:"CircleShapeSolid"})),e.createElement("div",{key:"dropHintLineKey","aria-hidden":!0,"data-is-focusable":!1,"data-sizer-index":t,className:n.dropHintLineStyle}))},n.prototype._onSizerDoubleClick=function(e,t){var n=this.props,o=n.onColumnAutoResized,r=n.columns;o&&o((void 0===r?ys:r)[e],e)},n.prototype._onSelectionChanged=function(){var e=!!this.props.selection&&this.props.selection.isAllSelected();this.state.isAllSelected!==e&&this.setState({isAllSelected:e})},n.defaultProps={selectAllVisibility:us.visible,collapseAllVisibility:Na.visible,useFastIcons:!0},n}(e.Component);function _s(e,t,n,o){return e?t<=n&&t>=o:t>=n&&t<=o}function Cs(e,t,n){return e?t>=n:t<=n}function ks(e,t,n){return e?t<=n:t>=n}function Ss(e){e.stopPropagation()}var ws=vr(bs,(function(e){var t,n,o,r,i=e.theme,a=e.className,s=e.isAllSelected,l=e.isResizingColumn,u=e.isSizing,c=e.isAllCollapsed,d=e.cellStyleProps,p=void 0===d?Xa:d,f=i.semanticColors,h=i.palette,m=i.fonts,g=Nt(ts,i),v={iconForegroundColor:f.bodySubtext,headerForegroundColor:f.bodyText,headerBackgroundColor:f.bodyBackground,resizerColor:h.neutralTertiaryAlt},y={opacity:1,transition:"opacity 0.3s linear"},b=ns(e);return{root:[g.root,m.small,{display:"inline-block",background:v.headerBackgroundColor,position:"relative",minWidth:"100%",verticalAlign:"top",height:42,lineHeight:42,whiteSpace:"nowrap",boxSizing:"content-box",paddingBottom:"1px",paddingTop:"16px",borderBottom:"1px solid "+f.bodyDivider,cursor:"default",userSelect:"none",selectors:(t={},t["&:hover ."+g.check]={opacity:1},t["& ."+g.tooltipHost+" ."+g.checkTooltip]={display:"block"},t)},s&&g.isAllSelected,l&&g.isResizingColumn,a],check:[g.check,{height:42},{selectors:(n={},n[".ms-Fabric--isFocusVisible &:focus"]={opacity:1},n)}],cellWrapperPadded:{paddingRight:p.cellExtraRightPadding+p.cellRightPadding},cellIsCheck:[b,g.cellIsCheck,{position:"relative",padding:0,margin:0,display:"inline-flex",alignItems:"center",border:"none"},s&&{opacity:1}],cellIsGroupExpander:[b,{display:"inline-flex",alignItems:"center",justifyContent:"center",fontSize:m.small.fontSize,padding:0,border:"none",width:36,color:h.neutralSecondary,selectors:{":hover":{backgroundColor:h.neutralLighter},":active":{backgroundColor:h.neutralLight}}}],cellIsActionable:{selectors:{":hover":{color:f.bodyText,background:f.listHeaderBackgroundHovered},":active":{background:f.listHeaderBackgroundPressed}}},cellIsEmpty:{textOverflow:"clip"},cellSizer:[g.cellSizer,{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},{display:"inline-block",position:"relative",cursor:"ew-resize",bottom:0,top:0,overflow:"hidden",height:"inherit",background:"transparent",zIndex:1,width:16,selectors:(o={":after":{content:'""',position:"absolute",top:0,bottom:0,width:1,background:v.resizerColor,opacity:0,left:"50%"},":focus:after":y,":hover:after":y},o["&."+g.isResizing+":after"]=[y,{boxShadow:"0 0 5px 0 rgba(0, 0, 0, 0.4)"}],o)}],cellIsResizing:g.isResizing,cellSizerStart:{margin:"0 -8px"},cellSizerEnd:{margin:0,marginLeft:-16},collapseButton:[g.collapseButton,{transformOrigin:"50% 50%",transition:"transform .1s linear"},c?[g.isCollapsed,{transform:"rotate(0deg)"}]:{transform:Uo(i)?"rotate(-90deg)":"rotate(90deg)"}],checkTooltip:g.checkTooltip,sizingOverlay:u&&{position:"absolute",left:0,top:0,right:0,bottom:0,cursor:"ew-resize",background:"rgba(255, 255, 255, 0)",selectors:(r={},r[St]=H({background:"transparent"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),r)},accessibleLabel:Et,dropHintCircleStyle:[g.dropHintCircleStyle,{display:"inline-block",visibility:"hidden",position:"absolute",bottom:0,height:9,width:9,borderRadius:"50%",marginLeft:-5,top:34,overflow:"visible",zIndex:10,border:"1px solid "+h.themePrimary,background:h.white}],dropHintCaretStyle:[g.dropHintCaretStyle,{display:"none",position:"absolute",top:-28,left:-6.5,fontSize:m.medium.fontSize,color:h.themePrimary,overflow:"visible",zIndex:10}],dropHintLineStyle:[g.dropHintLineStyle,{display:"none",position:"absolute",bottom:0,top:0,overflow:"hidden",height:42,width:1,background:h.themePrimary,zIndex:10}],dropHintStyle:{display:"inline-block",position:"absolute"}}}),void 0,{scope:"DetailsHeader"}),xs=function(t){var n=t.columns,o=t.columnStartIndex,r=t.rowClassNames,i=t.cellStyleProps,a=void 0===i?Xa:i,s=t.item,l=t.itemIndex,u=t.onRenderItemColumn,c=t.getCellValueKey,d=t.cellsByColumn,p=t.enableUpdateAnimations,f=t.rowHeaderId,h=e.useRef(),m=h.current||(h.current={});return e.createElement("div",{className:r.fields,"data-automationid":"DetailsRowFields",role:"presentation"},n.map((function(t,n){var i=void 0===t.calculatedWidth?"auto":t.calculatedWidth+a.cellLeftPadding+a.cellRightPadding+(t.isPadded?a.cellExtraRightPadding:0),h=t.onRender,g=void 0===h?u:h,v=t.getValueKey,y=void 0===v?c:v,b=d&&t.key in d?d[t.key]:g?g(s,l,t):function(e,t){var n=e&&t&&t.fieldName?e[t.fieldName]:"";return null==n&&(n=""),"boolean"==typeof n?n.toString():n}(s,t),_=m[t.key],C=p&&y?y(s,l,t):void 0,k=!1;void 0!==C&&void 0!==_&&C!==_&&(k=!0),m[t.key]=C;var S=t.key+(void 0!==C?"-"+C:"");return e.createElement("div",{key:S,id:t.isRowHeader?f:void 0,role:t.isRowHeader?"rowheader":"gridcell","aria-readonly":!0,"aria-colindex":n+o+1,className:xo(t.className,t.isMultiline&&r.isMultiline,t.isRowHeader&&r.isRowHeader,r.cell,t.isPadded?r.cellPadded:r.cellUnpadded,k&&r.cellAnimation),style:{width:i},"data-automationid":"DetailsRowCell","data-automation-key":t.key},b)})))},Es=kr(),Is=[],Ds=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._cellMeasurer=e.createRef(),o._focusZone=e.createRef(),o._onSelectionChanged=function(){var e=Rs(o.props);Yr(e,o.state.selectionState)||o.setState({selectionState:e})},o._updateDroppingState=function(e,t){var n=o.state.isDropping,r=o.props,i=r.dragDropEvents,a=r.item;e?i.onDragEnter&&(o._droppingClassNames=i.onDragEnter(a,t)):i.onDragLeave&&i.onDragLeave(a,t),n!==e&&o.setState({isDropping:e})},Br(o),o._events=new Jr(o),o.state={selectionState:Rs(n),columnMeasureInfo:void 0,isDropping:!1},o._droppingClassNames="",o}return B(n,t),n.getDerivedStateFromProps=function(e,t){return H(H({},t),{selectionState:Rs(e)})},n.prototype.componentDidMount=function(){var e=this.props,t=e.dragDropHelper,n=e.selection,o=e.item,r=e.onDidMount;t&&this._root.current&&(this._dragDropSubscription=t.subscribe(this._root.current,this._events,this._getRowDragDropOptions())),n&&this._events.on(n,rs,this._onSelectionChanged),r&&o&&(this._onDidMountCalled=!0,r(this))},n.prototype.componentDidUpdate=function(e){var t=this.state,n=this.props,o=n.item,r=n.onDidMount,i=t.columnMeasureInfo;if(this.props.itemIndex===e.itemIndex&&this.props.item===e.item&&this.props.dragDropHelper===e.dragDropHelper||(this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this.props.dragDropHelper&&this._root.current&&(this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getRowDragDropOptions()))),i&&i.index>=0&&this._cellMeasurer.current){var a=this._cellMeasurer.current.getBoundingClientRect().width;i.onMeasureDone(a),this.setState({columnMeasureInfo:void 0})}o&&r&&!this._onDidMountCalled&&(this._onDidMountCalled=!0,r(this))},n.prototype.componentWillUnmount=function(){var e=this.props,t=e.item,n=e.onWillUnmount;n&&t&&n(this),this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this._events.dispose()},n.prototype.shouldComponentUpdate=function(e,t){if(this.props.useReducedRowRenderer){var n=Rs(e);return this.state.selectionState.isSelected!==n.isSelected||!Yr(this.props,e)}return!0},n.prototype.render=function(){var t=this.props,n=t.className,o=t.columns,r=void 0===o?Is:o,i=t.dragDropEvents,a=t.item,s=t.itemIndex,l=t.id,u=t.flatIndexOffset,c=void 0===u?2:u,d=t.onRenderCheck,p=void 0===d?this._onRenderCheck:d,f=t.onRenderDetailsCheckbox,h=t.onRenderItemColumn,m=t.getCellValueKey,g=t.selectionMode,v=t.rowWidth,y=void 0===v?0:v,b=t.checkboxVisibility,_=t.getRowAriaLabel,C=t.getRowAriaDescription,k=t.getRowAriaDescribedBy,S=t.checkButtonAriaLabel,w=t.checkboxCellClassName,x=t.rowFieldsAs,E=void 0===x?xs:x,I=t.selection,D=t.indentWidth,R=t.enableUpdateAnimations,T=t.compact,P=t.theme,M=t.styles,F=t.cellsByColumn,L=t.groupNestingDepth,A=t.useFastIcons,N=void 0===A||A,B=t.cellStyleProps,O=t.group,z=t.focusZoneProps,W=t.disabled,U=void 0!==W&&W,V=this.state,G=V.columnMeasureInfo,j=V.isDropping,K=this.state.selectionState,q=K.isSelected,Z=void 0!==q&&q,Q=K.isSelectionModal,Y=void 0!==Q&&Q,$=i?!(!i.canDrag||!i.canDrag(a)):void 0,X=j?this._droppingClassNames||"is-dropping":"",J=_?_(a):void 0,ee=C?C(a):void 0,te=k?k(a):void 0,ne=!!I&&I.canSelectItem(a,s)&&!U,oe=g===Ka.multiple,re=g!==Ka.none&&b!==Kr.hidden,ie=g===Ka.none?void 0:Z,ae=O?s-O.startIndex+1:void 0,se=O?O.count:void 0,le=z?z.direction:ri.horizontal;this._classNames=H(H({},this._classNames),Es(M,{theme:P,isSelected:Z,canSelect:!oe,anySelected:Y,checkboxCellClassName:w,droppingClassName:X,className:n,compact:T,enableUpdateAnimations:R,cellStyleProps:B,disabled:U}));var ue={isMultiline:this._classNames.isMultiline,isRowHeader:this._classNames.isRowHeader,cell:this._classNames.cell,cellAnimation:this._classNames.cellAnimation,cellPadded:this._classNames.cellPadded,cellUnpadded:this._classNames.cellUnpadded,fields:this._classNames.fields};Yr(this._rowClassNames||{},ue)||(this._rowClassNames=ue);var ce=e.createElement(E,{rowClassNames:this._rowClassNames,rowHeaderId:l+"-header",cellsByColumn:F,columns:r,item:a,itemIndex:s,columnStartIndex:(re?1:0)+(L?1:0),onRenderItemColumn:h,getCellValueKey:m,enableUpdateAnimations:R,cellStyleProps:B}),de=this.props.role?this.props.role:"row";return this._ariaRowDescriptionId=ni("DetailsRow-description"),e.createElement(Vi,H({"data-is-focusable":!0},wo(this.props,So),"boolean"==typeof $?{"data-is-draggable":$,draggable:$}:{},z,{direction:le,elementRef:this._root,componentRef:this._focusZone,role:de,"aria-label":J,"aria-disabled":U||void 0,"aria-describedby":ee?this._ariaRowDescriptionId:te,className:this._classNames.root,"data-selection-index":s,"data-selection-touch-invoke":!0,"data-selection-disabled":U||void 0,"data-item-index":s,"aria-rowindex":void 0===ae?s+c:void 0,"aria-level":L&&L+1||void 0,"aria-posinset":ae,"aria-setsize":se,"data-automationid":"DetailsRow",style:{minWidth:y},"aria-selected":ie,allowFocusRoot:!0}),ee?e.createElement("span",{key:"description",role:"presentation",hidden:!0,id:this._ariaRowDescriptionId},ee):null,re&&e.createElement("div",{role:"gridcell","aria-colindex":1,"data-selection-toggle":!0,className:this._classNames.checkCell},p({id:l?l+"-checkbox":void 0,selected:Z,selectionMode:g,anySelected:Y,"aria-label":S,"aria-labelledby":l?l+"-checkbox "+l+"-header":void 0,canSelect:ne,compact:T,className:this._classNames.check,theme:P,isVisible:b===Kr.always,onRenderDetailsCheckbox:f,useFastIcons:N})),e.createElement(za,{indentWidth:D,role:"gridcell",count:L-(this.props.collapseAllVisibility===Na.hidden?1:0)}),a&&ce,G&&e.createElement("span",{role:"presentation",className:xo(this._classNames.cellMeasurer,this._classNames.cell),ref:this._cellMeasurer},e.createElement(E,{rowClassNames:this._rowClassNames,rowHeaderId:l+"-header",columns:[G.column],item:a,itemIndex:s,columnStartIndex:(re?1:0)+(L?1:0)+r.length,onRenderItemColumn:h,getCellValueKey:m})),e.createElement("span",{role:"checkbox",className:this._classNames.checkCover,"aria-checked":Z,"data-selection-toggle":!0}))},n.prototype.measureCell=function(e,t){var n=this.props.columns,o=H({},(void 0===n?Is:n)[e]);o.minWidth=0,o.maxWidth=999999,delete o.calculatedWidth,this.setState({columnMeasureInfo:{index:e,column:o,onMeasureDone:t}})},n.prototype.focus=function(e){var t;return void 0===e&&(e=!1),!!(null===(t=this._focusZone.current)||void 0===t?void 0:t.focus(e))},n.prototype._onRenderCheck=function(t){return e.createElement(cs,H({},t))},n.prototype._getRowDragDropOptions=function(){var e=this.props,t=e.item,n=e.itemIndex,o=e.dragDropEvents;return{eventMap:e.eventsToRegister,selectionIndex:n,context:{data:t,index:n},canDrag:o.canDrag,canDrop:o.canDrop,onDragStart:o.onDragStart,updateDropState:this._updateDroppingState,onDrop:o.onDrop,onDragEnd:o.onDragEnd,onDragOver:o.onDragOver}},n}(e.Component);function Rs(e){var t,n=e.itemIndex,o=e.selection;return{isSelected:!!(null==o?void 0:o.isIndexSelected(n)),isSelectionModal:!!(null===(t=null==o?void 0:o.isModal)||void 0===t?void 0:t.call(o))}}var Ts=vr(Ds,(function(e){var t,n,o,r,i,a,s,l,u,c,d,p,f=e.theme,h=e.isSelected,m=e.canSelect,g=e.droppingClassName,v=e.anySelected,y=e.isCheckVisible,b=e.checkboxCellClassName,_=e.compact,C=e.className,k=e.cellStyleProps,S=void 0===k?Xa:k,w=e.enableUpdateAnimations,x=e.disabled,E=f.palette,I=f.fonts,D=E.neutralPrimary,R=E.white,T=E.neutralSecondary,P=E.neutralLighter,M=E.neutralLight,F=E.neutralDark,L=E.neutralQuaternaryAlt,A=f.semanticColors,N=A.focusBorder,B=A.linkHovered,O=Nt($a,f),z={defaultHeaderText:D,defaultMetaText:T,defaultBackground:R,defaultHoverHeaderText:F,defaultHoverMetaText:D,defaultHoverBackground:P,selectedHeaderText:F,selectedMetaText:D,selectedBackground:M,selectedHoverHeaderText:F,selectedHoverMetaText:D,selectedHoverBackground:L,focusHeaderText:F,focusMetaText:D,focusBackground:M,focusHoverBackground:L},W=[xt(f,{inset:-1,borderColor:N,outlineColor:R,highContrastStyle:{top:2,right:2,bottom:2,left:2}}),O.isSelected,{color:z.selectedMetaText,background:z.selectedBackground,borderBottom:"1px solid "+R,selectors:(t={"&:before":{position:"absolute",display:"block",top:-1,height:1,bottom:0,left:0,right:0,content:"",borderTop:"1px solid "+R}},t["."+O.cell+" > ."+Ya.root]={color:B},t["&:hover"]={background:z.selectedHoverBackground,color:z.selectedHoverMetaText,selectors:(n={},n["."+O.cell+" "+St]={color:"HighlightText",selectors:{"> a":{color:"HighlightText"}}},n["."+O.isRowHeader]={color:z.selectedHoverHeaderText,selectors:(o={},o[St]={color:"HighlightText"},o)},n[St]={background:"Highlight"},n)},t["&:focus"]={background:z.focusBackground,selectors:(r={},r["."+O.cell]={color:z.focusMetaText,selectors:(i={},i[St]={color:"HighlightText",selectors:{"> a":{color:"HighlightText"}}},i)},r["."+O.isRowHeader]={color:z.focusHeaderText,selectors:(a={},a[St]={color:"HighlightText"},a)},r[St]={background:"Highlight"},r)},t[St]=H(H({background:"Highlight",color:"HighlightText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),{selectors:{a:{color:"HighlightText"}}}),t["&:focus:hover"]={background:z.focusHoverBackground},t)}],U=[O.isContentUnselectable,{userSelect:"none",cursor:"default"}],V={minHeight:es.compactRowHeight,border:0},G={minHeight:es.compactRowHeight,paddingTop:es.compactRowVerticalPadding,paddingBottom:es.compactRowVerticalPadding,paddingLeft:S.cellLeftPadding+"px"},j=[xt(f,{inset:-1}),O.cell,{display:"inline-block",position:"relative",boxSizing:"border-box",minHeight:es.rowHeight,verticalAlign:"top",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",paddingTop:es.rowVerticalPadding,paddingBottom:es.rowVerticalPadding,paddingLeft:S.cellLeftPadding+"px",selectors:(s={"& > button":{maxWidth:"100%"}},s["[data-is-focusable='true']"]=xt(f,{inset:-1,borderColor:T,outlineColor:R}),s)},h&&{selectors:(l={},l[St]=H(H({background:"Highlight",color:"HighlightText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),{selectors:{a:{color:"HighlightText"}}}),l)},_&&G,x&&{opacity:.5}];return{root:[O.root,Ct.fadeIn400,g,f.fonts.small,y&&O.isCheckVisible,xt(f,{borderColor:N,outlineColor:R}),{borderBottom:"1px solid "+P,background:z.defaultBackground,color:z.defaultMetaText,display:"inline-flex",minWidth:"100%",minHeight:es.rowHeight,whiteSpace:"nowrap",padding:0,boxSizing:"border-box",verticalAlign:"top",textAlign:"left",selectors:(u={},u["."+O.listCellFirstChild+" &:before"]={display:"none"},u["&:hover"]={background:z.defaultHoverBackground,color:z.defaultHoverMetaText,selectors:(c={},c["."+O.isRowHeader]={color:z.defaultHoverHeaderText},c["."+O.cell+" > ."+Ya.root]={color:B},c)},u["&:hover ."+O.check]={opacity:1},u[".ms-Fabric--isFocusVisible &:focus ."+O.check]={opacity:1},u[".ms-GroupSpacer"]={flexShrink:0,flexGrow:0},u)},h&&W,!m&&U,_&&V,C],cellUnpadded:{paddingRight:S.cellRightPadding+"px"},cellPadded:{paddingRight:S.cellExtraRightPadding+S.cellRightPadding+"px",selectors:(d={},d["&."+O.cellCheck]={paddingRight:0},d)},cell:j,cellAnimation:w&&ct.slideLeftIn40,cellMeasurer:[O.cellMeasurer,{overflow:"visible",whiteSpace:"nowrap"}],checkCell:[j,O.cellCheck,b,{padding:0,paddingTop:1,marginTop:-1,flexShrink:0}],checkCover:{position:"absolute",top:-1,left:0,bottom:0,right:0,display:v?"block":"none"},fields:[O.fields,{display:"flex",alignItems:"stretch"}],isRowHeader:[O.isRowHeader,{color:z.defaultHeaderText,fontSize:I.medium.fontSize},h&&{color:z.selectedHeaderText,fontWeight:bt.semibold,selectors:(p={},p[St]={color:"HighlightText"},p)}],isMultiline:[j,{whiteSpace:"normal",wordBreak:"break-word",textOverflow:"clip"}],check:[O.check]}}),void 0,{scope:"DetailsRow"}),Ps="data-selection-index",Ms="data-selection-toggle",Fs="data-selection-invoke",Ls="data-selection-all-toggle",As=function(t){function n(n){var o=t.call(this,n)||this;o._root=e.createRef(),o.ignoreNextFocus=function(){o._handleNextFocus(!1)},o._onSelectionChange=function(){var e=o.props.selection,t=e.isModal&&e.isModal();o.setState({isModal:t})},o._onMouseDownCapture=function(e){var t=e.target;if(document.activeElement===t||Qr(document.activeElement,t)){if(Qr(t,o._root.current))for(;t!==o._root.current;){if(o._hasAttribute(t,Fs)){o.ignoreNextFocus();break}t=Zr(t)}}else o.ignoreNextFocus()},o._onFocus=function(e){var t=e.target,n=o.props.selection,r=o._isCtrlPressed||o._isMetaPressed,i=o._getSelectionMode();if(o._shouldHandleFocus&&i!==Ka.none){var a=o._hasAttribute(t,Ms),s=o._findItemRoot(t);if(!a&&s){var l=o._getItemIndex(s);r?(n.setIndexSelected(l,n.isIndexSelected(l),!0),o.props.enterModalOnTouch&&o._isTouch&&n.setModal&&(n.setModal(!0),o._setIsTouch(!1))):o.props.isSelectedOnFocus&&o._onItemSurfaceClick(e,l)}}o._handleNextFocus(!1)},o._onMouseDown=function(e){o._updateModifiers(e);var t=e.target,n=o._findItemRoot(t);if(!o._isSelectionDisabled(t))for(;t!==o._root.current&&!o._hasAttribute(t,Ls);){if(n){if(o._hasAttribute(t,Ms))break;if(o._hasAttribute(t,Fs))break;if(!(t!==n&&!o._shouldAutoSelect(t)||o._isShiftPressed||o._isCtrlPressed||o._isMetaPressed)){o._onInvokeMouseDown(e,o._getItemIndex(n));break}if(o.props.disableAutoSelectOnInputElements&&("A"===t.tagName||"BUTTON"===t.tagName||"INPUT"===t.tagName))return}t=Zr(t)}},o._onTouchStartCapture=function(e){o._setIsTouch(!0)},o._onClick=function(e){var t=o.props.enableTouchInvocationTarget,n=void 0!==t&&t;o._updateModifiers(e);for(var r=e.target,i=o._findItemRoot(r),a=o._isSelectionDisabled(r);r!==o._root.current;){if(o._hasAttribute(r,Ls)){a||o._onToggleAllClick(e);break}if(i){var s=o._getItemIndex(i);if(o._hasAttribute(r,Ms)){a||(o._isShiftPressed?o._onItemSurfaceClick(e,s):o._onToggleClick(e,s));break}if(o._isTouch&&n&&o._hasAttribute(r,"data-selection-touch-invoke")||o._hasAttribute(r,Fs)){o._onInvokeClick(e,s);break}if(r===i){a||o._onItemSurfaceClick(e,s);break}if("A"===r.tagName||"BUTTON"===r.tagName||"INPUT"===r.tagName)return}r=Zr(r)}},o._onContextMenu=function(e){var t=e.target,n=o.props,r=n.onItemContextMenu,i=n.selection;if(r){var a=o._findItemRoot(t);if(a){var s=o._getItemIndex(a);o._onInvokeMouseDown(e,s),r(i.getItems()[s],s,e.nativeEvent)||e.preventDefault()}}},o._onDoubleClick=function(e){var t=e.target,n=o.props.onItemInvoked,r=o._findItemRoot(t);if(r&&n&&!o._isInputElement(t)){for(var i=o._getItemIndex(r);t!==o._root.current&&!o._hasAttribute(t,Ms)&&!o._hasAttribute(t,Fs);){if(t===r){o._onInvokeClick(e,i);break}t=Zr(t)}t=Zr(t)}},o._onKeyDownCapture=function(e){o._updateModifiers(e),o._handleNextFocus(!0)},o._onKeyDown=function(e){o._updateModifiers(e);var t=e.target,n=o._isSelectionDisabled(t),r=o.props.selection,i=65===e.which&&(o._isCtrlPressed||o._isMetaPressed),a=e.which===To;if(!o._isInputElement(t)){var s=o._getSelectionMode();if(i&&s===Ka.multiple&&!r.isAllSelected())return n||r.setAllSelected(!0),e.stopPropagation(),void e.preventDefault();if(a&&r.getSelectedCount()>0)return n||r.setAllSelected(!1),e.stopPropagation(),void e.preventDefault();var l=o._findItemRoot(t);if(l)for(var u=o._getItemIndex(l);t!==o._root.current&&!o._hasAttribute(t,Ms);){if(o._shouldAutoSelect(t)){n||o._onInvokeMouseDown(e,u);break}if(!(e.which!==Ro&&e.which!==Po||"BUTTON"!==t.tagName&&"A"!==t.tagName&&"INPUT"!==t.tagName))return!1;if(t===l){if(e.which===Ro)return o._onInvokeClick(e,u),void e.preventDefault();if(e.which===Po)return n||o._onToggleClick(e,u),void e.preventDefault();break}t=Zr(t)}}},o._events=new Jr(o),o._async=new qr(o),Br(o);var r=o.props.selection,i=r.isModal&&r.isModal();return o.state={isModal:i},o}return B(n,t),n.getDerivedStateFromProps=function(e,t){var n=e.selection.isModal&&e.selection.isModal();return H(H({},t),{isModal:n})},n.prototype.componentDidMount=function(){var e=Ho(this._root.current);this._events.on(e,"keydown, keyup",this._updateModifiers,!0),this._events.on(document,"click",this._findScrollParentAndTryClearOnEmptyClick),this._events.on(document.body,"touchstart",this._onTouchStartCapture,!0),this._events.on(document.body,"touchend",this._onTouchStartCapture,!0),this._events.on(this.props.selection,"change",this._onSelectionChange)},n.prototype.render=function(){var t=this.state.isModal;return e.createElement("div",{className:xo("ms-SelectionZone",this.props.className,{"ms-SelectionZone--modal":!!t}),ref:this._root,onKeyDown:this._onKeyDown,onMouseDown:this._onMouseDown,onKeyDownCapture:this._onKeyDownCapture,onClick:this._onClick,role:"presentation",onDoubleClick:this._onDoubleClick,onContextMenu:this._onContextMenu,onMouseDownCapture:this._onMouseDownCapture,onFocusCapture:this._onFocus,"data-selection-is-modal":!!t||void 0},this.props.children,e.createElement(Mr,null))},n.prototype.componentDidUpdate=function(e){var t=this.props.selection;t!==e.selection&&(this._events.off(e.selection),this._events.on(t,"change",this._onSelectionChange))},n.prototype.componentWillUnmount=function(){this._events.dispose(),this._async.dispose()},n.prototype._isSelectionDisabled=function(e){if(this._getSelectionMode()===Ka.none)return!0;for(;e!==this._root.current;){if(this._hasAttribute(e,"data-selection-disabled"))return!0;e=Zr(e)}return!1},n.prototype._onToggleAllClick=function(e){var t=this.props.selection;this._getSelectionMode()===Ka.multiple&&(t.toggleAllSelected(),e.stopPropagation(),e.preventDefault())},n.prototype._onToggleClick=function(e,t){var n=this.props.selection,o=this._getSelectionMode();if(n.setChangeEvents(!1),this.props.enterModalOnTouch&&this._isTouch&&!n.isIndexSelected(t)&&n.setModal&&(n.setModal(!0),this._setIsTouch(!1)),o===Ka.multiple)n.toggleIndexSelected(t);else{if(o!==Ka.single)return void n.setChangeEvents(!0);var r=n.isIndexSelected(t),i=n.isModal&&n.isModal();n.setAllSelected(!1),n.setIndexSelected(t,!r,!0),i&&n.setModal&&n.setModal(!0)}n.setChangeEvents(!0),e.stopPropagation()},n.prototype._onInvokeClick=function(e,t){var n=this.props,o=n.selection,r=n.onItemInvoked;r&&(r(o.getItems()[t],t,e.nativeEvent),e.preventDefault(),e.stopPropagation())},n.prototype._onItemSurfaceClick=function(e,t){var n=this.props.selection,o=this._isCtrlPressed||this._isMetaPressed,r=this._getSelectionMode();r===Ka.multiple?this._isShiftPressed&&!this._isTabPressed?n.selectToIndex(t,!o):o?n.toggleIndexSelected(t):this._clearAndSelectIndex(t):r===Ka.single&&this._clearAndSelectIndex(t)},n.prototype._onInvokeMouseDown=function(e,t){this.props.selection.isIndexSelected(t)||this._clearAndSelectIndex(t)},n.prototype._findScrollParentAndTryClearOnEmptyClick=function(e){var t=wi(this._root.current);this._events.off(document,"click",this._findScrollParentAndTryClearOnEmptyClick),this._events.on(t,"click",this._tryClearOnEmptyClick),(t&&e.target instanceof Node&&t.contains(e.target)||t===e.target)&&this._tryClearOnEmptyClick(e)},n.prototype._tryClearOnEmptyClick=function(e){!this.props.selectionPreservedOnEmptyClick&&this._isNonHandledClick(e.target)&&this.props.selection.setAllSelected(!1)},n.prototype._clearAndSelectIndex=function(e){var t=this.props.selection;if(1!==t.getSelectedCount()||!t.isIndexSelected(e)){var n=t.isModal&&t.isModal();t.setChangeEvents(!1),t.setAllSelected(!1),t.setIndexSelected(e,!0,!0),(n||this.props.enterModalOnTouch&&this._isTouch)&&(t.setModal&&t.setModal(!0),this._isTouch&&this._setIsTouch(!1)),t.setChangeEvents(!0)}},n.prototype._updateModifiers=function(e){this._isShiftPressed=e.shiftKey,this._isCtrlPressed=e.ctrlKey,this._isMetaPressed=e.metaKey;var t=e.keyCode;this._isTabPressed=!!t&&t===Do},n.prototype._findItemRoot=function(e){for(var t=this.props.selection;e!==this._root.current;){var n=e.getAttribute(Ps),o=Number(n);if(null!==n&&o>=0&&o<t.getItems().length)break;e=Zr(e)}if(e!==this._root.current)return e},n.prototype._getItemIndex=function(e){return Number(e.getAttribute(Ps))},n.prototype._shouldAutoSelect=function(e){return this._hasAttribute(e,"data-selection-select")},n.prototype._hasAttribute=function(e,t){for(var n=!1;!n&&e!==this._root.current;)n="true"===e.getAttribute(t),e=Zr(e);return n},n.prototype._isInputElement=function(e){return"INPUT"===e.tagName||"TEXTAREA"===e.tagName},n.prototype._isNonHandledClick=function(e){var t=No();if(t&&e)for(;e&&e!==t.documentElement;){if(pi(e))return!1;e=Zr(e)}return!0},n.prototype._handleNextFocus=function(e){var t=this;this._shouldHandleFocusTimeoutId&&(this._async.clearTimeout(this._shouldHandleFocusTimeoutId),this._shouldHandleFocusTimeoutId=void 0),this._shouldHandleFocus=e,e&&this._async.setTimeout((function(){t._shouldHandleFocus=!1}),100)},n.prototype._setIsTouch=function(e){var t=this;this._isTouchTimeoutId&&(this._async.clearTimeout(this._isTouchTimeoutId),this._isTouchTimeoutId=void 0),this._isTouch=!0,e&&this._async.setTimeout((function(){t._isTouch=!1}),300)},n.prototype._getSelectionMode=function(){var e=this.props.selection,t=this.props.selectionMode;return void 0===t?e?e.mode:Ka.none:t},n.defaultProps={isSelectedOnFocus:!0,selectionMode:Ka.multiple},n}(e.Component),Ns=function(){function e(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0]||{},o=n.onSelectionChanged,r=n.getKey,i=n.canSelectItem,a=void 0===i?function(){return!0}:i,s=n.items,l=n.selectionMode,u=void 0===l?Ka.multiple:l;this.mode=u,this._getKey=r||Bs,this._changeEventSuppressionCount=0,this._exemptedCount=0,this._anchoredIndex=0,this._unselectableCount=0,this._onSelectionChanged=o,this._canSelectItem=a,this._isModal=!1,this.setItems(s||[],!0),this.count=this.getSelectedCount()}return e.prototype.canSelectItem=function(e,t){return!("number"==typeof t&&t<0)&&this._canSelectItem(e,t)},e.prototype.getKey=function(e,t){var n=this._getKey(e,t);return"number"==typeof n||n?""+n:""},e.prototype.setChangeEvents=function(e,t){this._changeEventSuppressionCount+=e?-1:1,0===this._changeEventSuppressionCount&&this._hasChanged&&(this._hasChanged=!1,t||this._change())},e.prototype.isModal=function(){return this._isModal},e.prototype.setModal=function(e){this._isModal!==e&&(this.setChangeEvents(!1),this._isModal=e,e||this.setAllSelected(!1),this._change(),this.setChangeEvents(!0))},e.prototype.setItems=function(e,t){void 0===t&&(t=!0);var n={},o={},r=!1;this.setChangeEvents(!1),this._unselectableCount=0;for(var i=0;i<e.length;i++){if(c=e[i]){var a=this.getKey(c,i);a&&(n[a]=i)}o[i]=c&&!this.canSelectItem(c),o[i]&&this._unselectableCount++}(t||0===e.length)&&this._setAllSelected(!1,!0);var s={},l=0;for(var u in this._exemptedIndices)if(this._exemptedIndices.hasOwnProperty(u)){var c,d=Number(u),p=(c=this._items[d])?this.getKey(c,Number(d)):void 0,f=p?n[p]:d;void 0===f?r=!0:(s[f]=!0,l++,r=r||f!==d)}this._items&&0===this._exemptedCount&&e.length!==this._items.length&&this._isAllSelected&&(r=!0),this._exemptedIndices=s,this._exemptedCount=l,this._keyToIndexMap=n,this._unselectableIndices=o,this._items=e,this._selectedItems=null,r&&(this._updateCount(),this._change()),this.setChangeEvents(!0)},e.prototype.getItems=function(){return this._items},e.prototype.getSelection=function(){if(!this._selectedItems){this._selectedItems=[];var e=this._items;if(e)for(var t=0;t<e.length;t++)this.isIndexSelected(t)&&this._selectedItems.push(e[t])}return this._selectedItems},e.prototype.getSelectedCount=function(){return this._isAllSelected?this._items.length-this._exemptedCount-this._unselectableCount:this._exemptedCount},e.prototype.getSelectedIndices=function(){if(!this._selectedIndices){this._selectedIndices=[];var e=this._items;if(e)for(var t=0;t<e.length;t++)this.isIndexSelected(t)&&this._selectedIndices.push(t)}return this._selectedIndices},e.prototype.isRangeSelected=function(e,t){if(0===t)return!1;for(var n=e+t,o=e;o<n;o++)if(!this.isIndexSelected(o))return!1;return!0},e.prototype.isAllSelected=function(){var e=this._items.length-this._unselectableCount;return this.mode===Ka.single&&(e=Math.min(e,1)),this.count>0&&this._isAllSelected&&0===this._exemptedCount||!this._isAllSelected&&this._exemptedCount===e&&e>0},e.prototype.isKeySelected=function(e){var t=this._keyToIndexMap[e];return this.isIndexSelected(t)},e.prototype.isIndexSelected=function(e){return!!(this.count>0&&this._isAllSelected&&!this._exemptedIndices[e]&&!this._unselectableIndices[e]||!this._isAllSelected&&this._exemptedIndices[e])},e.prototype.setAllSelected=function(e){if(!e||this.mode===Ka.multiple){var t=this._items?this._items.length-this._unselectableCount:0;this.setChangeEvents(!1),t>0&&(this._exemptedCount>0||e!==this._isAllSelected)&&(this._exemptedIndices={},(e!==this._isAllSelected||this._exemptedCount>0)&&(this._exemptedCount=0,this._isAllSelected=e,this._change()),this._updateCount()),this.setChangeEvents(!0)}},e.prototype.setKeySelected=function(e,t,n){var o=this._keyToIndexMap[e];o>=0&&this.setIndexSelected(o,t,n)},e.prototype.setIndexSelected=function(e,t,n){if(this.mode!==Ka.none&&!((e=Math.min(Math.max(0,e),this._items.length-1))<0||e>=this._items.length)){this.setChangeEvents(!1);var o=this._exemptedIndices[e];!this._unselectableIndices[e]&&(t&&this.mode===Ka.single&&this._setAllSelected(!1,!0),o&&(t&&this._isAllSelected||!t&&!this._isAllSelected)&&(delete this._exemptedIndices[e],this._exemptedCount--),!o&&(t&&!this._isAllSelected||!t&&this._isAllSelected)&&(this._exemptedIndices[e]=!0,this._exemptedCount++),n&&(this._anchoredIndex=e)),this._updateCount(),this.setChangeEvents(!0)}},e.prototype.selectToKey=function(e,t){this.selectToIndex(this._keyToIndexMap[e],t)},e.prototype.selectToIndex=function(e,t){if(this.mode!==Ka.none)if(this.mode!==Ka.single){var n=this._anchoredIndex||0,o=Math.min(e,n),r=Math.max(e,n);for(this.setChangeEvents(!1),t&&this._setAllSelected(!1,!0);o<=r;o++)this.setIndexSelected(o,!0,!1);this.setChangeEvents(!0)}else this.setIndexSelected(e,!0,!0)},e.prototype.toggleAllSelected=function(){this.setAllSelected(!this.isAllSelected())},e.prototype.toggleKeySelected=function(e){this.setKeySelected(e,!this.isKeySelected(e),!0)},e.prototype.toggleIndexSelected=function(e){this.setIndexSelected(e,!this.isIndexSelected(e),!0)},e.prototype.toggleRangeSelected=function(e,t){if(this.mode!==Ka.none){var n=this.isRangeSelected(e,t),o=e+t;if(!(this.mode===Ka.single&&t>1)){this.setChangeEvents(!1);for(var r=e;r<o;r++)this.setIndexSelected(r,!n,!1);this.setChangeEvents(!0)}}},e.prototype._updateCount=function(e){void 0===e&&(e=!1);var t=this.getSelectedCount();t!==this.count&&(this.count=t,this._change()),this.count||e||this.setModal(!1)},e.prototype._setAllSelected=function(e,t){if(void 0===t&&(t=!1),!e||this.mode===Ka.multiple){var n=this._items?this._items.length-this._unselectableCount:0;this.setChangeEvents(!1),n>0&&(this._exemptedCount>0||e!==this._isAllSelected)&&(this._exemptedIndices={},(e!==this._isAllSelected||this._exemptedCount>0)&&(this._exemptedCount=0,this._isAllSelected=e,this._change()),this._updateCount(t)),this.setChangeEvents(!0)}},e.prototype._change=function(){0===this._changeEventSuppressionCount?(this._selectedItems=null,this._selectedIndices=void 0,Jr.raise(this,rs),this._onSelectionChanged&&this._onSelectionChanged()):this._hasChanged=!0},e}();function Bs(e,t){var n=(e||{}).key;return void 0===n?""+t:n}var Hs,Os,zs={root:"ms-GroupedList",compact:"ms-GroupedList--Compact",group:"ms-GroupedList-group",link:"ms-Link",listCell:"ms-List-cell"},Ws={root:"ms-GroupHeader",compact:"ms-GroupHeader--compact",check:"ms-GroupHeader-check",dropIcon:"ms-GroupHeader-dropIcon",expand:"ms-GroupHeader-expand",isCollapsed:"is-collapsed",title:"ms-GroupHeader-title",isSelected:"is-selected",iconTag:"ms-Icon--Tag",group:"ms-GroupedList-group",isDropping:"is-dropping"},Us="cubic-bezier(0.390, 0.575, 0.565, 1.000)";!function(e){e[e.xSmall=0]="xSmall",e[e.small=1]="small",e[e.medium=2]="medium",e[e.large=3]="large"}(Hs||(Hs={})),function(e){e[e.normal=0]="normal",e[e.large=1]="large"}(Os||(Os={}));var Vs=function(t){function n(e){var n=t.call(this,e)||this;return n.state={isRendered:!1},n}return B(n,t),n.prototype.componentDidMount=function(){var e=this,t=this.props.delay;this._timeoutId=window.setTimeout((function(){e.setState({isRendered:!0})}),t)},n.prototype.componentWillUnmount=function(){this._timeoutId&&clearTimeout(this._timeoutId)},n.prototype.render=function(){return this.state.isRendered?e.Children.only(this.props.children):null},n.defaultProps={delay:0},n}(e.Component),Gs=kr(),js=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.type,o=t.size,r=t.ariaLabel,i=t.ariaLive,a=t.styles,s=t.label,l=t.theme,u=t.className,c=t.labelPosition,d=r,p=wo(this.props,So,["size"]),f=o;void 0===f&&void 0!==n&&(f=n===Os.large?Hs.large:Hs.medium);var h=Gs(a,{theme:l,size:f,className:u,labelPosition:c});return e.createElement("div",H({},p,{className:h.root}),e.createElement("div",{className:h.circle}),s&&e.createElement("div",{className:h.label},s),d&&e.createElement("div",{role:"status","aria-live":i},e.createElement(Vs,null,e.createElement("div",{className:h.screenReaderText},d))))},n.defaultProps={size:Hs.medium,ariaLive:"polite",labelPosition:"bottom"},n}(e.Component),Ks={root:"ms-Spinner",circle:"ms-Spinner-circle",label:"ms-Spinner-label"},qs=Zn((function(){return we({"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}})})),Zs=vr(js,(function(e){var t,n=e.theme,o=e.size,r=e.className,i=e.labelPosition,a=n.palette,s=Nt(Ks,n);return{root:[s.root,{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center"},"top"===i&&{flexDirection:"column-reverse"},"right"===i&&{flexDirection:"row"},"left"===i&&{flexDirection:"row-reverse"},r],circle:[s.circle,{boxSizing:"border-box",borderRadius:"50%",border:"1.5px solid "+a.themeLight,borderTopColor:a.themePrimary,animationName:qs(),animationDuration:"1.3s",animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(.53,.21,.29,.67)",selectors:(t={},t[St]=H({borderTopColor:"Highlight"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t)},o===Hs.xSmall&&["ms-Spinner--xSmall",{width:12,height:12}],o===Hs.small&&["ms-Spinner--small",{width:16,height:16}],o===Hs.medium&&["ms-Spinner--medium",{width:20,height:20}],o===Hs.large&&["ms-Spinner--large",{width:28,height:28}]],label:[s.label,n.fonts.small,{color:a.themePrimary,margin:"8px 0 0",textAlign:"center"},"top"===i&&{margin:"0 0 8px"},"right"===i&&{margin:"0 0 0 8px"},"left"===i&&{margin:"0 8px 0 0"}],screenReaderText:Et}}),void 0,{scope:"Spinner"}),Qs=kr(),Ys=function(t){function n(n){var o=t.call(this,n)||this;return o._toggleCollapse=function(){var e=o.props,t=e.group,n=e.onToggleCollapse,r=e.isGroupLoading,i=!o.state.isCollapsed,a=!i&&r&&r(t);o.setState({isCollapsed:i,isLoadingVisible:a}),n&&n(t)},o._onKeyUp=function(e){var t=o.props,n=t.group,r=t.onGroupHeaderKeyUp;if(r&&r(e,n),!e.defaultPrevented){var i=o.state.isCollapsed&&e.which===Vo(Lo,o.props.theme);(!o.state.isCollapsed&&e.which===Vo(Mo,o.props.theme)||i)&&(o._toggleCollapse(),e.stopPropagation(),e.preventDefault())}},o._onToggleClick=function(e){o._toggleCollapse(),e.stopPropagation(),e.preventDefault()},o._onToggleSelectGroupClick=function(e){var t=o.props,n=t.onToggleSelectGroup,r=t.group;n&&n(r),e.preventDefault(),e.stopPropagation()},o._onHeaderClick=function(){var e=o.props,t=e.group,n=e.onGroupHeaderClick,r=e.onToggleSelectGroup;n?n(t):r&&r(t)},o._onRenderTitle=function(t){var n=t.group,r=t.ariaColSpan;return n?e.createElement("div",{className:o._classNames.title,id:o._id,role:"gridcell","aria-colspan":r},e.createElement("span",null,n.name),e.createElement("span",{className:o._classNames.headerCount},"(",n.count,n.hasMoreData&&"+",")")):null},o._id=ni("GroupHeader"),o.state={isCollapsed:o.props.group&&o.props.group.isCollapsed,isLoadingVisible:!1},o}return B(n,t),n.getDerivedStateFromProps=function(e,t){if(e.group){var n=e.group.isCollapsed,o=e.isGroupLoading,r=!n&&o&&o(e.group);return H(H({},t),{isCollapsed:n||!1,isLoadingVisible:r||!1})}return t},n.prototype.render=function(){var t=this.props,n=t.group,o=t.groupLevel,r=void 0===o?0:o,i=t.viewport,a=t.selectionMode,s=t.loadingText,l=t.isSelected,u=void 0!==l&&l,c=t.selected,d=void 0!==c&&c,p=t.indentWidth,f=t.onRenderTitle,h=void 0===f?this._onRenderTitle:f,m=t.onRenderGroupHeaderCheckbox,g=t.isCollapsedGroupSelectVisible,v=void 0===g||g,y=t.expandButtonProps,b=t.expandButtonIcon,_=t.selectAllButtonProps,C=t.theme,k=t.styles,S=t.className,w=t.compact,x=t.ariaPosInSet,E=t.ariaSetSize,I=t.ariaRowIndex,D=t.useFastIcons?this._fastDefaultCheckboxRender:this._defaultCheckboxRender,R=m?Ua(m,D):D,T=this.state,P=T.isCollapsed,M=T.isLoadingVisible,F=a===Ka.multiple,L=F&&(v||!(n&&n.isCollapsed)),A=d||u,N=Uo(C);return this._classNames=Qs(k,{theme:C,className:S,selected:A,isCollapsed:P,compact:w}),n?e.createElement("div",{className:this._classNames.root,style:i?{minWidth:i.width}:{},onClick:this._onHeaderClick,role:"row","aria-setsize":E,"aria-posinset":x,"aria-rowindex":I,"data-is-focusable":!0,onKeyUp:this._onKeyUp,"aria-label":n.ariaLabel,"aria-labelledby":n.ariaLabel?void 0:this._id,"aria-expanded":!this.state.isCollapsed,"aria-selected":F?A:void 0,"aria-level":r+1},e.createElement("div",{className:this._classNames.groupHeaderContainer,role:"presentation"},L?e.createElement("div",{role:"gridcell"},e.createElement("button",H({"data-is-focusable":!1,type:"button",className:this._classNames.check,role:"checkbox",id:this._id+"-check","aria-checked":A,"aria-labelledby":this._id+"-check "+this._id,"data-selection-toggle":!0,onClick:this._onToggleSelectGroupClick},_),R({checked:A,theme:C},R))):a!==Ka.none&&e.createElement(za,{indentWidth:48,count:1}),e.createElement(za,{indentWidth:p,count:r}),e.createElement("div",{className:this._classNames.dropIcon,role:"presentation"},e.createElement(Xi,{iconName:"Tag"})),e.createElement("div",{role:"gridcell"},e.createElement("button",H({"data-is-focusable":!1,type:"button",className:this._classNames.expand,onClick:this._onToggleClick,"aria-expanded":!this.state.isCollapsed},y),e.createElement(Xi,{className:this._classNames.expandIsCollapsed,iconName:b||(N?"ChevronLeftMed":"ChevronRightMed")}))),h(this.props,this._onRenderTitle),M&&e.createElement(Zs,{label:s}))):null},n.prototype._defaultCheckboxRender=function(t){return e.createElement(Qa,{checked:t.checked})},n.prototype._fastDefaultCheckboxRender=function(t){return e.createElement($s,{theme:t.theme,checked:t.checked})},n.defaultProps={expandButtonProps:{"aria-label":"expand collapse group"}},n}(e.Component),$s=e.memo((function(t){return e.createElement(Qa,{theme:t.theme,checked:t.checked,className:t.className,useFastIcons:!0})})),Xs=vr(Ys,(function(e){var t,n,o,r,i,a=e.theme,s=e.className,l=e.selected,u=e.isCollapsed,c=e.compact,d=Xa.cellLeftPadding,p=c?40:48,f=a.semanticColors,h=a.palette,m=a.fonts,g=Nt(Ws,a),v=[xt(a),{cursor:"default",background:"none",backgroundColor:"transparent",border:"none",padding:0}];return{root:[g.root,xt(a),a.fonts.medium,{borderBottom:"1px solid "+f.listBackground,cursor:"default",userSelect:"none",selectors:(t={":hover":{background:f.listItemBackgroundHovered,color:f.actionLinkHovered}},t["&:hover ."+g.check]={opacity:1},t[".ms-Fabric--isFocusVisible &:focus ."+g.check]={opacity:1},t[":global(."+g.group+"."+g.isDropping+")"]={selectors:(n={},n["& > ."+g.root+" ."+g.dropIcon]={transition:"transform 0.467s cubic-bezier(0.075, 0.820, 0.165, 1.000) opacity 0.167s "+Us,transitionDelay:"0.367s",opacity:1,transform:"rotate(0.2deg) scale(1);"},n["."+g.check]={opacity:0},n)},t)},l&&[g.isSelected,{background:f.listItemBackgroundChecked,selectors:(o={":hover":{background:f.listItemBackgroundCheckedHovered}},o[""+g.check]={opacity:1},o)}],c&&[g.compact,{border:"none"}],s],groupHeaderContainer:[{display:"flex",alignItems:"center",height:p}],headerCount:[{padding:"0px 4px"}],check:[g.check,v,{display:"flex",alignItems:"center",justifyContent:"center",paddingTop:1,marginTop:-1,opacity:0,width:48,height:p,selectors:(r={},r[".ms-Fabric--isFocusVisible &:focus"]={opacity:1},r)}],expand:[g.expand,v,{display:"flex",alignItems:"center",justifyContent:"center",fontSize:m.small.fontSize,width:36,height:p,color:l?h.neutralPrimary:h.neutralSecondary,selectors:{":hover":{backgroundColor:l?h.neutralQuaternary:h.neutralLight},":active":{backgroundColor:l?h.neutralTertiaryAlt:h.neutralQuaternaryAlt}}}],expandIsCollapsed:[u?[g.isCollapsed,{transform:"rotate(0deg)",transformOrigin:"50% 50%",transition:"transform .1s linear"}]:{transform:Uo(a)?"rotate(-90deg)":"rotate(90deg)",transformOrigin:"50% 50%",transition:"transform .1s linear"}],title:[g.title,{paddingLeft:d,fontSize:c?m.medium.fontSize:m.mediumPlus.fontSize,fontWeight:u?bt.regular:bt.semibold,cursor:"pointer",outline:0,whiteSpace:"nowrap",textOverflow:"ellipsis"}],dropIcon:[g.dropIcon,{position:"absolute",left:-26,fontSize:_t.large,color:h.neutralSecondary,transition:"transform 0.267s cubic-bezier(0.600, -0.280, 0.735, 0.045), opacity 0.467s "+Us,opacity:0,transform:"rotate(0.2deg) scale(0.65)",transformOrigin:"10px 10px",selectors:(i={},i[":global(."+g.iconTag+")"]={position:"absolute"},i)}]}}),void 0,{scope:"GroupHeader"}),Js={root:"ms-GroupShowAll",link:"ms-Link"},el=kr(),tl=function(e,t){t.as;var n=t.disabled,o=t.target,r=t.href,i=(t.theme,t.getStyles,t.styles,t.componentRef,t.underline,O(t,["as","disabled","target","href","theme","getStyles","styles","componentRef","underline"]));return"string"==typeof e?"a"===e?H({target:o,href:n?void 0:r},i):"button"===e?H({type:"button",disabled:n},i):H(H({},i),{disabled:n}):H({target:o,href:r,disabled:n},i)},nl=e.forwardRef((function(t,n){var o=function(t,n){var o=t.as,r=t.className,i=t.disabled,a=t.href,s=t.onClick,l=t.styles,u=t.theme,c=t.underline,d=e.useRef(null),p=Gi(d,n);(function(t,n){e.useImperativeHandle(t.componentRef,(function(){return{focus:function(){n.current&&n.current.focus()}}}),[n])})(t,d),Pr(d);var f=el(l,{className:r,isButton:!a,isDisabled:i,isUnderlined:c,theme:u}),h=o||(a?"a":"button");return{state:{},slots:{root:h},slotProps:{root:H(H({},tl(h,t)),{"aria-disabled":i,className:f.root,onClick:function(e){i?e.preventDefault():s&&s(e)},ref:p})}}}(t,n),r=o.slots,i=o.slotProps;return e.createElement(r.root,H({},i.root))}));nl.displayName="LinkBase";var ol=vr(nl,(function(e){var t,n,o,r,i,a,s=e.className,l=e.isButton,u=e.isDisabled,c=e.isUnderlined,d=e.theme,p=d.semanticColors,f=p.link,h=p.linkHovered,m=p.disabledText,g=p.focusBorder,v=Nt(Ya,d);return{root:[v.root,d.fonts.medium,{color:f,outline:"none",fontSize:"inherit",fontWeight:"inherit",textDecoration:c?"underline":"none",selectors:(t={".ms-Fabric--isFocusVisible &:focus":{boxShadow:"0 0 0 1px "+g+" inset",outline:"1px auto "+g,selectors:(n={},n[St]={outline:"1px solid WindowText"},n)}},t[St]={borderBottom:"none"},t)},l&&{background:"none",backgroundColor:"transparent",border:"none",cursor:"pointer",display:"inline",margin:0,overflow:"inherit",padding:0,textAlign:"left",textOverflow:"inherit",userSelect:"text",borderBottom:"1px solid transparent",selectors:(o={},o[St]={color:"LinkText",forcedColorAdjust:"none"},o)},!l&&{selectors:(r={},r[St]={MsHighContrastAdjust:"auto",forcedColorAdjust:"auto"},r)},u&&["is-disabled",{color:m,cursor:"default"},{selectors:{"&:link, &:visited":{pointerEvents:"none"}}}],!u&&{selectors:{"&:active, &:hover, &:active:hover":{color:h,textDecoration:"underline",selectors:(i={},i[St]={color:"LinkText"},i)},"&:focus":{color:f,selectors:(a={},a[St]={color:"LinkText"},a)}}},v.root,s]}}),void 0,{scope:"Link"}),rl=kr(),il=vr((function(t){var n=t.group,o=t.groupLevel,r=t.showAllLinkText,i=void 0===r?"Show All":r,a=t.styles,s=t.theme,l=t.onToggleSummarize,u=rl(a,{theme:s}),c=(0,e.useCallback)((function(e){l(n),e.stopPropagation(),e.preventDefault()}),[l,n]);return n?e.createElement("div",{className:u.root},e.createElement(za,{count:o}),e.createElement(ol,{onClick:c},i)):null}),(function(e){var t,n=e.theme,o=n.fonts,r=Nt(Js,n);return{root:[r.root,{position:"relative",padding:"10px 84px",cursor:"pointer",selectors:(t={},t["."+r.link]={fontSize:o.small.fontSize},t)}]}}),void 0,{scope:"GroupShowAll"}),al={root:"ms-groupFooter"},sl=kr(),ll=vr((function(t){var n=t.group,o=t.groupLevel,r=t.footerText,i=t.indentWidth,a=t.styles,s=t.theme,l=sl(a,{theme:s});return n&&r?e.createElement("div",{className:l.root},e.createElement(za,{indentWidth:i,count:o}),r):null}),(function(e){var t=e.theme,n=e.className,o=Nt(al,t);return{root:[t.fonts.medium,o.root,{position:"relative",padding:"5px 38px"},n]}}),void 0,{scope:"GroupFooter"}),ul={top:-1,bottom:-1,left:-1,right:-1,width:0,height:0},cl=function(e){return e.getBoundingClientRect()},dl=cl,pl=cl,fl=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._surface=e.createRef(),o._pageRefs={},o._getDerivedStateFromProps=function(e,t){return e.items!==o.props.items||e.renderCount!==o.props.renderCount||e.startIndex!==o.props.startIndex||e.version!==o.props.version?(o._resetRequiredWindows(),o._requiredRect=null,o._measureVersion++,o._invalidatePageCache(),o._updatePages(e,t)):t},o._onRenderRoot=function(t){var n=t.rootRef,o=t.surfaceElement,r=t.divProps;return e.createElement("div",H({ref:n},r),o)},o._onRenderSurface=function(t){var n=t.surfaceRef,o=t.pageElements,r=t.divProps;return e.createElement("div",H({ref:n},r),o)},o._onRenderPage=function(t,n){for(var r=o.props,i=r.onRenderCell,a=r.role,s=t.page,l=s.items,u=void 0===l?[]:l,c=s.startIndex,d=O(t,["page"]),p=void 0===a?"listitem":"presentation",f=[],h=0;h<u.length;h++){var m=c+h,g=u[h],v=o.props.getKey?o.props.getKey(g,m):g&&g.key;null==v&&(v=m),f.push(e.createElement("div",{role:p,className:"ms-List-cell",key:v,"data-list-index":m,"data-automationid":"ListCell"},i&&i(g,m,o.props.ignoreScrollingState?void 0:o.state.isScrolling)))}return e.createElement("div",H({},d),f)},Br(o),o.state={pages:[],isScrolling:!1,getDerivedStateFromProps:o._getDerivedStateFromProps},o._async=new qr(o),o._events=new Jr(o),o._estimatedPageHeight=0,o._totalEstimates=0,o._requiredWindowsAhead=0,o._requiredWindowsBehind=0,o._measureVersion=0,o._onAsyncScroll=o._async.debounce(o._onAsyncScroll,100,{leading:!1,maxWait:500}),o._onAsyncIdle=o._async.debounce(o._onAsyncIdle,200,{leading:!1}),o._onAsyncResize=o._async.debounce(o._onAsyncResize,16,{leading:!1}),o._onScrollingDone=o._async.debounce(o._onScrollingDone,500,{leading:!1}),o._cachedPageHeights={},o._estimatedPageHeight=0,o._focusedIndex=-1,o._pageCache={},o}return B(n,t),n.getDerivedStateFromProps=function(e,t){return t.getDerivedStateFromProps(e,t)},Object.defineProperty(n.prototype,"pageRefs",{get:function(){return this._pageRefs},enumerable:!1,configurable:!0}),n.prototype.scrollToIndex=function(e,t,n){void 0===n&&(n=0);for(var o=this.props.startIndex,r=o+this._getRenderCount(),i=this._allowedRect,a=0,s=1,l=o;l<r;l+=s){var u=this._getPageSpecification(l,i),c=u.height;if(s=u.itemCount,l<=e&&l+s>e){if(t&&this._scrollElement){for(var d=pl(this._scrollElement),p={top:this._scrollElement.scrollTop,bottom:this._scrollElement.scrollTop+d.height},f=e-l,h=0;h<f;++h)a+=t(l+h);var m=a+t(e);switch(n){case 1:return void(this._scrollElement.scrollTop=a);case 2:return void(this._scrollElement.scrollTop=m-d.height);case 3:return void(this._scrollElement.scrollTop=(a+m-d.height)/2)}if(a>=p.top&&m<=p.bottom)return;a<p.top||m>p.bottom&&(a=m-d.height)}return void(this._scrollElement&&(this._scrollElement.scrollTop=a))}a+=c}},n.prototype.getStartItemIndexInView=function(e){for(var t=0,n=this.state.pages||[];t<n.length;t++){var o=n[t];if(!o.isSpacer&&(this._scrollTop||0)>=o.top&&(this._scrollTop||0)<=o.top+o.height){if(!e){var r=Math.floor(o.height/o.itemCount);return o.startIndex+Math.floor((this._scrollTop-o.top)/r)}for(var i=0,a=o.startIndex;a<o.startIndex+o.itemCount;a++){if(r=e(a),o.top+i<=this._scrollTop&&this._scrollTop<o.top+i+r)return a;i+=r}}}return 0},n.prototype.componentDidMount=function(){this.setState(this._updatePages(this.props,this.state)),this._measureVersion++,this._scrollElement=wi(this._root.current),this._events.on(window,"resize",this._onAsyncResize),this._root.current&&this._events.on(this._root.current,"focus",this._onFocus,!0),this._scrollElement&&(this._events.on(this._scrollElement,"scroll",this._onScroll),this._events.on(this._scrollElement,"scroll",this._onAsyncScroll))},n.prototype.componentDidUpdate=function(e,t){var n=this.props,o=this.state;this.state.pagesVersion!==t.pagesVersion&&(n.getPageHeight?this._onAsyncIdle():this._updatePageMeasurements(o.pages)?(this._materializedRect=null,this._hasCompletedFirstRender?this._onAsyncScroll():(this._hasCompletedFirstRender=!0,this.setState(this._updatePages(n,o)))):this._onAsyncIdle(),n.onPagesUpdated&&n.onPagesUpdated(o.pages))},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose(),delete this._scrollElement},n.prototype.shouldComponentUpdate=function(e,t){var n=this.state.pages,o=t.pages,r=!1;if(!t.isScrolling&&this.state.isScrolling)return!0;if(e.version!==this.props.version)return!0;if(e.items===this.props.items&&n.length===o.length)for(var i=0;i<n.length;i++){var a=n[i],s=o[i];if(a.key!==s.key||a.itemCount!==s.itemCount){r=!0;break}}else r=!0;return r},n.prototype.forceUpdate=function(){this._invalidatePageCache(),this._updateRenderRects(this.props,this.state,!0),this.setState(this._updatePages(this.props,this.state)),this._measureVersion++,t.prototype.forceUpdate.call(this)},n.prototype.getTotalListHeight=function(){return this._surfaceRect.height},n.prototype.render=function(){for(var e=this.props,t=e.className,n=e.role,o=void 0===n?"list":n,r=e.onRenderSurface,i=e.onRenderRoot,a=this.state.pages,s=void 0===a?[]:a,l=[],u=wo(this.props,So),c=0,d=s;c<d.length;c++){var p=d[c];l.push(this._renderPage(p))}var f=r?Ua(r,this._onRenderSurface):this._onRenderSurface;return(i?Ua(i,this._onRenderRoot):this._onRenderRoot)({rootRef:this._root,pages:s,surfaceElement:f({surfaceRef:this._surface,pages:s,pageElements:l,divProps:{role:"presentation",className:"ms-List-surface"}}),divProps:H(H({},u),{className:xo("ms-List",t),role:l.length>0?o:void 0})})},n.prototype._shouldVirtualize=function(e){void 0===e&&(e=this.props);var t=e.onShouldVirtualize;return!t||t(e)},n.prototype._invalidatePageCache=function(){this._pageCache={}},n.prototype._renderPage=function(e){var t,n=this,o=this.props.usePageCache;if(o&&(t=this._pageCache[e.key])&&t.pageElement)return t.pageElement;var r=this._getPageStyle(e),i=this.props.onRenderPage,a=(void 0===i?this._onRenderPage:i)({page:e,className:"ms-List-page",key:e.key,ref:function(t){n._pageRefs[e.key]=t},style:r,role:"presentation"},this._onRenderPage);return o&&0===e.startIndex&&(this._pageCache[e.key]={page:e,pageElement:a}),a},n.prototype._getPageStyle=function(e){var t=this.props.getPageStyle;return H(H({},t?t(e):{}),e.items?{}:{height:e.height})},n.prototype._onFocus=function(e){for(var t=e.target;t!==this._surface.current;){var n=t.getAttribute("data-list-index");if(n){this._focusedIndex=Number(n);break}t=Zr(t)}},n.prototype._onScroll=function(){this.state.isScrolling||this.props.ignoreScrollingState||this.setState({isScrolling:!0}),this._resetRequiredWindows(),this._onScrollingDone()},n.prototype._resetRequiredWindows=function(){this._requiredWindowsAhead=0,this._requiredWindowsBehind=0},n.prototype._onAsyncScroll=function(){var e,t;this._updateRenderRects(this.props,this.state),this._materializedRect&&(e=this._requiredRect,t=this._materializedRect,e.top>=t.top&&e.left>=t.left&&e.bottom<=t.bottom&&e.right<=t.right)||this.setState(this._updatePages(this.props,this.state))},n.prototype._onAsyncIdle=function(){var e=this.props,t=e.renderedWindowsAhead,n=e.renderedWindowsBehind,o=this._requiredWindowsAhead,r=this._requiredWindowsBehind,i=Math.min(t,o+1),a=Math.min(n,r+1);i===o&&a===r||(this._requiredWindowsAhead=i,this._requiredWindowsBehind=a,this._updateRenderRects(this.props,this.state),this.setState(this._updatePages(this.props,this.state))),(t>i||n>a)&&this._onAsyncIdle()},n.prototype._onScrollingDone=function(){this.props.ignoreScrollingState||this.setState({isScrolling:!1})},n.prototype._onAsyncResize=function(){this.forceUpdate()},n.prototype._updatePages=function(e,t){this._requiredRect||this._updateRenderRects(e,t);var n=this._buildPages(e,t),o=t.pages;return this._notifyPageChanges(o,n.pages,this.props),H(H(H({},t),n),{pagesVersion:{}})},n.prototype._notifyPageChanges=function(e,t,n){var o=n.onPageAdded,r=n.onPageRemoved;if(o||r){for(var i={},a=0,s=e;a<s.length;a++)(c=s[a]).items&&(i[c.startIndex]=c);for(var l=0,u=t;l<u.length;l++){var c;(c=u[l]).items&&(i[c.startIndex]?delete i[c.startIndex]:this._onPageAdded(c))}for(var d in i)i.hasOwnProperty(d)&&this._onPageRemoved(i[d])}},n.prototype._updatePageMeasurements=function(e){var t=!1;if(!this._shouldVirtualize())return t;for(var n=0;n<e.length;n++){var o=e[n];o.items&&(t=this._measurePage(o)||t)}return t},n.prototype._measurePage=function(e){var t=!1,n=this._pageRefs[e.key],o=this._cachedPageHeights[e.startIndex];if(n&&this._shouldVirtualize()&&(!o||o.measureVersion!==this._measureVersion)){var r={width:n.clientWidth,height:n.clientHeight};(r.height||r.width)&&(t=e.height!==r.height,e.height=r.height,this._cachedPageHeights[e.startIndex]={height:r.height,measureVersion:this._measureVersion},this._estimatedPageHeight=Math.round((this._estimatedPageHeight*this._totalEstimates+r.height)/(this._totalEstimates+1)),this._totalEstimates++)}return t},n.prototype._onPageAdded=function(e){var t=this.props.onPageAdded;t&&t(e)},n.prototype._onPageRemoved=function(e){var t=this.props.onPageRemoved;t&&t(e)},n.prototype._buildPages=function(e,t){var n=e.renderCount,o=e.items,r=e.startIndex,i=e.getPageHeight;n=this._getRenderCount(e);for(var a=H({},ul),s=[],l=1,u=0,c=null,d=this._focusedIndex,p=r+n,f=this._shouldVirtualize(e),h=0===this._estimatedPageHeight&&!i,m=this._allowedRect,g=function(e){var n=v._getPageSpecification(e,m),i=n.height,g=n.data,y=n.key;l=n.itemCount;var b,_,C=u+i-1,k=function(e,t,n){void 0===n&&(n=0);for(var o=-1,r=n;e&&r<e.length;r++)if(t(e[r],r)){o=r;break}return o}(t.pages,(function(t){return!!t.items&&t.startIndex===e}))>-1,S=!m||C>=m.top&&u<=m.bottom,w=!v._requiredRect||C>=v._requiredRect.top&&u<=v._requiredRect.bottom;if(!h&&(w||S&&k)||!f||d>=e&&d<e+l||e===r){c&&(s.push(c),c=null);var x=Math.min(l,p-e),E=v._createPage(y,o.slice(e,e+x),e,void 0,void 0,g);E.top=u,E.height=i,v._visibleRect&&v._visibleRect.bottom&&(E.isVisible=C>=v._visibleRect.top&&u<=v._visibleRect.bottom),s.push(E),w&&v._allowedRect&&(b=a,_={top:u,bottom:C,height:i,left:m.left,right:m.right,width:m.width},b.top=_.top<b.top||-1===b.top?_.top:b.top,b.left=_.left<b.left||-1===b.left?_.left:b.left,b.bottom=_.bottom>b.bottom||-1===b.bottom?_.bottom:b.bottom,b.right=_.right>b.right||-1===b.right?_.right:b.right,b.width=b.right-b.left+1,b.height=b.bottom-b.top+1)}else c||(c=v._createPage("spacer-"+e,void 0,e,0,void 0,g,!0)),c.height=(c.height||0)+(C-u)+1,c.itemCount+=l;if(u+=C-u+1,h&&f)return"break"},v=this,y=r;y<p&&"break"!==g(y);y+=l);return c&&(c.key="spacer-end",s.push(c)),this._materializedRect=a,H(H({},t),{pages:s,measureVersion:this._measureVersion})},n.prototype._getPageSpecification=function(e,t){var n=this.props.getPageSpecification;if(n){var o=n(e,t),r=o.itemCount,i=void 0===r?this._getItemCountForPage(e,t):r,a=o.height;return{itemCount:i,height:void 0===a?this._getPageHeight(e,t,i):a,data:o.data,key:o.key}}return{itemCount:i=this._getItemCountForPage(e,t),height:this._getPageHeight(e,t,i)}},n.prototype._getPageHeight=function(e,t,n){if(this.props.getPageHeight)return this.props.getPageHeight(e,t,n);var o=this._cachedPageHeights[e];return o?o.height:this._estimatedPageHeight||30},n.prototype._getItemCountForPage=function(e,t){return(this.props.getItemCountForPage?this.props.getItemCountForPage(e,t):10)||10},n.prototype._createPage=function(e,t,n,o,r,i,a){void 0===n&&(n=-1),void 0===o&&(o=t?t.length:0),void 0===r&&(r={}),e=e||"page-"+n;var s=this._pageCache[e];return s&&s.page?s.page:{key:e,startIndex:n,itemCount:o,items:t,style:r,top:0,height:0,data:i,isSpacer:a||!1}},n.prototype._getRenderCount=function(e){var t=e||this.props,n=t.items,o=t.startIndex,r=t.renderCount;return void 0===r?n?n.length-o:0:r},n.prototype._updateRenderRects=function(e,t,n){var o=e.renderedWindowsAhead,r=e.renderedWindowsBehind,i=t.pages;if(this._shouldVirtualize(e)){var a=this._surfaceRect||H({},ul),s=this._scrollElement&&this._scrollElement.scrollHeight,l=this._scrollElement?this._scrollElement.scrollTop:0;this._surface.current&&(n||!i||!this._surfaceRect||!s||s!==this._scrollHeight||Math.abs(this._scrollTop-l)>this._estimatedPageHeight/3)&&(a=this._surfaceRect=dl(this._surface.current),this._scrollTop=l),!n&&s&&s===this._scrollHeight||this._measureVersion++,this._scrollHeight=s||0;var u=Math.max(0,-a.top),c=Ho(this._root.current),d={top:u,left:a.left,bottom:u+c.innerHeight,right:a.right,width:a.width,height:c.innerHeight};this._requiredRect=hl(d,this._requiredWindowsBehind,this._requiredWindowsAhead),this._allowedRect=hl(d,r,o),this._visibleRect=d}},n.defaultProps={startIndex:0,onRenderCell:function(t,n,o){return e.createElement(e.Fragment,null,t&&t.name||"")},renderedWindowsAhead:2,renderedWindowsBehind:2},n}(e.Component);function hl(e,t,n){var o=e.top-t*e.height,r=e.height+(t+n)*e.height;return{top:o,bottom:o+r,height:r,left:e.left,right:e.right,width:e.width}}var ml=function(t){function n(o){var r=t.call(this,o)||this;r._root=e.createRef(),r._list=e.createRef(),r._subGroupRefs={},r._droppingClassName="",r._onRenderGroupHeader=function(t){return e.createElement(Xs,H({},t))},r._onRenderGroupShowAll=function(t){return e.createElement(il,H({},t))},r._onRenderGroupFooter=function(t){return e.createElement(ll,H({},t))},r._renderSubGroup=function(t,o){var i=r.props,a=i.dragDropEvents,s=i.dragDropHelper,l=i.eventsToRegister,u=i.getGroupItemLimit,c=i.groupNestingDepth,d=i.groupProps,p=i.items,f=i.headerProps,h=i.showAllProps,m=i.footerProps,g=i.listProps,v=i.onRenderCell,y=i.selection,b=i.selectionMode,_=i.viewport,C=i.onRenderGroupHeader,k=i.onRenderGroupShowAll,S=i.onRenderGroupFooter,w=i.onShouldVirtualize,x=i.group,E=i.compact,I=t.level?t.level+1:c;return!t||t.count>0||d&&d.showEmptyGroups?e.createElement(n,{ref:function(e){return r._subGroupRefs["subGroup_"+o]=e},key:r._getGroupKey(t,o),dragDropEvents:a,dragDropHelper:s,eventsToRegister:l,footerProps:m,getGroupItemLimit:u,group:t,groupIndex:o,groupNestingDepth:I,groupProps:d,headerProps:f,items:p,listProps:g,onRenderCell:v,selection:y,selectionMode:b,showAllProps:h,viewport:_,onRenderGroupHeader:C,onRenderGroupShowAll:k,onRenderGroupFooter:S,onShouldVirtualize:w,groups:x?x.children:[],compact:E}):null},r._getGroupDragDropOptions=function(){var e=r.props,t=e.group,n=e.groupIndex,o=e.dragDropEvents;return{eventMap:e.eventsToRegister,selectionIndex:-1,context:{data:t,index:n,isGroup:!0},updateDropState:r._updateDroppingState,canDrag:o.canDrag,canDrop:o.canDrop,onDrop:o.onDrop,onDragStart:o.onDragStart,onDragEnter:o.onDragEnter,onDragLeave:o.onDragLeave,onDragEnd:o.onDragEnd,onDragOver:o.onDragOver}},r._updateDroppingState=function(e,t){var n=r.state.isDropping,o=r.props,i=o.dragDropEvents,a=o.group;n!==e&&(n?i&&i.onDragLeave&&i.onDragLeave(a,t):i&&i.onDragEnter&&(r._droppingClassName=i.onDragEnter(a,t)),r.setState({isDropping:e}))};var i=o.selection,a=o.group;return Br(r),r._id=ni("GroupedListSection"),r.state={isDropping:!1,isSelected:!(!i||!a)&&i.isRangeSelected(a.startIndex,a.count)},r._events=new Jr(r),r}return B(n,t),n.prototype.componentDidMount=function(){var e=this.props,t=e.dragDropHelper,n=e.selection;t&&this._root.current&&(this._dragDropSubscription=t.subscribe(this._root.current,this._events,this._getGroupDragDropOptions())),n&&this._events.on(n,rs,this._onSelectionChange)},n.prototype.componentWillUnmount=function(){this._events.dispose(),this._dragDropSubscription&&this._dragDropSubscription.dispose()},n.prototype.componentDidUpdate=function(e){this.props.group===e.group&&this.props.groupIndex===e.groupIndex&&this.props.dragDropHelper===e.dragDropHelper||(this._dragDropSubscription&&(this._dragDropSubscription.dispose(),delete this._dragDropSubscription),this.props.dragDropHelper&&this._root.current&&(this._dragDropSubscription=this.props.dragDropHelper.subscribe(this._root.current,this._events,this._getGroupDragDropOptions())))},n.prototype.render=function(){var t=this.props,n=t.getGroupItemLimit,o=t.group,r=t.groupIndex,i=t.headerProps,a=t.showAllProps,s=t.footerProps,l=t.viewport,u=t.selectionMode,c=t.onRenderGroupHeader,d=void 0===c?this._onRenderGroupHeader:c,p=t.onRenderGroupShowAll,f=void 0===p?this._onRenderGroupShowAll:p,h=t.onRenderGroupFooter,m=void 0===h?this._onRenderGroupFooter:h,g=t.onShouldVirtualize,v=t.groupedListClassNames,y=t.groups,b=t.compact,_=t.listProps,C=void 0===_?{}:_,k=this.state.isSelected,S=o&&n?n(o):1/0,w=o&&!o.children&&!o.isCollapsed&&!o.isShowingAll&&(o.count>S||o.hasMoreData),x=o&&o.children&&o.children.length>0,E=C.version,I={group:o,groupIndex:r,groupLevel:o?o.level:0,isSelected:k,selected:k,viewport:l,selectionMode:u,groups:y,compact:b},D={groupedListId:this._id,ariaSetSize:y?y.length:void 0,ariaPosInSet:void 0!==r?r+1:void 0},R=H(H(H({},i),I),D),T=H(H({},a),I),P=H(H({},s),I),M=!!this.props.dragDropHelper&&this._getGroupDragDropOptions().canDrag(o)&&!!this.props.dragDropEvents.canDragGroups;return e.createElement("div",H({ref:this._root},M&&{draggable:!0},{className:xo(v&&v.group,this._getDroppingClassName()),role:"presentation"}),d(R,this._onRenderGroupHeader),o&&o.isCollapsed?null:x?e.createElement(fl,{role:"presentation",ref:this._list,items:o?o.children:[],onRenderCell:this._renderSubGroup,getItemCountForPage:this._returnOne,onShouldVirtualize:g,version:E,id:this._id}):this._onRenderGroup(S),o&&o.isCollapsed?null:w&&f(T,this._onRenderGroupShowAll),m(P,this._onRenderGroupFooter))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this.forceListUpdate()},n.prototype.forceListUpdate=function(){var e=this.props.group;if(this._list.current){if(this._list.current.forceUpdate(),e&&e.children&&e.children.length>0)for(var t=e.children.length,n=0;n<t;n++){var o;(o=this._list.current.pageRefs["subGroup_"+String(n)])&&o.forceListUpdate()}}else(o=this._subGroupRefs["subGroup_"+String(0)])&&o.forceListUpdate()},n.prototype._onSelectionChange=function(){var e=this.props,t=e.group,n=e.selection;if(n&&t){var o=n.isRangeSelected(t.startIndex,t.count);o!==this.state.isSelected&&this.setState({isSelected:o})}},n.prototype._onRenderGroupCell=function(e,t,n){return function(o,r){return e(t,o,r,n)}},n.prototype._onRenderGroup=function(t){var n=this.props,o=n.group,r=n.items,i=n.onRenderCell,a=n.listProps,s=n.groupNestingDepth,l=n.onShouldVirtualize,u=n.groupProps,c=o&&!o.isShowingAll?o.count:r.length,d=o?o.startIndex:0;return e.createElement(fl,H({role:u&&u.role?u.role:"rowgroup","aria-label":null==o?void 0:o.name,items:r,onRenderCell:this._onRenderGroupCell(i,s,o),ref:this._list,renderCount:Math.min(c,t),startIndex:d,onShouldVirtualize:l,id:this._id},a))},n.prototype._returnOne=function(){return 1},n.prototype._getGroupKey=function(e,t){return"group-"+(e&&e.key?e.key:String(e.level)+String(t))},n.prototype._getDroppingClassName=function(){var e=this.state.isDropping,t=this.props,n=t.group,o=t.groupedListClassNames;return xo((e=!(!n||!e))&&this._droppingClassName,e&&"is-dropping",e&&o&&o.groupIsDropping)},n}(e.Component),gl=kr(),vl=Ja.rowHeight,yl=Ja.compactRowHeight,bl=function(t){function n(n){var o=t.call(this,n)||this;o._list=e.createRef(),o._renderGroup=function(t,n){var r=o.props,i=r.dragDropEvents,a=r.dragDropHelper,s=r.eventsToRegister,l=r.groupProps,u=r.items,c=r.listProps,d=r.onRenderCell,p=r.selectionMode,f=r.selection,h=r.viewport,m=r.onShouldVirtualize,g=r.groups,v=r.compact,y={onToggleSelectGroup:o._onToggleSelectGroup,onToggleCollapse:o._onToggleCollapse,onToggleSummarize:o._onToggleSummarize},b=H(H({},l.headerProps),y),_=H(H({},l.showAllProps),y),C=H(H({},l.footerProps),y),k=o._getGroupNestingDepth();if(!l.showEmptyGroups&&t&&0===t.count)return null;var S=H(H({},c||{}),{version:o.state.version});return e.createElement(ml,{key:o._getGroupKey(t,n),dragDropEvents:i,dragDropHelper:a,eventsToRegister:s,footerProps:C,getGroupItemLimit:l&&l.getGroupItemLimit,group:t,groupIndex:n,groupNestingDepth:k,groupProps:l,headerProps:b,listProps:S,items:u,onRenderCell:d,onRenderGroupHeader:l.onRenderHeader,onRenderGroupShowAll:l.onRenderShowAll,onRenderGroupFooter:l.onRenderFooter,selectionMode:p,selection:f,showAllProps:_,viewport:h,onShouldVirtualize:m,groupedListClassNames:o._classNames,groups:g,compact:v})},o._getDefaultGroupItemLimit=function(e){return e.children&&e.children.length>0?e.children.length:e.count},o._getGroupItemLimit=function(e){var t=o.props.groupProps;return(t&&t.getGroupItemLimit?t.getGroupItemLimit:o._getDefaultGroupItemLimit)(e)},o._getGroupHeight=function(e){var t=o.props.compact?yl:vl;return t+(e.isCollapsed?0:t*o._getGroupItemLimit(e))},o._getPageHeight=function(e){var t=o.state.groups,n=o.props.getGroupHeight,r=void 0===n?o._getGroupHeight:n,i=t&&t[e];return i?r(i,e):0},o._onToggleCollapse=function(e){var t=o.props.groupProps,n=t&&t.headerProps&&t.headerProps.onToggleCollapse;e&&(n&&n(e),e.isCollapsed=!e.isCollapsed,o._updateIsSomeGroupExpanded(),o.forceUpdate())},o._onToggleSelectGroup=function(e){var t=o.props,n=t.selection,r=t.selectionMode;e&&n&&r===Ka.multiple&&n.toggleRangeSelected(e.startIndex,e.count)},o._isInnerZoneKeystroke=function(e){return e.which===Vo(Lo)},o._onToggleSummarize=function(e){var t=o.props.groupProps,n=t&&t.showAllProps&&t.showAllProps.onToggleSummarize;n?n(e):(e&&(e.isShowingAll=!e.isShowingAll),o.forceUpdate())},o._getPageSpecification=function(e){var t=o.state.groups,n=t&&t[e];return{key:n&&n.key}},Br(o),o._isSomeGroupExpanded=o._computeIsSomeGroupExpanded(n.groups);var r=n.listProps,i=(void 0===r?{}:r).version,a=void 0===i?{}:i;return o.state={groups:n.groups,items:n.items,listProps:n.listProps,version:a},o}return B(n,t),n.getDerivedStateFromProps=function(e,t){var n=e.groups,o=e.selectionMode,r=e.compact,i=e.items,a=e.listProps,s=a&&a.version,l=H(H({},t),{selectionMode:o,compact:r,groups:n,listProps:a}),u=!1;return s===(t.listProps&&t.listProps.version)&&i===t.items&&n===t.groups&&o===t.selectionMode&&r===t.compact||(u=!0),n!==t.groups&&(l=H(H({},l),{groups:n})),o===t.selectionMode&&r===t.compact||(u=!0),u&&(l=H(H({},l),{version:{}})),l},n.prototype.scrollToIndex=function(e,t,n){this._list.current&&this._list.current.scrollToIndex(e,t,n)},n.prototype.getStartItemIndexInView=function(){return this._list.current.getStartItemIndexInView()||0},n.prototype.componentDidMount=function(){var e=this.props,t=e.groupProps,n=e.groups,o=void 0===n?[]:n;t&&t.isAllGroupsCollapsed&&this._setGroupsCollapsedState(o,t.isAllGroupsCollapsed)},n.prototype.render=function(){var t=this.props,n=t.className,o=t.usePageCache,r=t.onShouldVirtualize,i=t.theme,a=t.role,s=void 0===a?"treegrid":a,l=t.styles,u=t.compact,c=t.focusZoneProps,d=void 0===c?{}:c,p=t.rootListProps,f=void 0===p?{}:p,h=this.state,m=h.groups,g=h.version;this._classNames=gl(l,{theme:i,className:n,compact:u});var v=d.shouldEnterInnerZone,y=void 0===v?this._isInnerZoneKeystroke:v;return e.createElement(Vi,H({direction:ri.vertical,"data-automationid":"GroupedList","data-is-scrollable":"false",role:"presentation"},d,{shouldEnterInnerZone:y,className:xo(this._classNames.root,d.className)}),m?e.createElement(fl,H({ref:this._list,role:s,items:m,onRenderCell:this._renderGroup,getItemCountForPage:this._returnOne,getPageHeight:this._getPageHeight,getPageSpecification:this._getPageSpecification,usePageCache:o,onShouldVirtualize:r,version:g},f)):this._renderGroup(void 0,0))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this._forceListUpdates()},n.prototype.toggleCollapseAll=function(e){var t=this.state.groups,n=void 0===t?[]:t,o=this.props.groupProps,r=o&&o.onToggleCollapseAll;n.length>0&&(r&&r(e),this._setGroupsCollapsedState(n,e),this._updateIsSomeGroupExpanded(),this.forceUpdate())},n.prototype._setGroupsCollapsedState=function(e,t){for(var n=0;n<e.length;n++)e[n].isCollapsed=t},n.prototype._returnOne=function(){return 1},n.prototype._getGroupKey=function(e,t){return"group-"+(e&&e.key?e.key:String(t))},n.prototype._getGroupNestingDepth=function(){for(var e=0,t=this.state.groups;t&&t.length>0;)e++,t=t[0].children;return e},n.prototype._forceListUpdates=function(e){this.setState({version:{}})},n.prototype._computeIsSomeGroupExpanded=function(e){var t=this;return!(!e||!e.some((function(e){return e.children?t._computeIsSomeGroupExpanded(e.children):!e.isCollapsed})))},n.prototype._updateIsSomeGroupExpanded=function(){var e=this.state.groups,t=this.props.onGroupExpandStateChanged,n=this._computeIsSomeGroupExpanded(e);this._isSomeGroupExpanded!==n&&(t&&t(n),this._isSomeGroupExpanded=n)},n.defaultProps={selectionMode:Ka.multiple,isHeaderVisible:!0,groupProps:{},compact:!1},n}(e.Component),_l=vr(bl,(function(e){var t,n,o=e.theme,r=e.className,i=e.compact,a=o.palette,s=Nt(zs,o);return{root:[s.root,o.fonts.small,{position:"relative",selectors:(t={},t["."+s.listCell]={minHeight:38},t)},i&&[s.compact,{selectors:(n={},n["."+s.listCell]={minHeight:32},n)}],r],group:[s.group,{transition:"background-color 0.267s cubic-bezier(0.445, 0.050, 0.550, 0.950)"}],groupIsDropping:{backgroundColor:a.neutralLight}}}),void 0,{scope:"GroupedList"}),Cl=["setState","render","componentWillMount","UNSAFE_componentWillMount","componentDidMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","getSnapshotBeforeUpdate","UNSAFE_componentWillUpdate","componentDidUpdate","componentWillUnmount"],kl=function(e){function t(t){var n=e.call(this,t)||this;return n._updateComposedComponentRef=n._updateComposedComponentRef.bind(n),n}return B(t,e),t.prototype._updateComposedComponentRef=function(e){var t;this._composedComponentInstance=e,e?this._hoisted=function(e,t,n){void 0===n&&(n=Cl);var o=[],r=function(r){"function"!=typeof t[r]||void 0!==e[r]||n&&-1!==n.indexOf(r)||(o.push(r),e[r]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];t[r].apply(t,e)})};for(var i in t)r(i);return o}(this,e):this._hoisted&&(t=this,this._hoisted.forEach((function(e){return delete t[e]})))},t}(e.Component);function Sl(e){var t;return e&&(e===window?t={left:0,top:0,width:window.innerWidth,height:window.innerHeight,right:window.innerWidth,bottom:window.innerHeight}:e.getBoundingClientRect&&(t=e.getBoundingClientRect())),t}function wl(t){return function(n){function o(t){var o=n.call(this,t)||this;return o._root=e.createRef(),o._registerResizeObserver=function(){var e=Ho(o._root.current);o._viewportResizeObserver=new e.ResizeObserver(o._onAsyncResize),o._viewportResizeObserver.observe(o._root.current)},o._unregisterResizeObserver=function(){o._viewportResizeObserver&&(o._viewportResizeObserver.disconnect(),delete o._viewportResizeObserver)},o._updateViewport=function(e){var t=o.state.viewport,n=o._root.current,r=Sl(wi(n)),i=Sl(n);((i&&i.width)!==t.width||(r&&r.height)!==t.height)&&o._resizeAttempts<3&&i&&r?(o._resizeAttempts++,o.setState({viewport:{width:i.width,height:r.height}},(function(){o._updateViewport(e)}))):(o._resizeAttempts=0,e&&o._composedComponentInstance&&o._composedComponentInstance.forceUpdate())},o._async=new qr(o),o._events=new Jr(o),o._resizeAttempts=0,o.state={viewport:{width:0,height:0}},o}return B(o,n),o.prototype.componentDidMount=function(){var e=this,t=this.props,n=t.delayFirstMeasure,o=t.disableResizeObserver,r=t.skipViewportMeasures,i=Ho(this._root.current);this._onAsyncResize=this._async.debounce(this._onAsyncResize,500,{leading:!1}),r||(!o&&this._isResizeObserverAvailable()?this._registerResizeObserver():this._events.on(i,"resize",this._onAsyncResize),n?this._async.setTimeout((function(){e._updateViewport()}),500):this._updateViewport())},o.prototype.componentDidUpdate=function(e){var t=e.skipViewportMeasures,n=this.props,o=n.disableResizeObserver,r=n.skipViewportMeasures,i=Ho(this._root.current);r!==t&&(r?(this._unregisterResizeObserver(),this._events.off(i,"resize",this._onAsyncResize)):(!o&&this._isResizeObserverAvailable()?this._viewportResizeObserver||this._registerResizeObserver():this._events.on(i,"resize",this._onAsyncResize),this._updateViewport()))},o.prototype.componentWillUnmount=function(){this._events.dispose(),this._async.dispose(),this._unregisterResizeObserver()},o.prototype.render=function(){var n=this.state.viewport,o=n.width>0&&n.height>0?n:void 0;return e.createElement("div",{className:"ms-Viewport",ref:this._root,style:{minWidth:1,minHeight:1}},e.createElement(t,H({ref:this._updateComposedComponentRef,viewport:o},this.props)))},o.prototype.forceUpdate=function(){this._updateViewport(!0)},o.prototype._onAsyncResize=function(){this._updateViewport()},o.prototype._isResizeObserverAvailable=function(){var e=Ho(this._root.current);return e&&e.ResizeObserver},o}(kl)}function xl(t){var n=e.useRef();return void 0===n.current&&(n.current={value:"function"==typeof t?t():t}),n.current.value}var El=kr(),Il=100,Dl=function(t){var n=t.selection,o=t.ariaLabelForListHeader,r=t.ariaLabelForSelectAllCheckbox,i=t.ariaLabelForSelectionColumn,a=t.className,s=t.checkboxVisibility,l=t.compact,u=t.constrainMode,c=t.dragDropEvents,d=t.groups,p=t.groupProps,f=t.indentWidth,h=t.items,m=t.isPlaceholderData,g=t.isHeaderVisible,v=t.layoutMode,y=t.onItemInvoked,b=t.onItemContextMenu,_=t.onColumnHeaderClick,C=t.onColumnHeaderContextMenu,k=t.selectionMode,S=void 0===k?n.mode:k,w=t.selectionPreservedOnEmptyClick,x=t.selectionZoneProps,E=t.ariaLabel,I=t.ariaLabelForGrid,D=t.rowElementEventMap,R=t.shouldApplyApplicationRole,T=void 0!==R&&R,P=t.getKey,M=t.listProps,F=t.usePageCache,L=t.onShouldVirtualize,A=t.viewport,N=t.minimumPixelsForDrag,B=t.getGroupHeight,O=t.styles,z=t.theme,U=t.cellStyleProps,V=void 0===U?Xa:U,G=t.onRenderCheckbox,j=t.useFastIcons,K=t.dragDropHelper,q=t.adjustedColumns,Z=t.isCollapsed,Q=t.isSizing,Y=t.isSomeGroupExpanded,$=t.version,X=t.rootRef,J=t.listRef,ee=t.focusZoneRef,te=t.columnReorderOptions,ne=t.groupedListRef,oe=t.headerRef,re=t.onGroupExpandStateChanged,ie=t.onColumnIsSizingChanged,ae=t.onRowDidMount,se=t.onRowWillUnmount,le=t.disableSelectionZone,ue=t.onColumnResized,ce=t.onColumnAutoResized,de=t.onToggleCollapse,pe=t.onActiveRowChanged,fe=t.onBlur,he=t.rowElementEventMap,me=t.onRenderMissingItem,ge=t.onRenderItemColumn,ve=t.getCellValueKey,ye=t.getRowAriaLabel,be=t.getRowAriaDescribedBy,_e=t.checkButtonAriaLabel,Ce=t.checkButtonGroupAriaLabel,ke=t.checkboxCellClassName,Se=t.useReducedRowRenderer,we=t.enableUpdateAnimations,xe=t.enterModalSelectionOnTouch,Ee=t.onRenderDefaultRow,Ie=t.selectionZoneRef,De=t.focusZoneProps,Re="grid",Te=t.role?t.role:Re,Pe=ni("row"),Me=function(e){for(var t=0,n=e;n&&n.length>0;)t++,n=n[0].children;return t}(d),Fe=function(t){return e.useMemo((function(){var e={};if(t)for(var n=1,o=1,r=0,i=t;r<i.length;r++){var a=i[r];e[a.key]={numOfGroupHeadersBeforeItem:o,totalRowCount:n},o++,n+=a.count+1}return e}),[t])}(d),Le=e.useMemo((function(){return H({renderedWindowsAhead:Q?0:2,renderedWindowsBehind:Q?0:2,getKey:P,version:$},M)}),[Q,P,$,M]),Ae=us.none;if(S===Ka.single&&(Ae=us.hidden),S===Ka.multiple){var Ne=p&&p.headerProps&&p.headerProps.isCollapsedGroupSelectVisible;void 0===Ne&&(Ne=!0),Ae=Ne||!d||Y?us.visible:us.hidden}s===Kr.hidden&&(Ae=us.none);var Be=e.useCallback((function(t){return e.createElement(ws,H({},t))}),[]),He=e.useCallback((function(){return null}),[]),Oe=t.onRenderDetailsHeader,ze=e.useMemo((function(){return Oe?Ua(Oe,Be):Be}),[Oe,Be]),We=t.onRenderDetailsFooter,Ue=e.useMemo((function(){return We?Ua(We,He):He}),[We,He]),Ve=e.useMemo((function(){return{columns:q,groupNestingDepth:Me,selection:n,selectionMode:S,viewport:A,checkboxVisibility:s,indentWidth:f,cellStyleProps:V}}),[q,Me,n,S,A,s,f,V]),Ge=te&&te.onDragEnd,je=e.useCallback((function(e,t){var n=e.dropLocation,o=Gr.outside;if(Ge){if(n&&n!==Gr.header)o=n;else if(X.current){var r=X.current.getBoundingClientRect();t.clientX>r.left&&t.clientX<r.right&&t.clientY>r.top&&t.clientY<r.bottom&&(o=Gr.surface)}Ge(o)}}),[Ge,X]),Ke=e.useMemo((function(){if(te)return H(H({},te),{onColumnDragEnd:je})}),[te,je]),qe=(g?1:0)+function(e){var t=0;if(e)for(var n=W([],e),o=void 0;n&&n.length>0;)++t,(o=n.pop())&&o.children&&n.push.apply(n,o.children);return t}(d)+(h?h.length:0),Ze=(Ae!==us.none?1:0)+(q?q.length:0)+(d?1:0),Qe=e.useMemo((function(){return El(O,{theme:z,compact:l,isFixed:v===jr.fixedColumns,isHorizontalConstrained:u===Vr.horizontalConstrained,className:a})}),[O,z,l,v,u,a]),Ye=p&&p.onRenderFooter,$e=e.useMemo((function(){return Ye?function(e,t){return Ye(H(H({},e),{columns:q,groupNestingDepth:Me,indentWidth:f,selection:n,selectionMode:S,viewport:A,checkboxVisibility:s,cellStyleProps:V}),t)}:void 0}),[Ye,q,Me,f,n,S,A,s,V]),Xe=p&&p.onRenderHeader,Je=e.useMemo((function(){return Xe?function(e,t){var o,r,i=e.groupIndex,a=void 0!==i?null===(r=null===(o=e.groups)||void 0===o?void 0:o[i])||void 0===r?void 0:r.key:void 0,l=void 0!==a&&Fe[a]?Fe[a].totalRowCount:0;return Xe(H(H({},e),{columns:q,groupNestingDepth:Me,indentWidth:f,selection:n,selectionMode:s!==Kr.hidden?S:Ka.none,viewport:A,checkboxVisibility:s,cellStyleProps:V,ariaColSpan:q.length,ariaPosInSet:void 0,ariaSetSize:void 0,ariaRowCount:void 0,ariaRowIndex:void 0!==i?l+(g?1:0):void 0}),t)}:function(e,t){var n,o,r=e.groupIndex,i=void 0!==r?null===(o=null===(n=e.groups)||void 0===n?void 0:n[r])||void 0===o?void 0:o.key:void 0,a=void 0!==i&&Fe[i]?Fe[i].totalRowCount:0;return t(H(H({},e),{ariaColSpan:q.length,ariaPosInSet:void 0,ariaSetSize:void 0,ariaRowCount:void 0,ariaRowIndex:void 0!==r?a+(g?1:0):void 0}))}}),[Xe,q,Me,f,g,n,S,A,s,V,Fe]),et=e.useMemo((function(){var e;return H(H({},p),{role:Te===Re?"rowgroup":"presentation",onRenderFooter:$e,onRenderHeader:Je,headerProps:H(H({},null==p?void 0:p.headerProps),{selectAllButtonProps:H({"aria-label":Ce},null===(e=null==p?void 0:p.headerProps)||void 0===e?void 0:e.selectAllButtonProps)})})}),[p,$e,Je,Ce,Te]),tt=xl((function(){return Zn((function(e){var t=0;return e.forEach((function(e){return t+=e.calculatedWidth||e.minWidth})),t}))})),nt=p&&p.collapseAllVisibility,ot=e.useMemo((function(){return tt(q)}),[q,tt]),rt=e.useCallback((function(e,o,r,i){var a=t.onRenderRow?Ua(t.onRenderRow,Ee):Ee,u=i?i.key:void 0,d=u&&Fe[u]?Fe[u].numOfGroupHeadersBeforeItem:0,p={item:o,itemIndex:r,flatIndexOffset:(g?2:1)+d,compact:l,columns:q,groupNestingDepth:e,id:Pe+"-"+r,selectionMode:S,selection:n,onDidMount:ae,onWillUnmount:se,onRenderItemColumn:ge,getCellValueKey:ve,eventsToRegister:he,dragDropEvents:c,dragDropHelper:K,viewport:A,checkboxVisibility:s,collapseAllVisibility:nt,getRowAriaLabel:ye,getRowAriaDescribedBy:be,checkButtonAriaLabel:_e,checkboxCellClassName:ke,useReducedRowRenderer:Se,indentWidth:f,cellStyleProps:V,onRenderDetailsCheckbox:G,enableUpdateAnimations:we,rowWidth:ot,useFastIcons:j,role:Te===Re?void 0:"presentation"};return o?a(p):me?me(r,p):null}),[l,q,S,n,Pe,ae,se,ge,ve,he,c,K,A,s,nt,ye,be,g,_e,ke,Se,f,V,G,we,j,Ee,me,t.onRenderRow,ot,Te,Fe]),it=e.useCallback((function(e){return function(t,n){return rt(e,t,n)}}),[rt]),at=e.useCallback((function(e){return e.which===Vo(Lo,z)}),[z]),st=H(H({},De),{componentRef:ee,className:Qe.focusZone,direction:De?De.direction:ri.vertical,shouldEnterInnerZone:De&&De.shouldEnterInnerZone?De.shouldEnterInnerZone:at,onActiveElementChanged:De&&De.onActiveElementChanged?De.onActiveElementChanged:pe,shouldRaiseClicksOnEnter:!1,onBlur:De&&De.onBlur?De.onBlur:fe}),lt=d?e.createElement(_l,{focusZoneProps:st,componentRef:ne,groups:d,groupProps:et,items:h,onRenderCell:rt,role:"presentation",selection:n,selectionMode:s!==Kr.hidden?S:Ka.none,dragDropEvents:c,dragDropHelper:K,eventsToRegister:D,listProps:Le,onGroupExpandStateChanged:re,usePageCache:F,onShouldVirtualize:L,getGroupHeight:B,compact:l}):e.createElement(Vi,H({},st),e.createElement(fl,H({ref:J,role:"presentation",items:h,onRenderCell:it(0),usePageCache:F,onShouldVirtualize:L},Le))),ut=e.useCallback((function(e){e.which===Ao&&ee.current&&ee.current.focus()&&(0===n.getSelectedIndices().length&&n.setIndexSelected(0,!0,!1),e.preventDefault(),e.stopPropagation())}),[n,ee]),ct=e.useCallback((function(e){e.which!==Fo||e.altKey||oe.current&&oe.current.focus()&&(e.preventDefault(),e.stopPropagation())}),[oe]);return e.createElement("div",H({ref:X,className:Qe.root,"data-automationid":"DetailsList","data-is-scrollable":"false","aria-label":E},T?{role:"application"}:{}),e.createElement(Mr,null),e.createElement("div",{role:Te,"aria-label":I,"aria-rowcount":m?-1:qe,"aria-colcount":Ze,"aria-readonly":"true","aria-busy":m},e.createElement("div",{onKeyDown:ut,role:"presentation",className:Qe.headerWrapper},g&&ze({componentRef:oe,selectionMode:S,layoutMode:v,selection:n,columns:q,onColumnClick:_,onColumnContextMenu:C,onColumnResized:ue,onColumnIsSizingChanged:ie,onColumnAutoResized:ce,groupNestingDepth:Me,isAllCollapsed:Z,onToggleCollapseAll:de,ariaLabel:o,ariaLabelForSelectAllCheckbox:r,ariaLabelForSelectionColumn:i,selectAllVisibility:Ae,collapseAllVisibility:p&&p.collapseAllVisibility,viewport:A,columnReorderProps:Ke,minimumPixelsForDrag:N,cellStyleProps:V,checkboxVisibility:s,indentWidth:f,onRenderDetailsCheckbox:G,rowWidth:tt(q),useFastIcons:j},ze)),e.createElement("div",{onKeyDown:ct,role:"presentation",className:Qe.contentWrapper},le?lt:e.createElement(As,H({ref:Ie,selection:n,selectionPreservedOnEmptyClick:w,selectionMode:S,onItemInvoked:y,onItemContextMenu:b,enterModalOnTouch:xe},x||{}),lt)),Ue(H({},Ve))))},Rl=function(t){function n(n){var o=t.call(this,n)||this;return o._root=e.createRef(),o._header=e.createRef(),o._groupedList=e.createRef(),o._list=e.createRef(),o._focusZone=e.createRef(),o._selectionZone=e.createRef(),o._onRenderRow=function(t,n){return e.createElement(Ts,H({},t))},o._getDerivedStateFromProps=function(e,t){var n=o.props,r=n.checkboxVisibility,i=n.items,a=n.setKey,s=n.selectionMode,l=void 0===s?o._selection.mode:s,u=n.columns,c=n.viewport,d=n.compact,p=n.dragDropEvents,f=(o.props.groupProps||{}).isAllGroupsCollapsed,h=void 0===f?void 0:f,m=e.viewport&&e.viewport.width||0,g=c&&c.width||0,v=e.setKey!==a||void 0===e.setKey,y=!1;e.layoutMode!==o.props.layoutMode&&(y=!0);var b=t;return v&&(o._initialFocusedIndex=e.initialFocusedIndex,b=H(H({},b),{focusedItemIndex:void 0!==o._initialFocusedIndex?o._initialFocusedIndex:-1})),o.props.disableSelectionZone||e.items===i||o._selection.setItems(e.items,v),e.checkboxVisibility===r&&e.columns===u&&m===g&&e.compact===d||(y=!0),b=H(H({},b),o._adjustColumns(e,b,!0)),e.selectionMode!==l&&(y=!0),void 0===h&&e.groupProps&&void 0!==e.groupProps.isAllGroupsCollapsed&&(b=H(H({},b),{isCollapsed:e.groupProps.isAllGroupsCollapsed,isSomeGroupExpanded:!e.groupProps.isAllGroupsCollapsed})),e.dragDropEvents!==p&&(o._dragDropHelper&&o._dragDropHelper.dispose(),o._dragDropHelper=e.dragDropEvents?new ds({selection:o._selection,minimumPixelsForDrag:e.minimumPixelsForDrag}):void 0,y=!0),y&&(b=H(H({},b),{version:{}})),b},o._onGroupExpandStateChanged=function(e){o.setState({isSomeGroupExpanded:e})},o._onColumnIsSizingChanged=function(e,t){o.setState({isSizing:t})},o._onRowDidMount=function(e){var t=e.props,n=t.item,r=t.itemIndex,i=o._getItemKey(n,r);o._activeRows[i]=e,o._setFocusToRowIfPending(e);var a=o.props.onRowDidMount;a&&a(n,r)},o._onRowWillUnmount=function(e){var t=o.props.onRowWillUnmount,n=e.props,r=n.item,i=n.itemIndex,a=o._getItemKey(r,i);delete o._activeRows[a],t&&t(r,i)},o._onToggleCollapse=function(e){o.setState({isCollapsed:e}),o._groupedList.current&&o._groupedList.current.toggleCollapseAll(e)},o._onColumnResized=function(e,t,n){var r=Math.max(e.minWidth||Il,t);o.props.onColumnResize&&o.props.onColumnResize(e,r,n),o._rememberCalculatedWidth(e,r),o.setState(H(H({},o._adjustColumns(o.props,o.state,!0,n)),{version:{}}))},o._onColumnAutoResized=function(e,t){var n=0,r=0,i=Object.keys(o._activeRows).length;for(var a in o._activeRows)o._activeRows.hasOwnProperty(a)&&o._activeRows[a].measureCell(t,(function(a){n=Math.max(n,a),++r===i&&o._onColumnResized(e,n,t)}))},o._onActiveRowChanged=function(e,t){var n=o.props,r=n.items,i=n.onActiveItemChanged;if(e&&e.getAttribute("data-item-index")){var a=Number(e.getAttribute("data-item-index"));a>=0&&(i&&i(r[a],a,t),o.setState({focusedItemIndex:a}))}},o._onBlur=function(e){o.setState({focusedItemIndex:-1})},Br(o),o._async=new qr(o),o._activeRows={},o._columnOverrides={},o.state={focusedItemIndex:-1,lastWidth:0,adjustedColumns:o._getAdjustedColumns(n,void 0),isSizing:!1,isCollapsed:n.groupProps&&n.groupProps.isAllGroupsCollapsed,isSomeGroupExpanded:n.groupProps&&!n.groupProps.isAllGroupsCollapsed,version:{},getDerivedStateFromProps:o._getDerivedStateFromProps},o._selection=n.selection||new Ns({onSelectionChanged:void 0,getKey:n.getKey,selectionMode:n.selectionMode}),o.props.disableSelectionZone||o._selection.setItems(n.items,!1),o._dragDropHelper=n.dragDropEvents?new ds({selection:o._selection,minimumPixelsForDrag:n.minimumPixelsForDrag}):void 0,o._initialFocusedIndex=n.initialFocusedIndex,o}return B(n,t),n.getDerivedStateFromProps=function(e,t){return t.getDerivedStateFromProps(e,t)},n.prototype.scrollToIndex=function(e,t,n){this._list.current&&this._list.current.scrollToIndex(e,t,n),this._groupedList.current&&this._groupedList.current.scrollToIndex(e,t,n)},n.prototype.focusIndex=function(e,t,n,o){void 0===t&&(t=!1);var r=this.props.items[e];if(r){this.scrollToIndex(e,n,o);var i=this._getItemKey(r,e),a=this._activeRows[i];a&&this._setFocusToRow(a,t)}},n.prototype.getStartItemIndexInView=function(){return this._list&&this._list.current?this._list.current.getStartItemIndexInView():this._groupedList&&this._groupedList.current?this._groupedList.current.getStartItemIndexInView():0},n.prototype.componentWillUnmount=function(){this._dragDropHelper&&this._dragDropHelper.dispose(),this._async.dispose()},n.prototype.componentDidUpdate=function(e,t){if(this._notifyColumnsResized(),void 0!==this._initialFocusedIndex&&(i=this.props.items[this._initialFocusedIndex])){var n=this._getItemKey(i,this._initialFocusedIndex);(o=this._activeRows[n])&&this._setFocusToRowIfPending(o)}if(this.props.items!==e.items&&this.props.items.length>0&&-1!==this.state.focusedItemIndex&&!Qr(this._root.current,document.activeElement,!1)){var o,r=this.state.focusedItemIndex<this.props.items.length?this.state.focusedItemIndex:this.props.items.length-1,i=this.props.items[r];n=this._getItemKey(i,this.state.focusedItemIndex),(o=this._activeRows[n])?this._setFocusToRow(o):this._initialFocusedIndex=r}this.props.onDidUpdate&&this.props.onDidUpdate(this)},n.prototype.render=function(){return e.createElement(Dl,H({},this.props,this.state,{selection:this._selection,dragDropHelper:this._dragDropHelper,rootRef:this._root,listRef:this._list,groupedListRef:this._groupedList,focusZoneRef:this._focusZone,headerRef:this._header,selectionZoneRef:this._selectionZone,onGroupExpandStateChanged:this._onGroupExpandStateChanged,onColumnIsSizingChanged:this._onColumnIsSizingChanged,onRowDidMount:this._onRowDidMount,onRowWillUnmount:this._onRowWillUnmount,onColumnResized:this._onColumnResized,onColumnAutoResized:this._onColumnAutoResized,onToggleCollapse:this._onToggleCollapse,onActiveRowChanged:this._onActiveRowChanged,onBlur:this._onBlur,onRenderDefaultRow:this._onRenderRow}))},n.prototype.forceUpdate=function(){t.prototype.forceUpdate.call(this),this._forceListUpdates()},n.prototype._getGroupNestingDepth=function(){for(var e=0,t=this.props.groups;t&&t.length>0;)e++,t=t[0].children;return e},n.prototype._setFocusToRowIfPending=function(e){var t=e.props.itemIndex;void 0!==this._initialFocusedIndex&&t===this._initialFocusedIndex&&(this._setFocusToRow(e),delete this._initialFocusedIndex)},n.prototype._setFocusToRow=function(e,t){void 0===t&&(t=!1),this._selectionZone.current&&this._selectionZone.current.ignoreNextFocus(),this._async.setTimeout((function(){e.focus(t)}),0)},n.prototype._forceListUpdates=function(){this._groupedList.current&&this._groupedList.current.forceUpdate(),this._list.current&&this._list.current.forceUpdate()},n.prototype._notifyColumnsResized=function(){this.state.adjustedColumns.forEach((function(e){e.onColumnResize&&e.onColumnResize(e.currentWidth)}))},n.prototype._adjustColumns=function(e,t,n,o){var r=this._getAdjustedColumns(e,t,n,o),i=this.props.viewport,a=i&&i.width?i.width:0;return H(H({},t),{adjustedColumns:r,lastWidth:a})},n.prototype._getAdjustedColumns=function(e,t,n,o){var r,i=this,a=e.items,s=e.layoutMode,l=e.selectionMode,u=e.viewport,c=u&&u.width?u.width:0,d=e.columns,p=this.props?this.props.columns:[],f=t?t.lastWidth:-1,h=t?t.lastSelectionMode:void 0;return n||f!==c||h!==l||p&&d!==p?(d=d||function(e,t,n,o,r,i,a){var s=[];if(e&&e.length){var l=e[0];for(var u in l)l.hasOwnProperty(u)&&s.push({key:u,name:u,fieldName:u,minWidth:Il,maxWidth:300,isCollapsable:!!s.length,isCollapsible:!!s.length,isMultiline:!1,isSorted:undefined===u,isSortedDescending:!1,isRowHeader:!1,columnActionsMode:Ur.clickable,isResizable:true,onColumnClick:undefined,isGrouped:undefined===u})}return s}(a),s===jr.fixedColumns?(r=this._getFixedColumns(d,c,e)).forEach((function(e){i._rememberCalculatedWidth(e,e.calculatedWidth)})):(r=this._getJustifiedColumns(d,c,e)).forEach((function(e){i._getColumnOverride(e.key).currentWidth=e.calculatedWidth})),r):d||[]},n.prototype._getFixedColumns=function(e,t,n){var o=this,r=this.props,i=r.selectionMode,a=void 0===i?this._selection.mode:i,s=r.checkboxVisibility,l=r.flexMargin,u=r.skipViewportMeasures,c=t-(l||0),d=0;e.forEach((function(e){u||!e.flexGrow?c-=e.maxWidth||e.minWidth||Il:(c-=e.minWidth||Il,d+=e.flexGrow),c-=Tl(e,n,!0)}));var p=a!==Ka.none&&s!==Kr.hidden?48:0,f=36*this._getGroupNestingDepth(),h=(c-=p+f)/d;return u||e.forEach((function(e){var t=H(H({},e),o._columnOverrides[e.key]);if(t.flexGrow&&t.maxWidth){var n=t.flexGrow*h+t.minWidth,r=n-t.maxWidth;r>0&&(c+=r,d-=r/(n-t.minWidth)*t.flexGrow)}})),h=c>0?c/d:0,e.map((function(e){var t=H(H({},e),o._columnOverrides[e.key]);return!u&&t.flexGrow&&c<=0||t.calculatedWidth||(!u&&t.flexGrow?(t.calculatedWidth=t.minWidth+t.flexGrow*h,t.calculatedWidth=Math.min(t.calculatedWidth,t.maxWidth||Number.MAX_VALUE)):t.calculatedWidth=t.maxWidth||t.minWidth||Il),t}))},n.prototype._getJustifiedColumns=function(e,t,n){var o=this,r=n.selectionMode,i=void 0===r?this._selection.mode:r,a=n.checkboxVisibility,s=i!==Ka.none&&a!==Kr.hidden?48:0,l=36*this._getGroupNestingDepth(),u=0,c=0,d=t-(s+l),p=e.map((function(e,t){var r=H(H({},e),{calculatedWidth:e.minWidth||Il}),i=H(H({},r),o._columnOverrides[e.key]);return r.isCollapsible||r.isCollapsable||(c+=Tl(r,n)),u+=Tl(i,n),i}));if(c>d)return p;for(var f=p.length-1;f>=0&&u>d;){var h=(y=p[f]).minWidth||Il,m=u-d;if(y.calculatedWidth-h>=m||!y.isCollapsible&&!y.isCollapsable){var g=y.calculatedWidth;y.calculatedWidth=Math.max(y.calculatedWidth-m,h),u-=g-y.calculatedWidth}else u-=Tl(y,n),p.splice(f,1);f--}for(var v=0;v<p.length&&u<d;v++){var y=p[v],b=v===p.length-1,_=this._columnOverrides[y.key];if(!_||!_.calculatedWidth||b){var C=d-u,k=void 0;if(b)k=C;else{var S=y.maxWidth;h=y.minWidth||S||Il,k=S?Math.min(C,S-h):C}y.calculatedWidth=y.calculatedWidth+k,u+=k}}return p},n.prototype._rememberCalculatedWidth=function(e,t){var n=this._getColumnOverride(e.key);n.calculatedWidth=t,n.currentWidth=t},n.prototype._getColumnOverride=function(e){return this._columnOverrides[e]=this._columnOverrides[e]||{}},n.prototype._getItemKey=function(e,t){var n=this.props.getKey,o=void 0;return e&&(o=e.key),n&&(o=n(e,t)),o||(o=t),o},n.defaultProps={layoutMode:jr.justified,selectionMode:Ka.multiple,constrainMode:Vr.horizontalConstrained,checkboxVisibility:Kr.onHover,isHeaderVisible:!0,compact:!1,useFastIcons:!0},z([wl],n)}(e.Component);function Tl(e,t,n){var o=t.cellStyleProps,r=void 0===o?Xa:o;return(n?0:e.calculatedWidth)+r.cellLeftPadding+r.cellRightPadding+(e.isPadded?r.cellExtraRightPadding:0)}var Pl={root:"ms-DetailsList",compact:"ms-DetailsList--Compact",contentWrapper:"ms-DetailsList-contentWrapper",headerWrapper:"ms-DetailsList-headerWrapper",isFixed:"is-fixed",isHorizontalConstrained:"is-horizontalConstrained",listCell:"ms-List-cell"},Ml=vr(Rl,(function(e){var t,n,o=e.theme,r=e.className,i=e.isHorizontalConstrained,a=e.compact,s=e.isFixed,l=o.semanticColors,u=Nt(Pl,o);return{root:[u.root,o.fonts.small,{position:"relative",color:l.listText,selectors:(t={},t["& ."+u.listCell]={minHeight:38,wordBreak:"break-word"},t)},s&&u.isFixed,a&&[u.compact,{selectors:(n={},n["."+u.listCell]={minHeight:32},n)}],i&&[u.isHorizontalConstrained,{overflowX:"auto",overflowY:"visible",WebkitOverflowScrolling:"touch"}],r],focusZone:[{display:"inline-block",minWidth:"100%",minHeight:1}],headerWrapper:u.headerWrapper,contentWrapper:u.contentWrapper}}),void 0,{scope:"DetailsList"});function Fl(e,t){for(var n=H({},t),o=0,r=Object.keys(e);o<r.length;o++){var i=r[o];void 0===n[i]&&(n[i]=e[i])}return n}function Ll(e,t,n,o){return e.addEventListener(t,n,o),function(){return e.removeEventListener(t,n,o)}}function Al(t,n){var o=e.useRef(n);return o.current||(o.current=ni(t)),o.current}var Nl=e.forwardRef((function(t,n){var o=e.useRef(null),r=e.useRef(null),i=e.useRef(null),a=Gi(o,n),s=Al(void 0,t.id),l=Fa(),u=wo(t,So),c=xl((function(){return{previouslyFocusedElementOutsideTrapZone:void 0,previouslyFocusedElementInTrapZone:void 0,disposeFocusHandler:void 0,disposeClickHandler:void 0,hasFocus:!1,unmodalize:void 0}})),d=t.ariaLabelledBy,p=t.className,f=t.children,h=t.componentRef,m=t.disabled,g=t.disableFirstFocus,v=void 0!==g&&g,y=t.disabled,b=void 0!==y&&y,_=t.elementToFocusOnDismiss,C=t.forceFocusInsideTrap,k=void 0===C||C,S=t.focusPreviouslyFocusedInnerElement,w=t.firstFocusableSelector,x=t.firstFocusableTarget,E=t.ignoreExternalFocusing,I=t.isClickableOutsideFocusTrap,D=void 0!==I&&I,R=t.onFocus,T=t.onBlur,P=t.onFocusCapture,M=t.onBlurCapture,F=t.enableAriaHiddenSiblings,L={"aria-hidden":!0,style:{pointerEvents:"none",position:"fixed"},tabIndex:m?-1:0,"data-is-visible":!0},A=e.useCallback((function(){if(S&&c.previouslyFocusedElementInTrapZone&&Qr(o.current,c.previouslyFocusedElementInTrapZone))yi(c.previouslyFocusedElementInTrapZone);else{var e="string"==typeof w?w:w&&w(),t=null;o.current&&("string"==typeof x?t=o.current.querySelector(x):x?t=x(o.current):e&&(t=o.current.querySelector("."+e)),t||(t=ci(o.current,o.current.firstChild,!1,!1,!1,!0))),t&&yi(t)}}),[w,x,S,c]),N=e.useCallback((function(e){if(!m){var t,n=e===c.hasFocus?i.current:r.current;if(o.current){var a=e===c.hasFocus?(void 0===(t=!1)&&(t=!0),ui(o.current,n,t,!1,!0,!0,!1,!0)):function(e,t,n,o){return void 0===o&&(o=!0),ci(e,t,o,!1,!1,!0,!1,!0)}(o.current,n,0,!1);a&&(a===r.current||a===i.current?A():a.focus())}}}),[m,A,c]),B=e.useCallback((function(e){null==M||M(e);var t=e.relatedTarget;null===e.relatedTarget&&(t=l.activeElement),Qr(o.current,t)||(c.hasFocus=!1)}),[l,c,M]),O=e.useCallback((function(e){null==P||P(e),e.target===r.current?N(!0):e.target===i.current&&N(!1),c.hasFocus=!0,e.target!==e.currentTarget&&e.target!==r.current&&e.target!==i.current&&(c.previouslyFocusedElementInTrapZone=e.target)}),[P,c,N]),z=e.useCallback((function(){if(Nl.focusStack=Nl.focusStack.filter((function(e){return s!==e})),l){var e=l.activeElement;E||!c.previouslyFocusedElementOutsideTrapZone||"function"!=typeof c.previouslyFocusedElementOutsideTrapZone.focus||!Qr(o.current,e)&&e!==l.body||c.previouslyFocusedElementOutsideTrapZone!==r.current&&c.previouslyFocusedElementOutsideTrapZone!==i.current&&yi(c.previouslyFocusedElementOutsideTrapZone)}}),[l,s,E,c]),W=e.useCallback((function(e){if(!m&&Nl.focusStack.length&&s===Nl.focusStack[Nl.focusStack.length-1]){var t=e.target;Qr(o.current,t)||(A(),c.hasFocus=!0,e.preventDefault(),e.stopPropagation())}}),[m,s,A,c]),U=e.useCallback((function(e){if(!m&&Nl.focusStack.length&&s===Nl.focusStack[Nl.focusStack.length-1]){var t=e.target;t&&!Qr(o.current,t)&&(A(),c.hasFocus=!0,e.preventDefault(),e.stopPropagation())}}),[m,s,A,c]),V=e.useCallback((function(){k&&!c.disposeFocusHandler?c.disposeFocusHandler=Ll(window,"focus",W,!0):!k&&c.disposeFocusHandler&&(c.disposeFocusHandler(),c.disposeFocusHandler=void 0),D||c.disposeClickHandler?D&&c.disposeClickHandler&&(c.disposeClickHandler(),c.disposeClickHandler=void 0):c.disposeClickHandler=Ll(window,"click",U,!0)}),[U,W,k,D,c]);return e.useEffect((function(){var e=o.current;return V(),function(){m&&!k&&Qr(e,null==l?void 0:l.activeElement)||z()}}),[V]),e.useEffect((function(){var e=void 0===k||k,t=void 0!==m&&m;if(!t||e){if(b)return;Nl.focusStack.push(s),c.previouslyFocusedElementOutsideTrapZone=_||l.activeElement,v||Qr(o.current,c.previouslyFocusedElementOutsideTrapZone)||A(),!c.unmodalize&&o.current&&F&&(c.unmodalize=function(e){for(var t,n=[],o=No(e)||document;e!==o.body;){for(var r=0,i=e.parentElement.children;r<i.length;r++){var a=i[r];a!==e&&"true"!==(null===(t=a.getAttribute("aria-hidden"))||void 0===t?void 0:t.toLowerCase())&&n.push(a)}if(!e.parentElement)break;e=e.parentElement}return n.forEach((function(e){e.setAttribute("aria-hidden","true")})),function(){!function(e){e.forEach((function(e){e.setAttribute("aria-hidden","false")}))}(n),n=[]}}(o.current))}else e&&!t||(z(),c.unmodalize&&c.unmodalize());_&&c.previouslyFocusedElementOutsideTrapZone!==_&&(c.previouslyFocusedElementOutsideTrapZone=_)}),[_,k,m]),Bl((function(){c.disposeClickHandler&&(c.disposeClickHandler(),c.disposeClickHandler=void 0),c.disposeFocusHandler&&(c.disposeFocusHandler(),c.disposeFocusHandler=void 0),c.unmodalize&&c.unmodalize(),delete c.previouslyFocusedElementInTrapZone,delete c.previouslyFocusedElementOutsideTrapZone})),function(t,n,o){e.useImperativeHandle(t,(function(){return{get previouslyFocusedElement(){return n},focus:o}}),[n,o])}(h,c.previouslyFocusedElementInTrapZone,A),e.createElement("div",H({},u,{className:p,ref:a,"aria-labelledby":d,onFocusCapture:O,onFocus:R,onBlur:T,onBlurCapture:B}),e.createElement("div",H({},L,{ref:r})),f,e.createElement("div",H({},L,{ref:i})))})),Bl=function(t){var n=e.useRef(t);n.current=t,e.useEffect((function(){return function(){n.current&&n.current()}}),[t])};Nl.displayName="FocusTrapZone",Nl.focusStack=[];var Hl=ut,Ol={root:"ms-Modal",main:"ms-Dialog-main",scrollableContent:"ms-Modal-scrollableContent",isOpen:"is-open",layer:"ms-Modal-Layer"},zl=kr(),Wl=function(t){function n(e){var n=t.call(this,e)||this;Br(n);var o=n.props.allowTouchBodyScroll,r=void 0!==o&&o;return n._allowTouchBodyScroll=r,n}return B(n,t),n.prototype.componentDidMount=function(){var e;!this._allowTouchBodyScroll&&((e=No())&&e.body&&!_i&&(e.body.classList.add(Ci),e.body.addEventListener("touchmove",Si,{passive:!1,capture:!1})),_i++)},n.prototype.componentWillUnmount=function(){!this._allowTouchBodyScroll&&function(){if(_i>0){var e=No();e&&e.body&&1===_i&&(e.body.classList.remove(Ci),e.body.removeEventListener("touchmove",Si)),_i--}}()},n.prototype.render=function(){var t=this.props,n=t.isDarkThemed,o=t.className,r=t.theme,i=t.styles,a=wo(this.props,So),s=zl(i,{theme:r,className:o,isDark:n});return e.createElement("div",H({},a,{className:s.root}))},n}(e.Component),Ul={root:"ms-Overlay",rootDark:"ms-Overlay--dark"},Vl=vr(Wl,(function(e){var t,n=e.className,o=e.theme,r=e.isNone,i=e.isDark,a=o.palette,s=Nt(Ul,o);return{root:[s.root,o.fonts.medium,{backgroundColor:a.whiteTranslucent40,top:0,right:0,bottom:0,left:0,position:"absolute",selectors:(t={},t[St]={border:"1px solid WindowText",opacity:0},t)},r&&{visibility:"hidden"},i&&[s.rootDark,{backgroundColor:a.blackTranslucent40}],n]}}),void 0,{scope:"Overlay"});function Gl(){var t=xl((function(){return new qr}));return e.useEffect((function(){return function(){return t.dispose()}}),[t]),t}function jl(t,n,o,r){var i=e.useRef(o);i.current=o,e.useEffect((function(){var e=t&&"current"in t?t.current:t;if(e)return Ll(e,n,(function(e){return i.current(e)}),r)}),[t,n,r])}function Kl(e){var t=e.originalElement,n=e.containsFocus;t&&n&&t!==Ho()&&setTimeout((function(){var e;null===(e=t.focus)||void 0===e||e.call(t)}),0)}var ql,Zl=function(e,t){return e&&t?[].slice.call(t.children).filter((function(t){return t!==e})):[]},Ql=e.forwardRef((function(t,n){t=H({shouldRestoreFocus:!0},t);var o=e.useRef(),r=Gi(o,n);!function(t,n){var o=t["aria-modal"];e.useEffect((function(){var e,t=No();if(o&&t&&n&&n.current){var r=null===(e=n.current.parentElement)||void 0===e?void 0:e.parentElement,i=Zl(r,null==r?void 0:r.parentElement);if((null==r?void 0:r.parentElement)!==t.body){var a=function(e,t){for(var n=e;n&&n.parentElement!==t.body;)n=n.parentElement;return n}(n.current,t);i.concat(Zl(a,t.body))}return(i=i.filter((function(e){return"TEMPLATE"!==e.tagName&&"SCRIPT"!==e.tagName&&"STYLE"!==e.tagName&&!e.hasAttribute("aria-hidden")}))).forEach((function(e){return e.setAttribute("aria-hidden","true")})),function(){return i.forEach((function(e){return e.removeAttribute("aria-hidden")}))}}}),[o,n])}(t,o),function(t,n){var o=t.onRestoreFocus,r=void 0===o?Kl:o,i=e.useRef(),a=e.useRef(!1);e.useEffect((function(){return i.current=No().activeElement,function(e){var t=No(e),n=t&&t.activeElement;return!(!n||!Qr(e,n))}(n.current)&&(a.current=!0),function(){var e;null==r||r({originalElement:i.current,containsFocus:a.current,documentContainsFocus:(null===(e=No())||void 0===e?void 0:e.hasFocus())||!1}),i.current=void 0}}),[]),jl(n,"focus",e.useCallback((function(){a.current=!0}),[]),!0),jl(n,"blur",e.useCallback((function(e){n.current&&e.relatedTarget&&!n.current.contains(e.relatedTarget)&&(a.current=!1)}),[]),!0)}(t,o);var i=t.role,a=t.className,s=t.ariaLabel,l=t.ariaLabelledBy,u=t.ariaDescribedBy,c=t.style,d=t.children,p=t.onDismiss,f=function(t,n){var o=Gl(),r=e.useState(!1),i=r[0],a=r[1];return e.useEffect((function(){return o.requestAnimationFrame((function(){var e;if(!t.style||!t.style.overflowY){var o=!1;if(n&&n.current&&(null===(e=n.current)||void 0===e?void 0:e.firstElementChild)){var r=n.current.clientHeight,s=n.current.firstElementChild.clientHeight;r>0&&s>r&&(o=s-r>1)}i!==o&&a(o)}})),function(){return o.dispose()}})),i}(t,o),h=e.useCallback((function(e){e.which===To&&p&&(p(e),e.preventDefault(),e.stopPropagation())}),[p]);return jl(Ma(),"keydown",h),e.createElement("div",H({ref:r},wo(t,So),{className:a,role:i,"aria-label":s,"aria-labelledby":l,"aria-describedby":u,onKeyDown:h,style:H({overflowY:f?"scroll":void 0,outline:"none"},c)}),d)}));!function(e){e[e.small=0]="small",e[e.medium=1]="medium",e[e.large=2]="large",e[e.xLarge=3]="xLarge",e[e.xxLarge=4]="xxLarge",e[e.xxxLarge=5]="xxxLarge",e[e.unknown=999]="unknown"}(ql||(ql={}));var Yl,$l=[479,639,1023,1365,1919,99999999];function Xl(){var e;return null!==(e=Yl)&&void 0!==e?e:ql.large}var Jl=function(t,n){var o=e.useState(Xl()),r=o[0],i=o[1],a=e.useCallback((function(){var e=function(e){var t=ql.small;if(!e)throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");try{for(;e.innerWidth>$l[t];)t++}catch(e){t=Xl()}return Yl=t,t}(Ho(t.current));r!==e&&i(e)}),[t,r]);return jl(Ma(),"resize",a),e.useEffect((function(){void 0===n&&a()}),[n]),null!=n?n:r},eu=Zn((function(e,t){return{root:ke(e,t&&{touchAction:"none",selectors:{"& *":{userSelect:"none"}}})}})),tu={start:"touchstart",move:"touchmove",stop:"touchend"},nu={start:"mousedown",move:"mousemove",stop:"mouseup"},ou=function(t){function n(n){var o=t.call(this,n)||this;return o._currentEventType=nu,o._events=[],o._onMouseDown=function(t){var n=e.Children.only(o.props.children).props.onMouseDown;return n&&n(t),o._currentEventType=nu,o._onDragStart(t)},o._onMouseUp=function(t){var n=e.Children.only(o.props.children).props.onMouseUp;return n&&n(t),o._currentEventType=nu,o._onDragStop(t)},o._onTouchStart=function(t){var n=e.Children.only(o.props.children).props.onTouchStart;return n&&n(t),o._currentEventType=tu,o._onDragStart(t)},o._onTouchEnd=function(t){var n=e.Children.only(o.props.children).props.onTouchEnd;n&&n(t),o._currentEventType=tu,o._onDragStop(t)},o._onDragStart=function(e){if("number"==typeof e.button&&0!==e.button)return!1;if(!(o.props.handleSelector&&!o._matchesSelector(e.target,o.props.handleSelector)||o.props.preventDragSelector&&o._matchesSelector(e.target,o.props.preventDragSelector))){o._touchId=o._getTouchId(e);var t=o._getControlPosition(e);if(void 0!==t){var n=o._createDragDataFromPosition(t);o.props.onStart&&o.props.onStart(e,n),o.setState({isDragging:!0,lastPosition:t}),o._events=[Ll(document.body,o._currentEventType.move,o._onDrag,!0),Ll(document.body,o._currentEventType.stop,o._onDragStop,!0)]}}},o._onDrag=function(e){"touchmove"===e.type&&e.preventDefault();var t=o._getControlPosition(e);if(t){var n=o._createUpdatedDragData(o._createDragDataFromPosition(t)),r=n.position;o.props.onDragChange&&o.props.onDragChange(e,n),o.setState({position:r,lastPosition:t})}},o._onDragStop=function(e){if(o.state.isDragging){var t=o._getControlPosition(e);if(t){var n=o._createDragDataFromPosition(t);o.setState({isDragging:!1,lastPosition:void 0}),o.props.onStop&&o.props.onStop(e,n),o.props.position&&o.setState({position:o.props.position}),o._events.forEach((function(e){return e()}))}}},o.state={isDragging:!1,position:o.props.position||{x:0,y:0},lastPosition:void 0},o}return B(n,t),n.prototype.componentDidUpdate=function(e){!this.props.position||e.position&&this.props.position===e.position||this.setState({position:this.props.position})},n.prototype.componentWillUnmount=function(){this._events.forEach((function(e){return e()}))},n.prototype.render=function(){var t=e.Children.only(this.props.children),n=t.props,o=this.props.position,r=this.state,i=r.position,a=r.isDragging,s=i.x,l=i.y;return o&&!a&&(s=o.x,l=o.y),e.cloneElement(t,{style:H(H({},n.style),{transform:"translate("+s+"px, "+l+"px)"}),className:eu(n.className,this.state.isDragging).root,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onTouchStart:this._onTouchStart,onTouchEnd:this._onTouchEnd})},n.prototype._getControlPosition=function(e){var t=this._getActiveTouch(e);if(void 0===this._touchId||t){var n=t||e;return{x:n.clientX,y:n.clientY}}},n.prototype._getActiveTouch=function(e){return e.targetTouches&&this._findTouchInTouchList(e.targetTouches)||e.changedTouches&&this._findTouchInTouchList(e.changedTouches)},n.prototype._getTouchId=function(e){var t=e.targetTouches&&e.targetTouches[0]||e.changedTouches&&e.changedTouches[0];if(t)return t.identifier},n.prototype._matchesSelector=function(e,t){if(!e||e===document.body)return!1;var n=e.matches||e.webkitMatchesSelector||e.msMatchesSelector;return!!n&&(n.call(e,t)||this._matchesSelector(e.parentElement,t))},n.prototype._findTouchInTouchList=function(e){if(void 0!==this._touchId)for(var t=0;t<e.length;t++)if(e[t].identifier===this._touchId)return e[t]},n.prototype._createDragDataFromPosition=function(e){var t=this.state.lastPosition;return void 0===t?{delta:{x:0,y:0},lastPosition:e,position:e}:{delta:{x:e.x-t.x,y:e.y-t.y},lastPosition:t,position:e}},n.prototype._createUpdatedDragData=function(e){var t=this.state.position;return{position:{x:t.x+e.delta.x,y:t.y+e.delta.y},delta:e.delta,lastPosition:t}},n}(e.Component),ru=function(){var t=xl({});return e.useEffect((function(){return function(){for(var e=0,n=Object.keys(t);e<n.length;e++){var o=n[e];clearTimeout(o)}}}),[t]),xl({setTimeout:function(e,n){var o=setTimeout(e,n);return t[o]=1,o},clearTimeout:function(e){delete t[e],clearTimeout(e)}})},iu={x:0,y:0},au={isOpen:!1,isDarkOverlay:!0,className:"",containerClassName:""},su=kr(),lu=e.forwardRef((function(t,n){var o,r,i=Fl(au,t),a=i.allowTouchBodyScroll,s=i.className,l=i.children,u=i.containerClassName,c=i.scrollableContentClassName,d=i.elementToFocusOnDismiss,p=i.firstFocusableSelector,f=i.forceFocusInsideTrap,h=i.ignoreExternalFocusing,m=i.isBlocking,g=i.isAlert,v=i.isClickableOutsideFocusTrap,y=i.isDarkOverlay,b=i.onDismiss,_=i.layerProps,C=i.overlay,k=i.isOpen,S=i.titleAriaId,w=i.styles,x=i.subtitleAriaId,E=i.theme,I=i.topOffsetFixed,D=i.responsiveMode,R=i.onLayerDidMount,T=i.isModeless,P=i.dragOptions,M=i.onDismissed,F=i.enableAriaHiddenSiblings,L=e.useRef(null),A=e.useRef(null),N=e.useRef(null),B=Gi(L,n),O=Jl(B),z=Al("ModalFocusTrapZone"),W=Ma(),U=ru(),V=U.setTimeout,G=U.clearTimeout,j=e.useState(k),K=j[0],q=j[1],Z=e.useState(k),Q=Z[0],Y=Z[1],$=e.useState(iu),X=$[0],J=$[1],ee=e.useState(),te=ee[0],ne=ee[1],oe=function(t){var n=e.useState(!1),o=n[0],r=n[1];return[o,{setTrue:xl((function(){return function(){r(!0)}})),setFalse:xl((function(){return function(){r(!1)}})),toggle:xl((function(){return function(){r((function(e){return!e}))}}))}]}(),re=oe[0],ie=oe[1],ae=ie.toggle,se=ie.setFalse,le=xl((function(){return{onModalCloseTimer:0,allowTouchBodyScroll:a,scrollableContent:null,lastSetCoordinates:iu,events:new Jr({})}})),ue=(P||{}).keepInBounds,ce=null!=g?g:m&&!T,de=void 0===_?"":_.className,pe=su(w,{theme:E,className:s,containerClassName:u,scrollableContentClassName:c,isOpen:k,isVisible:Q,hasBeenOpened:le.hasBeenOpened,modalRectangleTop:te,topOffsetFixed:I,isModeless:T,layerClassName:de,windowInnerHeight:null==W?void 0:W.innerHeight,isDefaultDragHandle:P&&!P.dragHandleSelector}),fe=H(H({eventBubblingEnabled:!1},_),{onLayerDidMount:_&&_.onLayerDidMount?_.onLayerDidMount:R,insertFirst:T,className:pe.layer}),he=e.useCallback((function(e){var t,n;e?le.allowTouchBodyScroll?(t=e,n=le.events,t&&n.on(t,"touchmove",(function(e){e.stopPropagation()}),{passive:!1})):function(e,t){if(e){var n=0,o=null;t.on(e,"touchstart",(function(e){1===e.targetTouches.length&&(n=e.targetTouches[0].clientY)}),{passive:!1}),t.on(e,"touchmove",(function(e){if(1===e.targetTouches.length&&(e.stopPropagation(),o)){var t=e.targetTouches[0].clientY-n,r=wi(e.target);r&&(o=r),0===o.scrollTop&&t>0&&e.preventDefault(),o.scrollHeight-Math.ceil(o.scrollTop)<=o.clientHeight&&t<0&&e.preventDefault()}}),{passive:!1}),o=e}}(e,le.events):le.events.off(le.scrollableContent),le.scrollableContent=e}),[le]),me=function(){var e=N.current,t=null==e?void 0:e.getBoundingClientRect();t&&(I&&ne(t.top),ue&&(le.minPosition={x:-t.left,y:-t.top},le.maxPosition={x:t.left,y:t.top}))},ge=e.useCallback((function(e,t){var n=le.minPosition,o=le.maxPosition;return ue&&n&&o&&(t=Math.max(n[e],t),t=Math.min(o[e],t)),t}),[ue,le]),ve=function(){var e;le.lastSetCoordinates=iu,se(),le.isInKeyboardMoveMode=!1,q(!1),J(iu),null===(e=le.disposeOnKeyUp)||void 0===e||e.call(le),null==M||M()},ye=e.useCallback((function(){se(),le.isInKeyboardMoveMode=!1}),[le,se]),be=e.useCallback((function(e,t){J((function(e){return{x:ge("x",e.x+t.delta.x),y:ge("y",e.y+t.delta.y)}}))}),[ge]),_e=e.useCallback((function(){A.current&&A.current.focus()}),[]);e.useEffect((function(){var e;G(le.onModalCloseTimer),k&&(requestAnimationFrame((function(){return V(me,0)})),q(!0),P&&(e=function(e){e.altKey&&e.ctrlKey&&e.keyCode===Po&&Qr(le.scrollableContent,e.target)&&(ae(),e.preventDefault(),e.stopPropagation())},le.disposeOnKeyUp||(le.events.on(W,"keyup",e,!0),le.disposeOnKeyUp=function(){le.events.off(W,"keyup",e,!0),le.disposeOnKeyUp=void 0})),le.hasBeenOpened=!0,Y(!0)),!k&&K&&(le.onModalCloseTimer=V(ve,1e3*parseFloat(Hl)),Y(!1))}),[K,k]),o=function(){le.events.dispose()},(r=e.useRef(o)).current=o,e.useEffect((function(){return function(){var e;null===(e=r.current)||void 0===e||e.call(r)}}),[]),function(t,n){e.useImperativeHandle(t.componentRef,(function(){return{focus:function(){n.current&&n.current.focus()}}}),[n])}(i,A);var Ce=e.createElement(Nl,{id:z,ref:N,componentRef:A,className:pe.main,elementToFocusOnDismiss:d,isClickableOutsideFocusTrap:T||v||!m,ignoreExternalFocusing:h,forceFocusInsideTrap:T?!T:f,firstFocusableSelector:p,focusPreviouslyFocusedInnerElement:!0,onBlur:le.isInKeyboardMoveMode?function(){var e;le.lastSetCoordinates=iu,le.isInKeyboardMoveMode=!1,null===(e=le.disposeOnKeyDown)||void 0===e||e.call(le)}:void 0,enableAriaHiddenSiblings:F},P&&le.isInKeyboardMoveMode&&e.createElement("div",{className:pe.keyboardMoveIconContainer},P.keyboardMoveIconProps?e.createElement(Xi,H({},P.keyboardMoveIconProps)):e.createElement(Xi,{iconName:"move",className:pe.keyboardMoveIcon})),e.createElement("div",{ref:he,className:pe.scrollableContent,"data-is-scrollable":!0},P&&re&&e.createElement(P.menu,{items:[{key:"move",text:P.moveMenuItemText,onClick:function(){var e=function(e){if(e.altKey&&e.ctrlKey&&e.keyCode===Po)return e.preventDefault(),void e.stopPropagation();if(re&&(e.altKey||e.keyCode===To)&&se(),!le.isInKeyboardMoveMode||e.keyCode!==To&&e.keyCode!==Ro||(le.isInKeyboardMoveMode=!1,e.preventDefault(),e.stopPropagation()),le.isInKeyboardMoveMode){var t=!0,n=function(e){var t=10;return e.shiftKey?e.ctrlKey||(t=50):e.ctrlKey&&(t=1),t}(e);switch(e.keyCode){case To:J(le.lastSetCoordinates);case Ro:le.lastSetCoordinates=iu;break;case Fo:J((function(e){return{x:e.x,y:ge("y",e.y-n)}}));break;case Ao:J((function(e){return{x:e.x,y:ge("y",e.y+n)}}));break;case Mo:J((function(e){return{x:ge("x",e.x-n),y:e.y}}));break;case Lo:J((function(e){return{x:ge("x",e.x+n),y:e.y}}));break;default:t=!1}t&&(e.preventDefault(),e.stopPropagation())}};le.lastSetCoordinates=X,se(),le.isInKeyboardMoveMode=!0,le.events.on(W,"keydown",e,!0),le.disposeOnKeyDown=function(){le.events.off(W,"keydown",e,!0),le.disposeOnKeyDown=void 0}}},{key:"close",text:P.closeMenuItemText,onClick:ve}],onDismiss:se,alignTargetEdge:!0,coverTarget:!0,directionalHint:0,directionalHintFixed:!0,shouldFocusOnMount:!0,target:le.scrollableContent}),l));return K&&O>=(D||ql.small)&&e.createElement(Oa,H({ref:B},fe),e.createElement(Ql,{role:ce?"alertdialog":"dialog","aria-modal":!T,ariaLabelledBy:S,ariaDescribedBy:x,onDismiss:b,shouldRestoreFocus:!h},e.createElement("div",{className:pe.root,role:T?void 0:"document"},!T&&e.createElement(Vl,H({"aria-hidden":!0,isDarkThemed:y,onClick:m?void 0:b,allowTouchBodyScroll:a},C)),P?e.createElement(ou,{handleSelector:P.dragHandleSelector||"#"+z,preventDragSelector:"button",onStart:ye,onDragChange:be,onStop:_e,position:X},Ce):Ce)))||null}));lu.displayName="Modal";var uu=vr(lu,(function(e){var t,n=e.className,o=e.containerClassName,r=e.scrollableContentClassName,i=e.isOpen,a=e.isVisible,s=e.hasBeenOpened,l=e.modalRectangleTop,u=e.theme,c=e.topOffsetFixed,d=e.isModeless,p=e.layerClassName,f=e.isDefaultDragHandle,h=e.windowInnerHeight,m=u.palette,g=u.effects,v=u.fonts,y=Nt(Ol,u);return{root:[y.root,v.medium,{backgroundColor:"transparent",position:d?"absolute":"fixed",height:"100%",width:"100%",display:"flex",alignItems:"center",justifyContent:"center",opacity:0,pointerEvents:"none",transition:"opacity 0.267s"},c&&"number"==typeof l&&s&&{alignItems:"flex-start"},i&&y.isOpen,a&&{opacity:1,pointerEvents:"auto"},n],main:[y.main,{boxShadow:g.elevation64,borderRadius:g.roundedCorner2,backgroundColor:m.white,boxSizing:"border-box",position:"relative",textAlign:"left",outline:"3px solid transparent",maxHeight:"calc(100% - 32px)",maxWidth:"calc(100% - 32px)",minHeight:"176px",minWidth:"288px",overflowY:"auto",zIndex:d?kt.Layer:void 0},c&&"number"==typeof l&&s&&{top:l},f&&{cursor:"move"},o],scrollableContent:[y.scrollableContent,{overflowY:"auto",flexGrow:1,maxHeight:"100vh",selectors:(t={},t["@supports (-webkit-overflow-scrolling: touch)"]={maxHeight:h},t)},r],layer:d&&[p,y.layer,{position:"static",width:"unset",height:"unset"}],keyboardMoveIconContainer:{position:"absolute",display:"flex",justifyContent:"center",width:"100%",padding:"3px 0px"},keyboardMoveIcon:{fontSize:v.xLargePlus.fontSize,width:"24px"}}}),void 0,{scope:"Modal",fields:["theme","styles","enableAriaHiddenSiblings"]});uu.displayName="Modal";var cu=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;if(i(this,a),g(d(t=r.call(this,e)),"hideModal",(function(){A.UpdateCurrentSlug(null),t.setState({modalContent:null})})),a._navigatorSingleton)throw"The navigator singleton was already constructed!";return a._navigatorSingleton=d(t),t.state={modalContent:null},t}return s(a,[{key:"showModalInternal",value:function(e,t){A.UpdateCurrentSlug(e),this.setState({modalContent:t})}},{key:"render",value:function(){return this.state.modalContent?e.createElement(uu,{isOpen:!0,isBlocking:!1,onDismiss:this.hideModal},this.state.modalContent):null}}],[{key:"registerRoute",value:function(e,t){if(a._routes.has(e))throw"Route "+e+" is already registered!";a._routes.set(e,t);var n=A.GetCurrentSlug();n===e&&a._navigatorSingleton.setState({modalContent:t(n)})}},{key:"showModal",value:function(e,t){a._navigatorSingleton&&a._navigatorSingleton.showModalInternal(e,t)}}]),a}(e.Component);g(cu,"_navigatorSingleton",null),g(cu,"_routes",new Map);var du=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;i(this,a),t=r.call(this,e);var n="TextContent",o=!1,s=!1;if(e.fragment.type==y.Link)switch(e.fragment.link.protocol){case"thread:":n+=" ThreadLink";break;case"il:":n+=" SourceLink";break;case"clrobject:":n+=" ClrObjectLink";break;case"clrmodule:":n+=" ClrModuleLink";break;case"info:":n="",s=!0;break;case"https:":n="",o=!0}return t.state={fragment:e.fragment,className:n,isExternalLink:o,isModalLink:s},t}return s(a,[{key:"render",value:function(){if(this.state.isModalLink){var t=this.state.fragment;return e.createElement(ol,{onClick:function(){alert("Modal for "+t.link.pathname)}},t.value)}if(this.state.isExternalLink){var n=this.state.fragment;return e.createElement(ol,{href:n.link.toString(),target:"_blank"},n.value)}return e.createElement("span",{className:this.state.className},this.state.fragment.value)}}]),a}(e.Component);function pu(e,t,n){var o=e[n],r=t[n];(o||r)&&(e[n]=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return r&&(e=r.apply(this,t)),o!==r&&(e=o.apply(this,t)),e})}function fu(){return null}function hu(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.filter((function(e){return e})).join(" ").trim();return""===n?void 0:n}!function(e){function t(n,o){var r=e.call(this,n,o)||this;return function(e,t,n){for(var o=0,r=n.length;o<r;o++)pu(e,t,n[o])}(r,t.prototype,["componentDidMount","shouldComponentUpdate","getSnapshotBeforeUpdate","render","componentDidUpdate","componentWillUnmount"]),r}B(t,e),t.prototype.componentDidUpdate=function(e,t){this._updateComponentRef(e,this.props)},t.prototype.componentDidMount=function(){this._setComponentRef(this.props.componentRef,this)},t.prototype.componentWillUnmount=function(){if(this._setComponentRef(this.props.componentRef,null),this.__disposables){for(var e=0,t=this._disposables.length;e<t;e++){var n=this.__disposables[e];n.dispose&&n.dispose()}this.__disposables=null}},Object.defineProperty(t.prototype,"className",{get:function(){if(!this.__className){var e=/function (.{1,})\(/.exec(this.constructor.toString());this.__className=e&&e.length>1?e[1]:""}return this.__className},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_disposables",{get:function(){return this.__disposables||(this.__disposables=[]),this.__disposables},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_async",{get:function(){return this.__async||(this.__async=new qr(this),this._disposables.push(this.__async)),this.__async},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_events",{get:function(){return this.__events||(this.__events=new Jr(this),this._disposables.push(this.__events)),this.__events},enumerable:!1,configurable:!0}),t.prototype._resolveRef=function(e){var t=this;return this.__resolves||(this.__resolves={}),this.__resolves[e]||(this.__resolves[e]=function(n){return t[e]=n}),this.__resolves[e]},t.prototype._updateComponentRef=function(e,t){void 0===t&&(t={}),e&&t&&e.componentRef!==t.componentRef&&(this._setComponentRef(e.componentRef,null),this._setComponentRef(t.componentRef,this))},t.prototype._warnDeprecations=function(e){this.className,this.props},t.prototype._warnMutuallyExclusive=function(e){this.className,this.props},t.prototype._warnConditionallyRequiredProps=function(e,t,n){this.className,this.props},t.prototype._setComponentRef=function(e,t){!this._skipComponentRefResolution&&e&&("function"==typeof e&&e(t),"object"==typeof e&&(e.current=t))}}(e.Component);var mu,gu,vu=function(t){var n=t.className,o=t.imageProps,r=wo(t,to,["aria-label","aria-labelledby","title","aria-describedby"]),i=o.alt||t["aria-label"],a=i||t["aria-labelledby"]||t.title||o["aria-label"]||o["aria-labelledby"]||o.title,s={"aria-labelledby":t["aria-labelledby"],"aria-describedby":t["aria-describedby"],title:t.title},l=a?{}:{"aria-hidden":!0};return e.createElement("div",H({},l,r,{className:xo(Wn,zn.root,zn.image,n)}),e.createElement(Qi,H({},s,o,{alt:a?i:""})))};function yu(e){var t;if(void 0===gu||e){var n=Ho(),o=null===(t=null==n?void 0:n.navigator)||void 0===t?void 0:t.userAgent;gu=!!o&&-1!==o.indexOf("Macintosh")}return!!gu}!function(e){e[e.Normal=0]="Normal",e[e.Divider=1]="Divider",e[e.Header=2]="Header",e[e.Section=3]="Section"}(mu||(mu={}));var bu,_u,Cu=function(){return!!(window&&window.navigator&&window.navigator.userAgent)&&/iPad|iPhone|iPod/i.test(window.navigator.userAgent)};function ku(e){return e.canCheck?!(!e.isChecked&&!e.checked):"boolean"==typeof e.isChecked?e.isChecked:"boolean"==typeof e.checked?e.checked:null}function Su(e){return!(!e.subMenuProps&&!e.items)}function wu(e){return!(!e.isDisabled&&!e.disabled)}function xu(e){return null!==ku(e)?"menuitemcheckbox":"menuitem"}!function(e){e[e.top=1]="top",e[e.bottom=-1]="bottom",e[e.left=2]="left",e[e.right=-2]="right"}(bu||(bu={})),function(e){e[e.top=0]="top",e[e.bottom=1]="bottom",e[e.start=2]="start",e[e.end=3]="end"}(_u||(_u={}));var Eu,Iu=function(){function e(e,t,n,o){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===o&&(o=0),this.top=n,this.bottom=o,this.left=e,this.right=t}return Object.defineProperty(e.prototype,"width",{get:function(){return this.right-this.left},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.bottom-this.top},enumerable:!1,configurable:!0}),e.prototype.equals=function(e){return parseFloat(this.top.toFixed(4))===parseFloat(e.top.toFixed(4))&&parseFloat(this.bottom.toFixed(4))===parseFloat(e.bottom.toFixed(4))&&parseFloat(this.left.toFixed(4))===parseFloat(e.left.toFixed(4))&&parseFloat(this.right.toFixed(4))===parseFloat(e.right.toFixed(4))},e}();function Du(e,t,n){return{targetEdge:e,alignmentEdge:t,isAuto:n}}var Ru,Tu=((Eu={})[0]=Du(bu.top,bu.left),Eu[1]=Du(bu.top),Eu[2]=Du(bu.top,bu.right),Eu[3]=Du(bu.top,void 0,!0),Eu[4]=Du(bu.bottom,bu.left),Eu[5]=Du(bu.bottom),Eu[6]=Du(bu.bottom,bu.right),Eu[7]=Du(bu.bottom,void 0,!0),Eu[8]=Du(bu.left,bu.top),Eu[9]=Du(bu.left),Eu[10]=Du(bu.left,bu.bottom),Eu[11]=Du(bu.right,bu.top),Eu[12]=Du(bu.right),Eu[13]=Du(bu.right,bu.bottom),Eu);function Pu(e,t){return!(e.top<t.top||e.bottom>t.bottom||e.left<t.left||e.right>t.right)}function Mu(e,t){var n=[];return e.top<t.top&&n.push(bu.top),e.bottom>t.bottom&&n.push(bu.bottom),e.left<t.left&&n.push(bu.left),e.right>t.right&&n.push(bu.right),n}function Fu(e,t){return e[bu[t]]}function Lu(e,t,n){return e[bu[t]]=n,e}function Au(e,t){var n=Ku(t);return(Fu(e,n.positiveEdge)+Fu(e,n.negativeEdge))/2}function Nu(e,t){return e>0?t:-1*t}function Bu(e,t){return Nu(e,Fu(t,e))}function Hu(e,t,n){return Nu(n,Fu(e,n)-Fu(t,n))}function Ou(e,t,n,o){void 0===o&&(o=!0);var r=Fu(e,t)-n,i=Lu(e,t,n);return o&&(i=Lu(e,-1*t,Fu(e,-1*t)-r)),i}function zu(e,t,n,o){return void 0===o&&(o=0),Ou(e,n,Fu(t,n)+Nu(n,o))}function Wu(e,t,n){return Bu(n,e)>Bu(n,t)}function Uu(e,t){for(var n=0,o=0,r=Mu(e,t);o<r.length;o++){var i=r[o];n+=Math.pow(Hu(e,t,i),2)}return n}function Vu(e,t,n,o){for(var r=0,i=e;r<i.length;r++){var a=i[r],s=void 0;o&&o===-1*a?(s=Ou(t.elementRectangle,a,Fu(n,a),!1),t.forcedInBounds=!0):Wu(s=zu(t.elementRectangle,n,a),n,-1*a)||(s=Ou(s,-1*a,Fu(n,-1*a),!1),t.forcedInBounds=!0),t.elementRectangle=s}return t}function Gu(e,t,n){var o=Ku(t).positiveEdge;return Ou(e,o,n-(Au(e,t)-Fu(e,o)))}function ju(e,t,n,o,r){void 0===o&&(o=0);var i=new Iu(e.left,e.right,e.top,e.bottom),a=n.alignmentEdge,s=n.targetEdge,l=r?s:-1*s;return i=r?zu(i,t,s,o):function(e,t,n,o){void 0===o&&(o=0);var r=Nu(-1*n,o);return Ou(e,-1*n,Fu(t,n)+r)}(i,t,s,o),i=a?zu(i,t,a):Gu(i,l,Au(t,s))}function Ku(e){return e===bu.top||e===bu.bottom?{positiveEdge:bu.left,negativeEdge:bu.right}:{positiveEdge:bu.top,negativeEdge:bu.bottom}}function qu(e,t,n){return n&&Math.abs(Hu(e,n,t))>Math.abs(Hu(e,n,-1*t))?-1*t:t}function Zu(e,t,n,o,r,i,a,s){var l,u={},c=$u(t),d=i?n:-1*n,p=r||Ku(n).positiveEdge;return a&&!function(e,t,n){return void 0!==n&&Fu(e,t)===Fu(n,t)}(e,(l=p,-1*l),o)||(p=qu(e,p,o)),u[bu[d]]=Hu(e,c,d),u[bu[p]]=Hu(e,c,p),s&&(u[bu[-1*d]]=Hu(e,c,-1*d),u[bu[-1*p]]=Hu(e,c,-1*p)),u}function Qu(e,t,n){var o=Au(t,e),r=Au(n,e),i=Ku(e),a=i.positiveEdge,s=i.negativeEdge;return o<=r?a:s}function Yu(e,t,n,o,r,i,a){var s=ju(e,t,o,r,a);return Pu(s,n)?{elementRectangle:s,targetEdge:o.targetEdge,alignmentEdge:o.alignmentEdge}:function(e,t,n,o,r,i,a){void 0===r&&(r=0);var s=o.alignmentEdge,l=o.alignTargetEdge,u={elementRectangle:e,targetEdge:o.targetEdge,alignmentEdge:s};i||a||(u=function(e,t,n,o,r){void 0===r&&(r=0);var i=[bu.left,bu.right,bu.bottom,bu.top];Uo()&&(i[0]*=-1,i[1]*=-1);for(var a,s=e,l=o.targetEdge,u=o.alignmentEdge,c=l,d=u,p=0;p<4;p++){if(Wu(s,n,l))return{elementRectangle:s,targetEdge:l,alignmentEdge:u};var f=Uu(s,n);(!a||f<a)&&(a=f,c=l,d=u),i.splice(i.indexOf(l),1),i.length>0&&(i.indexOf(-1*l)>-1?l*=-1:(u=l,l=i.slice(-1)[0]),s=ju(e,t,{targetEdge:l,alignmentEdge:u},r))}return{elementRectangle:s=ju(e,t,{targetEdge:c,alignmentEdge:d},r),targetEdge:c,alignmentEdge:d}}(e,t,n,o,r));var c=Mu(u.elementRectangle,n),d=i?-u.targetEdge:void 0;if(c.length>0)if(l)if(u.alignmentEdge&&c.indexOf(-1*u.alignmentEdge)>-1){var p=function(e,t,n,o){var r=e.alignmentEdge,i=e.targetEdge,a=-1*r;return{elementRectangle:ju(e.elementRectangle,t,{targetEdge:i,alignmentEdge:a},n,o),targetEdge:i,alignmentEdge:a}}(u,t,r,a);if(Pu(p.elementRectangle,n))return p;u=Vu(Mu(p.elementRectangle,n),u,n,d)}else u=Vu(c,u,n,d);else u=Vu(c,u,n,d);return u}(s,t,n,o,r,i,a)}function $u(e){var t=e.getBoundingClientRect();return new Iu(t.left,t.right,t.top,t.bottom)}function Xu(e,t,n,o){var r=e.gapSpace?e.gapSpace:0,i=function(e,t){var n;if(t){if(t.preventDefault){var o=t;n=new Iu(o.clientX,o.clientX,o.clientY,o.clientY)}else if(t.getBoundingClientRect)n=$u(t);else{var r=t,i=r.left||r.x,a=r.top||r.y,s=r.right||i,l=r.bottom||a;n=new Iu(i,s,a,l)}if(!Pu(n,e))for(var u=0,c=Mu(n,e);u<c.length;u++){var d=c[u];n[bu[d]]=e[bu[d]]}}else n=new Iu(0,0,0,0);return n}(n,e.target),a=function(e,t,n,o,r){return e.isAuto&&(e.alignmentEdge=Qu(e.targetEdge,t,n)),e.alignTargetEdge=r,e}(function(e,t,n){if(void 0===e&&(e=7),n)return{alignmentEdge:n.alignmentEdge,isAuto:n.isAuto,targetEdge:n.targetEdge};var o=H({},Tu[e]);return Uo()?(o.alignmentEdge&&o.alignmentEdge%2==0&&(o.alignmentEdge=-1*o.alignmentEdge),void 0!==t?Tu[t]:o):o}(e.directionalHint,e.directionalHintForRTL,o),i,n,e.coverTarget,e.alignTargetEdge),s=Yu($u(t),i,n,a,r,e.directionalHintFixed,e.coverTarget);return H(H({},s),{targetRectangle:i})}function Ju(e,t,n,o,r){var i=e.isBeakVisible&&e.beakWidth||0,a=function(e){return Math.sqrt(e*e*2)}(i)/2+(e.gapSpace?e.gapSpace:0),s=e;s.gapSpace=a;var l,u,c,d,p,f,h,m,g,v=e.bounds?(g=e.bounds,new Iu(g.left,g.right,g.top,g.bottom)):new Iu(0,window.innerWidth-function(){if(void 0===gi){var e=document.createElement("div");e.style.setProperty("width","100px"),e.style.setProperty("height","100px"),e.style.setProperty("overflow","scroll"),e.style.setProperty("position","absolute"),e.style.setProperty("top","-9999px"),document.body.appendChild(e),gi=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return gi}(),0,window.innerHeight),y=Xu(s,n,v,o),b=(l=y,u=function(e,t){var n=t.targetRectangle,o=Ku(t.targetEdge),r=o.positiveEdge,i=o.negativeEdge,a=Au(n,t.targetEdge),s=new Iu(e/2,t.elementRectangle.width-e/2,e/2,t.elementRectangle.height-e/2),l=new Iu(0,e,0,e);return Wu(l=Gu(l=Ou(l,-1*t.targetEdge,-e/2),-1*t.targetEdge,a-Bu(r,t.elementRectangle)),s,r)?Wu(l,s,i)||(l=zu(l,s,i)):l=zu(l,s,r),l}(i,y),c=v,d=-1*l.targetEdge,p=new Iu(0,l.elementRectangle.width,0,l.elementRectangle.height),f={},h=qu(l.elementRectangle,l.alignmentEdge?l.alignmentEdge:Ku(d).positiveEdge,c),m=Hu(l.elementRectangle,l.targetRectangle,d)>Math.abs(Fu(u,d)),f[bu[d]]=Fu(u,d),f[bu[h]]=Hu(u,p,h),{elementPosition:H({},f),closestEdge:Qu(l.targetEdge,u,p),targetEdge:d,hideBeak:!m});return H(H({},function(e,t,n,o,r){return{elementPosition:Zu(e.elementRectangle,t,e.targetEdge,n,e.alignmentEdge,o,r,e.forcedInBounds),targetEdge:e.targetEdge,alignmentEdge:e.alignmentEdge}}(y,t,v,e.coverTarget,r)),{beakPosition:b})}function ec(t,n){var o=e.useRef(),r=e.useRef(null),i=Ma();if(!t||t!==o.current||"string"==typeof t){var a=null==n?void 0:n.current;if(t)if("string"==typeof t){var s=No(a);r.current=s?s.querySelector(t):null}else r.current="stopPropagation"in t||"getBoundingClientRect"in t?t:"current"in t?t.current:t;o.current=t}return[r,i]}var tc=((Ru={})[bu.top]=Ct.slideUpIn10,Ru[bu.bottom]=Ct.slideDownIn10,Ru[bu.left]=Ct.slideLeftIn10,Ru[bu.right]=Ct.slideRightIn10,Ru),nc={opacity:0,filter:"opacity(0)",pointerEvents:"none"},oc=["role","aria-roledescription"],rc={preventDismissOnLostFocus:!1,preventDismissOnScroll:!1,preventDismissOnResize:!1,isBeakVisible:!0,beakWidth:16,gapSpace:0,minPagePadding:8,directionalHint:7},ic=kr({disableCaching:!0});function ac(t,n,o,r,i){var a=e.useState(),s=a[0],l=a[1],u=e.useRef(0),c=e.useRef(),d=Gl(),p=t.hidden,f=t.target,h=t.finalHeight,m=t.calloutMaxHeight,g=t.onPositioned,v=t.directionalHint;return e.useEffect((function(){if(!p){var e=d.requestAnimationFrame((function(){var e,a,d,p;if(n.current&&o){var v=H(H({},t),{target:r.current,bounds:i()}),y=o.cloneNode(!0);y.style.maxHeight=m?""+m:"",y.style.visibility="hidden",null===(e=o.parentElement)||void 0===e||e.appendChild(y);var b=c.current===f?s:void 0,_=h?function(e,t,n,o){return function(e,t,n,o){return Ju(e,t,n,o,!0)}(e,t,n,o)}(v,n.current,y,b):function(e,t,n,o){return Ju(e,t,n,o)}(v,n.current,y,b);null===(a=o.parentElement)||void 0===a||a.removeChild(y),!s&&_||s&&_&&(p=_,!uc((d=s).elementPosition,p.elementPosition)||!uc(d.beakPosition.elementPosition,p.beakPosition.elementPosition))&&u.current<5?(u.current++,l(_)):u.current>0&&(u.current=0,null==g||g(s))}}),o);return c.current=f,function(){d.cancelAnimationFrame(e),c.current=void 0}}l(void 0),u.current=0}),[p,v,d,o,m,n,r,h,i,g,s,t,f]),s}var sc=e.memo(e.forwardRef((function(t,n){var o=Fl(rc,t),r=o.styles,i=o.style,a=o.ariaLabel,s=o.ariaDescribedBy,l=o.ariaLabelledBy,u=o.className,c=o.isBeakVisible,d=o.children,p=o.beakWidth,f=o.calloutWidth,h=o.calloutMaxWidth,m=o.calloutMinWidth,g=o.doNotLayer,v=o.finalHeight,y=o.hideOverflow,b=void 0===y?!!v:y,_=o.backgroundColor,C=o.calloutMaxHeight,k=o.onScroll,S=o.shouldRestoreFocus,w=void 0===S||S,x=o.target,E=o.hidden,I=o.onLayerMounted,D=e.useRef(null),R=e.useState(null),T=R[0],P=R[1],M=e.useCallback((function(e){P(e)}),[]),F=Gi(D,n),L=ec(o.target,{current:T}),A=L[0],N=L[1],B=function(t,n,o){var r=t.bounds,i=t.minPagePadding,a=void 0===i?rc.minPagePadding:i,s=t.target,l=e.useState(!1),u=l[0],c=l[1],d=e.useRef(),p=e.useCallback((function(){if(!d.current||u){var e="function"==typeof r?o?r(s,o):void 0:r;!e&&o&&(e=function(e,t){return function(e,t){var n=void 0;if(t.getWindowSegments&&(n=t.getWindowSegments()),void 0===n||n.length<=1)return{top:0,left:0,right:t.innerWidth,bottom:t.innerHeight,width:t.innerWidth,height:t.innerHeight};var o=0,r=0;if(null!==e&&e.getBoundingClientRect){var i=e.getBoundingClientRect();o=(i.left+i.right)/2,r=(i.top+i.bottom)/2}else null!==e&&(o=e.left||e.x,r=e.top||e.y);for(var a={top:0,left:0,right:0,bottom:0,width:0,height:0},s=0,l=n;s<l.length;s++){var u=l[s];o&&u.left<=o&&u.right>=o&&r&&u.top<=r&&u.bottom>=r&&(a={top:u.top,left:u.left,right:u.right,bottom:u.bottom,width:u.width,height:u.height})}return a}(e,t)}(n.current,o),e={top:e.top+a,left:e.left+a,right:e.right-a,bottom:e.bottom-a,width:e.width-2*a,height:e.height-2*a}),d.current=e,u&&c(!1)}return d.current}),[r,a,s,n,o,u]),f=Gl();return jl(o,"resize",f.debounce((function(){c(!0)}),500,{leading:!0})),p}(o,A,N),O=ac(o,D,T,A,B),z=function(t,n,o){var r,i=t.calloutMaxHeight,a=t.finalHeight,s=t.directionalHint,l=t.directionalHintFixed,u=t.hidden,c=e.useState(),d=c[0],p=c[1],f=null!==(r=null==o?void 0:o.elementPosition)&&void 0!==r?r:{},h=f.top,m=f.bottom;return e.useEffect((function(){var e,t=null!==(e=n())&&void 0!==e?e:{},o=t.top,r=t.bottom;i||u?p(i||void 0):"number"==typeof h&&r?p(r-h):"number"==typeof m&&"number"==typeof o&&r&&p(r-o-m)}),[m,i,a,s,l,n,u,o,h]),d}(o,B,O),W=function(t,n,o,r,i){var a=t.hidden,s=t.onDismiss,l=t.preventDismissOnScroll,u=t.preventDismissOnResize,c=t.preventDismissOnLostFocus,d=t.dismissOnTargetClick,p=t.shouldDismissOnWindowFocus,f=t.preventDismissOnEvent,h=e.useRef(!1),m=Gl(),g=xl([function(){h.current=!0},function(){h.current=!1}]),v=!!n;return e.useEffect((function(){var e=function(e){v&&!l&&g(e)},t=function(e){u||f&&f(e)||null==s||s(e)},n=function(e){c||g(e)},g=function(e){var t=e.target,n=o.current&&!Qr(o.current,t);if(n&&h.current)h.current=!1;else if(!r.current&&n||e.target!==i&&n&&(!r.current||"stopPropagation"in r.current||d||t!==r.current&&!Qr(r.current,t))){if(f&&f(e))return;null==s||s(e)}},y=function(e){p&&((!f||f(e))&&(f||c)||(null==i?void 0:i.document.hasFocus())||null!==e.relatedTarget||null==s||s(e))},b=new Promise((function(o){m.setTimeout((function(){if(!a&&i){var r=[Ll(i,"scroll",e,!0),Ll(i,"resize",t,!0),Ll(i.document.documentElement,"focus",n,!0),Ll(i.document.documentElement,"click",n,!0),Ll(i,"blur",y,!0)];o((function(){r.forEach((function(e){return e()}))}))}}),0)}));return function(){b.then((function(e){return e()}))}}),[a,m,o,r,i,s,p,d,c,u,l,v,f]),g}(o,O,D,A,N),U=W[0],V=W[1],G=(null==O?void 0:O.elementPosition.top)&&(null==O?void 0:O.elementPosition.bottom),j=H(H({},null==O?void 0:O.elementPosition),{maxHeight:z});if(G&&(j.bottom=void 0),function(t,n,o){var r=t.hidden,i=t.setInitialFocus,a=Gl(),s=!!n;e.useEffect((function(){if(!r&&i&&s&&o){var e=a.requestAnimationFrame((function(){return!!(t=ci(e=o,e,!0,!1,!1,!0))&&(yi(t),!0);var e,t}),o);return function(){return a.cancelAnimationFrame(e)}}}),[r,s,a,o,i])}(o,O,T),e.useEffect((function(){E||null==I||I()}),[E]),!N)return null;var K=b,q=c&&!!x,Z=ic(r,{theme:o.theme,className:u,overflowYHidden:K,calloutWidth:f,positions:O,beakWidth:p,backgroundColor:_,calloutMaxWidth:h,calloutMinWidth:m,doNotLayer:g}),Q=H(H({maxHeight:C||"100%"},i),K&&{overflowY:"hidden"}),Y=o.hidden?{visibility:"hidden"}:void 0;return e.createElement("div",{ref:F,className:Z.container,style:Y},e.createElement("div",H({},wo(o,So,oc),{className:xo(Z.root,O&&O.targetEdge&&tc[O.targetEdge]),style:O?H({},j):nc,tabIndex:-1,ref:M}),q&&e.createElement("div",{className:Z.beak,style:lc(O)}),q&&e.createElement("div",{className:Z.beakCurtain}),e.createElement(Ql,H({},wo(o,oc),{ariaDescribedBy:s,ariaLabel:a,ariaLabelledBy:l,className:Z.calloutMain,onDismiss:o.onDismiss,onMouseDown:U,onMouseUp:V,onRestoreFocus:o.onRestoreFocus,onScroll:k,shouldRestoreFocus:w,style:Q}),d)))})),(function(e,t){return!(t.shouldUpdateWhenHidden||!e.hidden||!t.hidden)||Yr(e,t)}));function lc(e){var t,n,o=H(H({},null===(t=null==e?void 0:e.beakPosition)||void 0===t?void 0:t.elementPosition),{display:(null===(n=null==e?void 0:e.beakPosition)||void 0===n?void 0:n.hideBeak)?"none":void 0});return o.top||o.bottom||o.left||o.right||(o.left=0,o.top=0),o}function uc(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],r=t[n];if(void 0===o||void 0===r)return!1;if(o.toFixed(2)!==r.toFixed(2))return!1}return!0}function cc(e){return{height:e,width:e}}sc.displayName="CalloutContentBase";var dc={container:"ms-Callout-container",root:"ms-Callout",beak:"ms-Callout-beak",beakCurtain:"ms-Callout-beakCurtain",calloutMain:"ms-Callout-main"},pc=vr(sc,(function(e){var t,n=e.theme,o=e.className,r=e.overflowYHidden,i=e.calloutWidth,a=e.beakWidth,s=e.backgroundColor,l=e.calloutMaxWidth,u=e.calloutMinWidth,c=e.doNotLayer,d=Nt(dc,n),p=n.semanticColors,f=n.effects;return{container:[d.container,{position:"relative"}],root:[d.root,n.fonts.medium,{position:"absolute",display:"flex",zIndex:c?kt.Layer:void 0,boxSizing:"border-box",borderRadius:f.roundedCorner2,boxShadow:f.elevation16,selectors:(t={},t[St]={borderWidth:1,borderStyle:"solid",borderColor:"WindowText"},t)},{selectors:{"&::-moz-focus-inner":{border:0},"&":{outline:"transparent"}}},o,!!i&&{width:i},!!l&&{maxWidth:l},!!u&&{minWidth:u}],beak:[d.beak,{position:"absolute",backgroundColor:p.menuBackground,boxShadow:"inherit",border:"inherit",boxSizing:"border-box",transform:"rotate(45deg)"},cc(a),s&&{backgroundColor:s}],beakCurtain:[d.beakCurtain,{position:"absolute",top:0,right:0,bottom:0,left:0,backgroundColor:p.menuBackground,borderRadius:f.roundedCorner2}],calloutMain:[d.calloutMain,{backgroundColor:p.menuBackground,overflowX:"hidden",overflowY:"auto",position:"relative",width:"100%",borderRadius:f.roundedCorner2},r&&{overflowY:"hidden"},s&&{backgroundColor:s}]}}),void 0,{scope:"CalloutContent"}),fc=e.forwardRef((function(t,n){var o=t.layerProps,r=t.doNotLayer,i=O(t,["layerProps","doNotLayer"]),a=e.createElement(pc,H({},i,{doNotLayer:r,ref:n}));return r?a:e.createElement(Oa,H({},o),a)}));fc.displayName="Callout";var hc,mc=function(t){var n=t.item,o=t.classNames,r=n.iconProps;return e.createElement(Xi,H({},r,{className:o.icon}))},gc=function(e){var t=e.item;return e.hasIcons?t.onRenderIcon?t.onRenderIcon(e,mc):mc(e):null},vc=function(t){var n=t.onCheckmarkClick,o=t.item,r=t.classNames,i=ku(o);return n?e.createElement(Xi,{iconName:!1!==o.canCheck&&i?"CheckMark":"",className:r.checkmarkIcon,onClick:function(e){return n(o,e)}}):null},yc=function(t){var n=t.item,o=t.classNames;return n.text||n.name?e.createElement("span",{className:o.label},n.text||n.name):null},bc=function(t){var n=t.item,o=t.classNames;return n.secondaryText?e.createElement("span",{className:o.secondaryText},n.secondaryText):null},_c=function(t){var n=t.item,o=t.classNames,r=t.theme;return Su(n)?e.createElement(Xi,H({iconName:Uo(r)?"ChevronLeft":"ChevronRight"},n.submenuIconProps,{className:o.subMenuIcon})):null},Cc=function(t){function n(e){var n=t.call(this,e)||this;return n.openSubMenu=function(){var e=n.props,t=e.item,o=e.openSubMenu,r=e.getSubmenuTarget;if(r){var i=r();Su(t)&&o&&i&&o(t,i)}},n.dismissSubMenu=function(){var e=n.props,t=e.item,o=e.dismissSubMenu;Su(t)&&o&&o()},n.dismissMenu=function(e){var t=n.props.dismissMenu;t&&t(void 0,e)},Br(n),n}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.item,o=t.classNames,r=n.onRenderContent||this._renderLayout;return e.createElement("div",{className:n.split?o.linkContentMenu:o.linkContent},r(this.props,{renderCheckMarkIcon:vc,renderItemIcon:gc,renderItemName:yc,renderSecondaryText:bc,renderSubMenuIcon:_c}))},n.prototype._renderLayout=function(t,n){return e.createElement(e.Fragment,null,n.renderCheckMarkIcon(t),n.renderItemIcon(t),n.renderItemName(t),n.renderSecondaryText(t),n.renderSubMenuIcon(t))},n}(e.Component),kc=Zn((function(e){return An({wrapper:{display:"inline-flex",height:"100%",alignItems:"center"},divider:{width:1,height:"100%",backgroundColor:e.palette.neutralTertiaryAlt}})})),Sc=36,wc=wt(0,639),xc=Zn((function(){var e;return{selectors:(e={},e[St]=H({backgroundColor:"Highlight",borderColor:"Highlight",color:"HighlightText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),e)}})),Ec=Zn((function(e){var t,n,o,r,i,a,s,l=e.semanticColors,u=e.fonts,c=e.palette,d=l.menuItemBackgroundHovered,p=l.menuItemTextHovered,f=l.menuItemBackgroundPressed,h=l.bodyDivider;return Fn({item:[u.medium,{color:l.bodyText,position:"relative",boxSizing:"border-box"}],divider:{display:"block",height:"1px",backgroundColor:h,position:"relative"},root:[xt(e),u.medium,{color:l.bodyText,backgroundColor:"transparent",border:"none",width:"100%",height:Sc,lineHeight:Sc,display:"block",cursor:"pointer",padding:"0px 8px 0 4px",textAlign:"left"}],rootDisabled:{color:l.disabledBodyText,cursor:"default",pointerEvents:"none",selectors:(t={},t[St]=H({color:"GrayText",opacity:1},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t)},rootHovered:H({backgroundColor:d,color:p,selectors:{".ms-ContextualMenu-icon":{color:c.themeDarkAlt},".ms-ContextualMenu-submenuIcon":{color:c.neutralPrimary}}},xc()),rootFocused:H({backgroundColor:c.white},xc()),rootChecked:H({selectors:{".ms-ContextualMenu-checkmarkIcon":{color:c.neutralPrimary}}},xc()),rootPressed:H({backgroundColor:f,selectors:{".ms-ContextualMenu-icon":{color:c.themeDark},".ms-ContextualMenu-submenuIcon":{color:c.neutralPrimary}}},xc()),rootExpanded:H({backgroundColor:f,color:l.bodyTextChecked},xc()),linkContent:{whiteSpace:"nowrap",height:"inherit",display:"flex",alignItems:"center",maxWidth:"100%"},anchorLink:{padding:"0px 8px 0 4px",textRendering:"auto",color:"inherit",letterSpacing:"normal",wordSpacing:"normal",textTransform:"none",textIndent:"0px",textShadow:"none",textDecoration:"none",boxSizing:"border-box"},label:{margin:"0 4px",verticalAlign:"middle",display:"inline-block",flexGrow:"1",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"},secondaryText:{color:e.palette.neutralSecondary,paddingLeft:"20px",textAlign:"right"},icon:{display:"inline-block",minHeight:"1px",maxHeight:Sc,fontSize:_t.medium,width:_t.medium,margin:"0 4px",verticalAlign:"middle",flexShrink:"0",selectors:(n={},n[wc]={fontSize:_t.large,width:_t.large},n)},iconColor:{color:l.menuIcon,selectors:(o={},o[St]={color:"inherit"},o["$root:hover &"]={selectors:(r={},r[St]={color:"HighlightText"},r)},o["$root:focus &"]={selectors:(i={},i[St]={color:"HighlightText"},i)},o)},iconDisabled:{color:l.disabledBodyText},checkmarkIcon:{color:l.bodySubtext,selectors:(a={},a[St]={color:"HighlightText"},a)},subMenuIcon:{height:Sc,lineHeight:Sc,color:c.neutralSecondary,textAlign:"center",display:"inline-block",verticalAlign:"middle",flexShrink:"0",fontSize:_t.small,selectors:(s={":hover":{color:c.neutralPrimary},":active":{color:c.neutralPrimary}},s[wc]={fontSize:_t.medium},s[St]={color:"HighlightText"},s)},splitButtonFlexContainer:[xt(e),{display:"flex",height:Sc,flexWrap:"nowrap",justifyContent:"center",alignItems:"flex-start"}]})})),Ic=wt(0,639),Dc=Zn((function(e){var t;return An(kc(e),{wrapper:{position:"absolute",right:28,selectors:(t={},t[Ic]={right:32},t)},divider:{height:16,width:1}})})),Rc={item:"ms-ContextualMenu-item",divider:"ms-ContextualMenu-divider",root:"ms-ContextualMenu-link",isChecked:"is-checked",isExpanded:"is-expanded",isDisabled:"is-disabled",linkContent:"ms-ContextualMenu-linkContent",linkContentMenu:"ms-ContextualMenu-linkContent",icon:"ms-ContextualMenu-icon",iconColor:"ms-ContextualMenu-iconColor",checkmarkIcon:"ms-ContextualMenu-checkmarkIcon",subMenuIcon:"ms-ContextualMenu-submenuIcon",label:"ms-ContextualMenu-itemText",secondaryText:"ms-ContextualMenu-secondaryText",splitMenu:"ms-ContextualMenu-splitMenu",screenReaderText:"ms-ContextualMenu-screenReaderText"},Tc=Zn((function(e,t,n,o,r,i,a,s,l,u,c,d){var p,f,h,m,g=Ec(e),v=Nt(Rc,e);return An({item:[v.item,g.item,a],divider:[v.divider,g.divider,s],root:[v.root,g.root,o&&[v.isChecked,g.rootChecked],r&&g.anchorLink,n&&[v.isExpanded,g.rootExpanded],t&&[v.isDisabled,g.rootDisabled],!t&&!n&&[{selectors:(p={":hover":g.rootHovered,":active":g.rootPressed},p[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,p[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},p)}],d],splitPrimary:[g.root,{width:"calc(100% - 28px)"},o&&["is-checked",g.rootChecked],(t||c)&&["is-disabled",g.rootDisabled],!(t||c)&&!o&&[{selectors:(f={":hover":g.rootHovered},f[":hover ~ ."+v.splitMenu]=g.rootHovered,f[":active"]=g.rootPressed,f[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,f[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},f)}]],splitMenu:[v.splitMenu,g.root,{flexBasis:"0",padding:"0 8px",minWidth:"28px"},n&&["is-expanded",g.rootExpanded],t&&["is-disabled",g.rootDisabled],!t&&!n&&[{selectors:(h={":hover":g.rootHovered,":active":g.rootPressed},h[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,h[".ms-Fabric--isFocusVisible &:hover"]={background:"inherit;"},h)}]],anchorLink:g.anchorLink,linkContent:[v.linkContent,g.linkContent],linkContentMenu:[v.linkContentMenu,g.linkContent,{justifyContent:"center"}],icon:[v.icon,i&&g.iconColor,g.icon,l,t&&[v.isDisabled,g.iconDisabled]],iconColor:g.iconColor,checkmarkIcon:[v.checkmarkIcon,i&&g.checkmarkIcon,g.icon,l],subMenuIcon:[v.subMenuIcon,g.subMenuIcon,u,n&&{color:e.palette.neutralPrimary},t&&[g.iconDisabled]],label:[v.label,g.label],secondaryText:[v.secondaryText,g.secondaryText],splitContainer:[g.splitButtonFlexContainer,!t&&!o&&[{selectors:(m={},m[".ms-Fabric--isFocusVisible &:focus, .ms-Fabric--isFocusVisible &:focus:hover"]=g.rootFocused,m)}]],screenReaderText:[v.screenReaderText,g.screenReaderText,Et,{visibility:"hidden"}]})})),Pc=function(e){var t=e.theme,n=e.disabled,o=e.expanded,r=e.checked,i=e.isAnchorLink,a=e.knownIcon,s=e.itemClassName,l=e.dividerClassName,u=e.iconClassName,c=e.subMenuClassName,d=e.primaryDisabled,p=e.className;return Tc(t,n,o,r,i,a,s,l,u,c,d,p)},Mc=vr(Cc,Pc,void 0,{scope:"ContextualMenuItem"}),Fc=function(e){function t(t){var n=e.call(this,t)||this;return n._onItemMouseEnter=function(e){var t=n.props,o=t.item,r=t.onItemMouseEnter;r&&r(o,e,e.currentTarget)},n._onItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClickBase;r&&r(o,e,e.currentTarget)},n._onItemMouseLeave=function(e){var t=n.props,o=t.item,r=t.onItemMouseLeave;r&&r(o,e)},n._onItemKeyDown=function(e){var t=n.props,o=t.item,r=t.onItemKeyDown;r&&r(o,e)},n._onItemMouseMove=function(e){var t=n.props,o=t.item,r=t.onItemMouseMove;r&&r(o,e,e.currentTarget)},n._getSubmenuTarget=function(){},Br(n),n}return B(t,e),t.prototype.shouldComponentUpdate=function(e){return!Yr(e,this.props)},t}(e.Component);function Lc(t){var n=(0,e.useRef)();return(0,e.useEffect)((function(){n.current=t})),n.current}!function(e){e.KEYTIP_ADDED="keytipAdded",e.KEYTIP_REMOVED="keytipRemoved",e.KEYTIP_UPDATED="keytipUpdated",e.PERSISTED_KEYTIP_ADDED="persistedKeytipAdded",e.PERSISTED_KEYTIP_REMOVED="persistedKeytipRemoved",e.PERSISTED_KEYTIP_EXECUTE="persistedKeytipExecute",e.ENTER_KEYTIP_MODE="enterKeytipMode",e.EXIT_KEYTIP_MODE="exitKeytipMode"}(hc||(hc={}));var Ac=function(){function e(){this.keytips={},this.persistedKeytips={},this.sequenceMapping={},this.inKeytipMode=!1,this.shouldEnterKeytipMode=!0,this.delayUpdatingKeytipChange=!1}return e.getInstance=function(){return this._instance},e.prototype.init=function(e){this.delayUpdatingKeytipChange=e},e.prototype.register=function(e,t){void 0===t&&(t=!1);var n=e;t||(n=this.addParentOverflow(e),this.sequenceMapping[n.keySequences.toString()]=n);var o=this._getUniqueKtp(n);if(t?this.persistedKeytips[o.uniqueID]=o:this.keytips[o.uniqueID]=o,this.inKeytipMode||!this.delayUpdatingKeytipChange){var r=t?hc.PERSISTED_KEYTIP_ADDED:hc.KEYTIP_ADDED;Jr.raise(this,r,{keytip:n,uniqueID:o.uniqueID})}return o.uniqueID},e.prototype.update=function(e,t){var n=this.addParentOverflow(e),o=this._getUniqueKtp(n,t),r=this.keytips[t];r&&(o.keytip.visible=r.keytip.visible,this.keytips[t]=o,delete this.sequenceMapping[r.keytip.keySequences.toString()],this.sequenceMapping[o.keytip.keySequences.toString()]=o.keytip,!this.inKeytipMode&&this.delayUpdatingKeytipChange||Jr.raise(this,hc.KEYTIP_UPDATED,{keytip:o.keytip,uniqueID:o.uniqueID}))},e.prototype.unregister=function(e,t,n){void 0===n&&(n=!1),n?delete this.persistedKeytips[t]:delete this.keytips[t],!n&&delete this.sequenceMapping[e.keySequences.toString()];var o=n?hc.PERSISTED_KEYTIP_REMOVED:hc.KEYTIP_REMOVED;!this.inKeytipMode&&this.delayUpdatingKeytipChange||Jr.raise(this,o,{keytip:e,uniqueID:t})},e.prototype.enterKeytipMode=function(){Jr.raise(this,hc.ENTER_KEYTIP_MODE)},e.prototype.exitKeytipMode=function(){Jr.raise(this,hc.EXIT_KEYTIP_MODE)},e.prototype.getKeytips=function(){var e=this;return Object.keys(this.keytips).map((function(t){return e.keytips[t].keytip}))},e.prototype.addParentOverflow=function(e){var t=W([],e.keySequences);if(t.pop(),0!==t.length){var n=this.sequenceMapping[t.toString()];if(n&&n.overflowSetSequence)return H(H({},e),{overflowSetSequence:n.overflowSetSequence})}return e},e.prototype.menuExecute=function(e,t){Jr.raise(this,hc.PERSISTED_KEYTIP_EXECUTE,{overflowButtonSequences:e,keytipSequences:t})},e.prototype._getUniqueKtp=function(e,t){return void 0===t&&(t=ni()),{keytip:H({},e),uniqueID:t}},e._instance=new e,e}();function Nc(e){return e.reduce((function(e,t){return e+"-"+t.split("").join("-")}),"ktp")}var Bc=function(t){var n,o=t.children,r=function(t){var n=e.useRef(),o=t.keytipProps?H({disabled:t.disabled},t.keytipProps):void 0,r=xl(Ac.getInstance()),i=Lc(t);e.useLayoutEffect((function(){n.current&&o&&((null==i?void 0:i.keytipProps)!==t.keytipProps||(null==i?void 0:i.disabled)!==t.disabled)&&r.update(o,n.current)})),e.useLayoutEffect((function(){return o&&(n.current=r.register(o)),function(){o&&r.unregister(o,n.current)}}),[]);var a={ariaDescribedBy:void 0,keytipId:void 0};return o&&(a=function(e,t,n){var o=e.addParentOverflow(t),r=hu(n,function(e){var t=" ktp-layer-id";return e.length?t+" "+Nc(e):t}(o.keySequences)),i=W([],o.keySequences);return o.overflowSetSequence&&(i=function(e,t){var n,o,r;return n=t.length-1,o=W([],t).pop(),(r=W([],e).slice()).splice(n,0,o),r}(i,o.overflowSetSequence)),{ariaDescribedBy:r,keytipId:Nc(i)}}(r,o,t.ariaDescribedBy)),a}(O(t,["children"])),i=r.keytipId,a=r.ariaDescribedBy;return o(((n={})["data-ktp-target"]=i,n["data-ktp-execute-target"]=i,n["aria-describedby"]=a,n))},Hc=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._anchor=e.createRef(),n._getMemoizedMenuButtonKeytipProps=Zn((function(e){return H(H({},e),{hasMenu:!0})})),n._getSubmenuTarget=function(){return n._anchor.current?n._anchor.current:void 0},n._onItemClick=function(e){var t=n.props,o=t.item,r=t.onItemClick;r&&r(o,e)},n._renderAriaDescription=function(t,o){return t?e.createElement("span",{id:n._ariaDescriptionId,className:o},t):null},n}return B(n,t),n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.contextualMenuItemAs,d=void 0===c?Mc:c,p=n.expandedMenuItemKey,f=n.onItemClick,h=n.openSubMenu,m=n.dismissSubMenu,g=n.dismissMenu,v=o.rel;o.target&&"_blank"===o.target.toLowerCase()&&(v=v||"nofollow noopener noreferrer");var y=Su(o),b=wo(o,so),_=wu(o),C=o.itemProps,k=o.ariaDescription,S=o.keytipProps;S&&y&&(S=this._getMemoizedMenuButtonKeytipProps(S)),k&&(this._ariaDescriptionId=ni());var w=hu(o.ariaDescribedBy,k?this._ariaDescriptionId:void 0,b["aria-describedby"]),x={"aria-describedby":w};return e.createElement("div",null,e.createElement(Bc,{keytipProps:o.keytipProps,ariaDescribedBy:w,disabled:_},(function(n){return e.createElement("a",H({},x,b,n,{ref:t._anchor,href:o.href,target:o.target,rel:v,className:r.root,role:"menuitem","aria-haspopup":y||void 0,"aria-expanded":y?o.key===p:void 0,"aria-posinset":a+1,"aria-setsize":s,"aria-disabled":wu(o),style:o.style,onClick:t._onItemClick,onMouseEnter:t._onItemMouseEnter,onMouseLeave:t._onItemMouseLeave,onMouseMove:t._onItemMouseMove,onKeyDown:y?t._onItemKeyDown:void 0}),e.createElement(d,H({componentRef:o.componentRef,item:o,classNames:r,index:i,onCheckmarkClick:l&&f?f:void 0,hasIcons:u,openSubMenu:h,dismissSubMenu:m,dismissMenu:g,getSubmenuTarget:t._getSubmenuTarget},C)),t._renderAriaDescription(k,r.screenReaderText))})))},n}(Fc),Oc=kr(),zc=e.forwardRef((function(t,n){var o=t.styles,r=t.theme,i=t.getClassNames,a=t.className,s=Oc(o,{theme:r,getClassNames:i,className:a});return e.createElement("span",{className:s.wrapper,ref:n},e.createElement("span",{className:s.divider}))}));zc.displayName="VerticalDividerBase";var Wc=vr(zc,(function(e){var t=e.theme,n=e.getClassNames,o=e.className;if(!t)throw new Error("Theme is undefined or null.");if(n){var r=n(t);return{wrapper:[r.wrapper],divider:[r.divider]}}return{wrapper:[{display:"inline-flex",height:"100%",alignItems:"center"},o],divider:[{width:1,height:"100%",backgroundColor:t.palette.neutralTertiaryAlt}]}}),void 0,{scope:"VerticalDivider"}),Uc=function(t){function n(n){var o=t.call(this,n)||this;return o._getMemoizedMenuButtonKeytipProps=Zn((function(e){return H(H({},e),{hasMenu:!0})})),o._onItemKeyDown=function(e){var t=o.props,n=t.item,r=t.onItemKeyDown;e.which===Ro?(o._executeItemClick(e),e.preventDefault(),e.stopPropagation()):r&&r(n,e)},o._getSubmenuTarget=function(){return o._splitButton},o._renderAriaDescription=function(t,n){return t?e.createElement("span",{id:o._ariaDescriptionId,className:n},t):null},o._onItemMouseEnterPrimary=function(e){var t=o.props,n=t.item,r=t.onItemMouseEnter;r&&r(H(H({},n),{subMenuProps:void 0,items:void 0}),e,o._splitButton)},o._onItemMouseEnterIcon=function(e){var t=o.props,n=t.item,r=t.onItemMouseEnter;r&&r(n,e,o._splitButton)},o._onItemMouseMovePrimary=function(e){var t=o.props,n=t.item,r=t.onItemMouseMove;r&&r(H(H({},n),{subMenuProps:void 0,items:void 0}),e,o._splitButton)},o._onItemMouseMoveIcon=function(e){var t=o.props,n=t.item,r=t.onItemMouseMove;r&&r(n,e,o._splitButton)},o._onIconItemClick=function(e){var t=o.props,n=t.item,r=t.onItemClickBase;r&&r(n,e,o._splitButton?o._splitButton:e.currentTarget)},o._executeItemClick=function(e){var t=o.props,n=t.item,r=t.executeItemClick,i=t.onItemClick;if(!n.disabled&&!n.isDisabled)return o._processingTouch&&i?i(n,e):void(r&&r(n,e))},o._onTouchStart=function(e){o._splitButton&&!("onpointerdown"in o._splitButton)&&o._handleTouchAndPointerEvent(e)},o._onPointerDown=function(e){"touch"===e.pointerType&&(o._handleTouchAndPointerEvent(e),e.preventDefault(),e.stopImmediatePropagation())},o._async=new qr(o),o._events=new Jr(o),o}return B(n,t),n.prototype.componentDidMount=function(){this._splitButton&&"onpointerdown"in this._splitButton&&this._events.on(this._splitButton,"pointerdown",this._onPointerDown,!0)},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.onItemMouseLeave,d=n.expandedMenuItemKey,p=Su(o),f=o.keytipProps;f&&(f=this._getMemoizedMenuButtonKeytipProps(f));var h=o.ariaDescription;return h&&(this._ariaDescriptionId=ni()),e.createElement(Bc,{keytipProps:f,disabled:wu(o)},(function(n){return e.createElement("div",{"data-ktp-target":n["data-ktp-target"],ref:function(e){return t._splitButton=e},role:xu(o),"aria-label":o.ariaLabel,className:r.splitContainer,"aria-disabled":wu(o),"aria-expanded":p?o.key===d:void 0,"aria-haspopup":!0,"aria-describedby":hu(o.ariaDescribedBy,h?t._ariaDescriptionId:void 0,n["aria-describedby"]),"aria-checked":o.isChecked||o.checked,"aria-posinset":a+1,"aria-setsize":s,onMouseEnter:t._onItemMouseEnterPrimary,onMouseLeave:c?c.bind(t,H(H({},o),{subMenuProps:null,items:null})):void 0,onMouseMove:t._onItemMouseMovePrimary,onKeyDown:t._onItemKeyDown,onClick:t._executeItemClick,onTouchStart:t._onTouchStart,tabIndex:0,"data-is-focusable":!0,"aria-roledescription":o["aria-roledescription"]},t._renderSplitPrimaryButton(o,r,i,l,u),t._renderSplitDivider(o),t._renderSplitIconButton(o,r,i,n),t._renderAriaDescription(h,r.screenReaderText))}))},n.prototype._renderSplitPrimaryButton=function(t,n,o,r,i){var a=this.props,s=a.contextualMenuItemAs,l=void 0===s?Mc:s,u=a.onItemClick,c={key:t.key,disabled:wu(t)||t.primaryDisabled,name:t.name,text:t.text||t.name,secondaryText:t.secondaryText,className:n.splitPrimary,canCheck:t.canCheck,isChecked:t.isChecked,checked:t.checked,iconProps:t.iconProps,onRenderIcon:t.onRenderIcon,data:t.data,"data-is-focusable":!1},d=t.itemProps;return e.createElement("button",H({},wo(c,lo)),e.createElement(l,H({"data-is-focusable":!1,item:c,classNames:n,index:o,onCheckmarkClick:r&&u?u:void 0,hasIcons:i},d)))},n.prototype._renderSplitDivider=function(t){var n=t.getSplitButtonVerticalDividerClassNames||Dc;return e.createElement(Wc,{getClassNames:n})},n.prototype._renderSplitIconButton=function(t,n,o,r){var i=this.props,a=i.contextualMenuItemAs,s=void 0===a?Mc:a,l=i.onItemMouseLeave,u=i.onItemMouseDown,c=i.openSubMenu,d=i.dismissSubMenu,p=i.dismissMenu,f={onClick:this._onIconItemClick,disabled:wu(t),className:n.splitMenu,subMenuProps:t.subMenuProps,submenuIconProps:t.submenuIconProps,split:!0,key:t.key},h=H(H({},wo(f,lo)),{onMouseEnter:this._onItemMouseEnterIcon,onMouseLeave:l?l.bind(this,t):void 0,onMouseDown:function(e){return u?u(t,e):void 0},onMouseMove:this._onItemMouseMoveIcon,"data-is-focusable":!1,"data-ktp-execute-target":r["data-ktp-execute-target"],"aria-hidden":!0}),m=t.itemProps;return e.createElement("button",H({},h),e.createElement(s,H({componentRef:t.componentRef,item:f,classNames:n,index:o,hasIcons:!1,openSubMenu:c,dismissSubMenu:d,dismissMenu:p,getSubmenuTarget:this._getSubmenuTarget},m)))},n.prototype._handleTouchAndPointerEvent=function(e){var t=this,n=this.props.onTap;n&&n(e),this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){t._processingTouch=!1,t._lastTouchTimeoutId=void 0}),500)},n}(Fc),Vc=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._btn=e.createRef(),n._getMemoizedMenuButtonKeytipProps=Zn((function(e){return H(H({},e),{hasMenu:!0})})),n._renderAriaDescription=function(t,o){return t?e.createElement("span",{id:n._ariaDescriptionId,className:o},t):null},n._getSubmenuTarget=function(){return n._btn.current?n._btn.current:void 0},n}return B(n,t),n.prototype.render=function(){var t=this,n=this.props,o=n.item,r=n.classNames,i=n.index,a=n.focusableElementIndex,s=n.totalItemCount,l=n.hasCheckmarks,u=n.hasIcons,c=n.contextualMenuItemAs,d=void 0===c?Mc:c,p=n.expandedMenuItemKey,f=n.onItemMouseDown,h=n.onItemClick,m=n.openSubMenu,g=n.dismissSubMenu,v=n.dismissMenu,y=ku(o),b=null!==y,_=xu(o),C=Su(o),k=o.itemProps,S=o.ariaLabel,w=o.ariaDescription,x=wo(o,lo);delete x.disabled;var E=o.role||_;w&&(this._ariaDescriptionId=ni());var I=hu(o.ariaDescribedBy,w?this._ariaDescriptionId:void 0,x["aria-describedby"]),D={className:r.root,onClick:this._onItemClick,onKeyDown:C?this._onItemKeyDown:void 0,onMouseEnter:this._onItemMouseEnter,onMouseLeave:this._onItemMouseLeave,onMouseDown:function(e){return f?f(o,e):void 0},onMouseMove:this._onItemMouseMove,href:o.href,title:o.title,"aria-label":S,"aria-describedby":I,"aria-haspopup":C||void 0,"aria-expanded":C?o.key===p:void 0,"aria-posinset":a+1,"aria-setsize":s,"aria-disabled":wu(o),"aria-checked":"menuitemcheckbox"!==E&&"menuitemradio"!==E||!b?void 0:!!y,"aria-selected":"menuitem"===E&&b?!!y:void 0,role:E,style:o.style},R=o.keytipProps;return R&&C&&(R=this._getMemoizedMenuButtonKeytipProps(R)),e.createElement(Bc,{keytipProps:R,ariaDescribedBy:I,disabled:wu(o)},(function(n){return e.createElement("button",H({ref:t._btn},x,D,n),e.createElement(d,H({componentRef:o.componentRef,item:o,classNames:r,index:i,onCheckmarkClick:l&&h?h:void 0,hasIcons:u,openSubMenu:m,dismissSubMenu:g,dismissMenu:v,getSubmenuTarget:t._getSubmenuTarget},k)),t._renderAriaDescription(w,r.screenReaderText))}))},n}(Fc),Gc=e.createContext({}),jc=kr(),Kc=kr(),qc={items:[],shouldFocusOnMount:!0,gapSpace:0,directionalHint:7,beakWidth:16};function Zc(e,t){var n=null==t?void 0:t.target,o=e.subMenuProps?e.subMenuProps.items:e.items;if(o){for(var r=[],i=0,a=o;i<a.length;i++){var s=a[i];if(s.preferMenuTargetAsEventTarget){var l=s.onClick,u=O(s,["onClick"]);r.push(H(H({},u),{onClick:od(l,n)}))}else r.push(s)}return r}}var Qc="ContextualMenu",Yc=Zn((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return Ln.apply(void 0,W([t,Pc],e))}}));function $c(t,n){var o=t.hidden,r=t.items,i=t.theme,a=t.className,s=t.id,l=t.target,u=e.useState(),c=u[0],d=u[1],p=e.useState(),f=p[0],h=p[1],m=e.useState(),g=m[0],v=m[1],y=Al(Qc,s),b=e.useCallback((function(){v(void 0),d(void 0),h(void 0)}),[]),_=e.useCallback((function(e,t,n){var o=e.key;c!==o&&(t.focus(),v(n),d(o),h(t))}),[c]);e.useEffect((function(){o&&b()}),[o,b]);var C=function(t,n){var o=e.useRef(!1);return e.useEffect((function(){return o.current=!0,function(){o.current=!1}}),[]),function(e,r){r?t(e,r):o.current&&n()}}(n,b);return[c,_,function(){var e=nd(c,r),t=null;if(e&&(t={items:Zc(e),target:f,onDismiss:C,isSubMenu:!0,id:y,shouldFocusOnMount:!0,shouldFocusOnContainer:g,directionalHint:Uo(i)?8:11,className:a,gapSpace:0,isBeakVisible:!1},e.subMenuProps&&$r(t,e.subMenuProps),e.preferMenuTargetAsEventTarget)){var n=e.onItemClick;t.onItemClick=od(n,l)}return t},C]}var Xc=e.memo(e.forwardRef((function(t,n){var o,r=Fl(qc,t),i=(r.ref,O(r,["ref"])),a=e.useRef(null),s=Gl(),l=Al(Qc,i.id),u=function(e,t){var n;return null===(n=i.onDismiss)||void 0===n?void 0:n.call(i,e,t)},c=ec(i.target,a),d=c[0],p=c[1],f=function(t,n){var o=t.hidden,r=t.onRestoreFocus,i=e.useRef(),a=e.useCallback((function(e){var t,n;r?r(e):(null==e?void 0:e.documentContainsFocus)&&(null===(n=null===(t=i.current)||void 0===t?void 0:t.focus)||void 0===n||n.call(t))}),[r]);return e.useLayoutEffect((function(){var e;o?i.current&&(a({originalElement:i.current,containsFocus:!0,documentContainsFocus:(null===(e=No())||void 0===e?void 0:e.hasFocus())||!1}),i.current=void 0):i.current=null==n?void 0:n.document.activeElement}),[o,null==n?void 0:n.document.activeElement,a]),[a]}(i,p)[0],h=$c(i,u),m=h[0],g=h[1],v=h[2],y=h[3],b=function(t){var n=t.delayUpdateFocusOnHover,o=t.hidden,r=e.useRef(!n),i=e.useRef(!1);e.useEffect((function(){r.current=!n,i.current=!o&&!n&&i.current}),[n,o]);var a=e.useCallback((function(){n&&(r.current=!0)}),[n]);return[r,i,a]}(i),_=b[0],C=b[1],k=b[2],S=function(t){var n=e.useRef(!0),o=e.useRef();return[function(){n.current||void 0===o.current?n.current=!1:(t.clearTimeout(o.current),o.current=void 0),o.current=t.setTimeout((function(){n.current=!0}),250)},n]}(s),w=S[0],x=S[1],E=function(t,n){var o=t.subMenuHoverDelay,r=void 0===o?250:o,i=e.useRef(void 0),a=function(){void 0!==i.current&&(n.clearTimeout(i.current),i.current=void 0)};return[a,function(e){i.current=n.setTimeout((function(){e(),a()}),r)},i]}(i,s),I=E[0],D=E[1],R=E[2],T=Jl(a,i.responsiveMode);!function(t,n){var o=t.hidden,r=void 0!==o&&o,i=t.onMenuDismissed,a=t.onMenuOpened,s=Lc(r),l=e.useRef(a),u=e.useRef(i),c=e.useRef(t);l.current=a,u.current=i,c.current=t,e.useEffect((function(){var e,t;r&&!1===s?null===(e=u.current)||void 0===e||e.call(u,c.current):r||!1===s||null===(t=l.current)||void 0===t||t.call(l,c.current)}),[r,s]),e.useEffect((function(){return function(){var e;return null===(e=u.current)||void 0===e?void 0:e.call(u,c.current)}}),[])}(i);var P,M=function(t,n,o,r){var i=t.theme,a=t.isSubMenu,s=t.focusZoneProps,l=void 0===s?{}:s,u=l.checkForNoWrap,c=l.direction,d=void 0===c?ri.vertical:c,p=e.useRef(),f=function(e,t,o){var r=!1;return t(e)&&(n(e,o),e.preventDefault(),e.stopPropagation(),r=!0),r},h=function(e){return e.which===To||function(e){var t=Uo(i)?Lo:Mo;return!(e.which!==t||!a||d!==ri.vertical&&(!u||mi(e.target,"data-no-horizontal-wrap")))}(e)||e.which===Fo&&(e.altKey||e.metaKey)},m=function(e){p.current=Jc(e);var t=e.which===To&&(yu()||Cu());return f(e,h,t)},g=function(e){var t=p.current&&Jc(e);return p.current=!1,!!t&&!(Cu()||yu())};return[m,function(e){return f(e,g,!0)},function(e){if(!m(e)&&o.current){var t=!(!e.altKey&&!e.metaKey),n=e.which===Fo,r=e.which===Ao;if(!t&&(n||r)){var i=n?ui(o.current,o.current.lastChild,!0,!1,!0,!0):(a=o.current,s=o.current.firstChild,ci(a,s,!0,!1,!1,!0));i&&(i.focus(),e.preventDefault(),e.stopPropagation())}}var a,s},function(e,t){var n=Uo(i)?Mo:Lo;e.disabled||t.which!==n&&t.which!==Ro&&(t.which!==Ao||!t.altKey&&!t.metaKey)||(r(e,t.currentTarget,!1),t.preventDefault())}]}(i,u,a,g),F=M[0],L=M[1],A=M[2],N=M[3],B=function(e,t,n,o,r,i,a,s,l,u,c,d,p){var f=e.target,h=function(){return!t.current||!i.current},m=function(e,t,n){var o=n||t.currentTarget;e.key!==a&&(u(),void 0===a&&o.focus(),Su(e)?(t.stopPropagation(),l((function(){o.focus(),c(e,o,!0)}))):l((function(){d(t),o.focus()})))},g=function(e,t,n){var o=Zc(e);u(),Su(e)||o&&o.length?e.key!==a&&c(e,n,0!==t.nativeEvent.detail||"mouse"===t.nativeEvent.pointerType):v(e,t),t.stopPropagation(),t.preventDefault()},v=function(t,n){if(!t.disabled&&!t.isDisabled){t.preferMenuTargetAsEventTarget&&rd(n,f);var o=!1;t.onClick?o=!!t.onClick(n,t):e.onItemClick&&(o=!!e.onItemClick(n,t)),!o&&n.defaultPrevented||p(n,!0)}};return[function(e,t,n){h()||m(e,t,n)},function(e,a,s){var l=a.currentTarget;r.current&&(i.current=!0,t.current&&void 0===n.current&&l!==(null==o?void 0:o.document.activeElement)&&m(e,a,s))},function(e,t){var n;if(!h()&&(u(),void 0===a))if(s.current.setActive)try{s.current.setActive()}catch(e){}else null===(n=s.current)||void 0===n||n.focus()},function(e,t){g(e,t,t.currentTarget)},function(e,t){v(e,t),t.stopPropagation()},v,g]}(i,x,R,p,_,C,m,a,D,I,g,y,u),z=B[0],W=B[1],U=B[2],V=B[3],G=B[4],j=B[5],K=B[6],q=function(t,n,o){var r=0,i=t.items,a=t.totalItemCount,s=t.hasCheckmarks,l=t.hasIcons;return e.createElement("ul",{className:n.list,onKeyDown:F,onKeyUp:L,role:"presentation"},i.map((function(e,t){var o=Z(e,t,r,a,s,l,n);if(e.itemType!==mu.Divider&&e.itemType!==mu.Header){var i=e.customOnRenderListLength?e.customOnRenderListLength:1;r+=i}return o})))},Z=function(t,n,o,r,a,s,l){var u,c,d=[],p=t.iconProps||{iconName:"None"},f=t.getItemClassNames,h=t.itemProps,g=h?h.styles:void 0,v=t.itemType===mu.Divider?t.className:void 0,y=t.submenuIconProps?t.submenuIconProps.className:"";if(f)c=f(i.theme,wu(t),m===t.key,!!ku(t),!!t.href,"None"!==p.iconName,t.className,v,p.className,y,t.primaryDisabled);else{var b={theme:i.theme,disabled:wu(t),expanded:m===t.key,checked:!!ku(t),isAnchorLink:!!t.href,knownIcon:"None"!==p.iconName,itemClassName:t.className,dividerClassName:v,iconClassName:p.className,subMenuClassName:y,primaryDisabled:t.primaryDisabled};c=Kc(Yc(null===(u=l.subComponentStyles)||void 0===u?void 0:u.menuItem,g),b)}switch("-"!==t.text&&"-"!==t.name||(t.itemType=mu.Divider),t.itemType){case mu.Divider:d.push($(n,c));break;case mu.Header:d.push($(n,c));var _=J(t,c,l,n,a,s);d.push(Y(_,t.key||n,c,t.title));break;case mu.Section:d.push(Q(t,c,l,n,a,s));break;default:var C=X(t,c,n,o,r,a,s);d.push(Y(C,t.key||n,c,t.title))}return e.createElement(e.Fragment,{key:t.key},d)},Q=function(t,n,o,r,i,a){var s=t.sectionProps;if(s){var u,c;if(s.title){var d=void 0,p="";if("string"==typeof s.title){var f=l+s.title.replace(/\s/g,"");d={key:"section-"+s.title+"-title",itemType:mu.Header,text:s.title,id:f},p=f}else{var h=s.title.id||l+s.title.key.replace(/\s/g,"");d=H(H({},s.title),{id:h}),p=h}d&&(c={role:"group","aria-labelledby":p},u=J(d,n,o,r,i,a))}return s.items&&s.items.length>0?e.createElement("li",{role:"presentation",key:s.key||t.key||"section-"+r},e.createElement("div",H({},c),e.createElement("ul",{className:o.list,role:"presentation"},s.topDivider&&$(r,n,!0,!0),u&&Y(u,t.key||r,n,t.title),s.items.map((function(e,t){return Z(e,t,t,s.items.length,i,a,o)})),s.bottomDivider&&$(r,n,!1,!0)))):void 0}},Y=function(t,n,o,r){return e.createElement("li",{role:"presentation",title:r,key:n,className:o.item},t)},$=function(t,n,o,r){return r||t>0?e.createElement("li",{role:"separator",key:"separator-"+t+(void 0===o?"":o?"-top":"-bottom"),className:n.divider,"aria-hidden":"true"}):null},X=function(t,n,o,r,a,s,l){if(t.onRender)return t.onRender(H({"aria-posinset":r+1,"aria-setsize":a},t),u);var c={item:t,classNames:n,index:o,focusableElementIndex:r,totalItemCount:a,hasCheckmarks:s,hasIcons:l,contextualMenuItemAs:i.contextualMenuItemAs,onItemMouseEnter:z,onItemMouseLeave:U,onItemMouseMove:W,onItemMouseDown:ed,executeItemClick:j,onItemKeyDown:N,expandedMenuItemKey:m,openSubMenu:g,dismissSubMenu:y,dismissMenu:u};return t.href?e.createElement(Hc,H({},c,{onItemClick:G})):t.split&&Su(t)?e.createElement(Uc,H({},c,{onItemClick:V,onItemClickBase:K,onTap:I})):e.createElement(Vc,H({},c,{onItemClick:V,onItemClickBase:K}))},J=function(t,n,o,r,a,s){var l=i.contextualMenuItemAs,u=void 0===l?Mc:l,c=t.itemProps,d=t.id,p=c&&wo(c,So);return e.createElement("div",H({id:d,className:o.header},p,{style:t.style}),e.createElement(u,H({item:t,classNames:n,index:r,onCheckmarkClick:a?V:void 0,hasIcons:s},c)))},ee=i.isBeakVisible,te=i.items,ne=i.labelElementId,oe=i.id,re=i.className,ie=i.beakWidth,ae=i.directionalHint,se=i.directionalHintForRTL,le=i.alignTargetEdge,ue=i.gapSpace,ce=i.coverTarget,de=i.ariaLabel,pe=i.doNotLayer,fe=i.target,he=i.bounds,me=i.useTargetWidth,ge=i.useTargetAsMinWidth,ve=i.directionalHintFixed,ye=i.shouldFocusOnMount,be=i.shouldFocusOnContainer,_e=i.title,Ce=i.styles,ke=i.theme,Se=i.calloutProps,we=i.onRenderSubMenu,xe=void 0===we?td:we,Ee=i.onRenderMenuList,Ie=void 0===Ee?function(e,t){return q(e,Te)}:Ee,De=i.focusZoneProps,Re=i.getMenuClassNames,Te=Re?Re(ke,re):jc(Ce,{theme:ke,className:re}),Pe=function e(t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.iconProps)return!0;if(r.itemType===mu.Section&&r.sectionProps&&e(r.sectionProps.items))return!0}return!1}(te),Me=H(H({direction:ri.vertical,handleTabKey:1,isCircularNavigation:!0},De),{className:xo(Te.root,null===(o=i.focusZoneProps)||void 0===o?void 0:o.className)}),Fe=function(e){return e.some((function(e){return!!e.canCheck||!(!e.sectionProps||!e.sectionProps.items.some((function(e){return!0===e.canCheck})))}))}(te),Le=m&&!0!==i.hidden?v():null;ee=void 0===ee?T<=ql.medium:ee;var Ae=d.current;if((me||ge)&&Ae&&Ae.offsetWidth){var Ne=Ae.getBoundingClientRect().width-2;me?P={width:Ne}:ge&&(P={minWidth:Ne})}if(te&&te.length>0){for(var Be=0,He=0,Oe=te;He<Oe.length;He++){var ze=Oe[He];if(ze.itemType!==mu.Divider&&ze.itemType!==mu.Header){var We=ze.customOnRenderListLength?ze.customOnRenderListLength:1;Be+=We}}var Ue=Te.subComponentStyles?Te.subComponentStyles.callout:void 0;return e.createElement(Gc.Consumer,null,(function(t){return e.createElement(fc,H({styles:Ue,onRestoreFocus:f},Se,{target:fe||t.target,isBeakVisible:ee,beakWidth:ie,directionalHint:ae,directionalHintForRTL:se,gapSpace:ue,coverTarget:ce,doNotLayer:pe,className:xo("ms-ContextualMenu-Callout",Se&&Se.className),setInitialFocus:ye,onDismiss:i.onDismiss||t.onDismiss,onScroll:w,bounds:he,directionalHintFixed:ve,alignTargetEdge:le,hidden:i.hidden||t.hidden,ref:n}),e.createElement("div",{style:P,ref:a,id:oe,className:Te.container,tabIndex:be?0:-1,onKeyDown:A,onKeyUp:L,onFocusCapture:k,"aria-label":de,"aria-labelledby":ne,role:"menu"},_e&&e.createElement("div",{className:Te.title}," ",_e," "),te&&te.length?function(t,n){var o=i.focusZoneAs,r=void 0===o?Vi:o;return e.createElement(r,H({},n),t)}(Ie({ariaLabel:de,items:te,totalItemCount:Be,hasCheckmarks:Fe,hasIcons:Pe,defaultMenuItemRenderer:function(e){return function(e,t){var n=e.index,o=e.focusableElementIndex,r=e.totalItemCount,i=e.hasCheckmarks,a=e.hasIcons;return Z(e,n,o,r,i,a,t)}(e,Te)},labelElementId:ne},(function(e,t){return q(e,Te)})),Me):null,Le&&xe(Le,td)))}))}return null})),(function(e,t){return!(t.shouldUpdateWhenHidden||!e.hidden||!t.hidden)||Yr(e,t)}));function Jc(e){return 18===e.which||"Meta"===e.key}function ed(e,t){var n;null===(n=e.onMouseDown)||void 0===n||n.call(e,e,t)}function td(e,t){throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.")}function nd(e,t){for(var n=0,o=t;n<o.length;n++){var r=o[n];if(r.itemType===mu.Section&&r.sectionProps){var i=nd(e,r.sectionProps.items);if(i)return i}else if(r.key&&r.key===e)return r}}function od(e,t){return e?function(n,o){return rd(n,t),e(n,o)}:e}function rd(e,t){e&&t&&(e.persist(),t instanceof Event?e.target=t.target:t instanceof Element&&(e.target=t))}Xc.displayName="ContextualMenuBase";var id={root:"ms-ContextualMenu",container:"ms-ContextualMenu-container",list:"ms-ContextualMenu-list",header:"ms-ContextualMenu-header",title:"ms-ContextualMenu-title",isopen:"is-open"};function ad(t){return e.createElement(sd,H({},t))}var sd=vr(Xc,(function(e){var t=e.className,n=e.theme,o=Nt(id,n),r=n.fonts,i=n.semanticColors,a=n.effects;return{root:[n.fonts.medium,o.root,o.isopen,{backgroundColor:i.menuBackground,minWidth:"180px"},t],container:[o.container,{selectors:{":focus":{outline:0}}}],list:[o.list,o.isopen,{listStyleType:"none",margin:"0",padding:"0"}],header:[o.header,r.small,{fontWeight:bt.semibold,color:i.menuHeader,background:"none",backgroundColor:"transparent",border:"none",height:Sc,lineHeight:Sc,cursor:"default",padding:"0px 6px",userSelect:"none",textAlign:"left"}],title:[o.title,{fontSize:r.mediumPlus.fontSize,paddingRight:"14px",paddingLeft:"14px",paddingBottom:"5px",paddingTop:"5px",backgroundColor:i.menuItemBackgroundPressed}],subComponentStyles:{callout:{root:{boxShadow:a.elevation8}},menuItem:{}}}}),(function(e){return{onRenderSubMenu:e.onRenderSubMenu?Ua(e.onRenderSubMenu,ad):ad}}),{scope:"ContextualMenu"}),ld=sd;ld.displayName="ContextualMenu";var ud={msButton:"ms-Button",msButtonHasMenu:"ms-Button--hasMenu",msButtonIcon:"ms-Button-icon",msButtonMenuIcon:"ms-Button-menuIcon",msButtonLabel:"ms-Button-label",msButtonDescription:"ms-Button-description",msButtonScreenReaderText:"ms-Button-screenReaderText",msButtonFlexContainer:"ms-Button-flexContainer",msButtonTextContainer:"ms-Button-textContainer"},cd=Zn((function(e,t,n,o,r,i,a,s,l,u,c){var d,p,f=Nt(ud,e||{}),h=u&&!c;return An({root:[f.msButton,t.root,o,l&&["is-checked",t.rootChecked],h&&["is-expanded",t.rootExpanded,{selectors:(d={},d[":hover ."+f.msButtonIcon]=t.iconExpandedHovered,d[":hover ."+f.msButtonMenuIcon]=t.menuIconExpandedHovered||t.rootExpandedHovered,d[":hover"]=t.rootExpandedHovered,d)}],s&&[ud.msButtonHasMenu,t.rootHasMenu],a&&["is-disabled",t.rootDisabled],!a&&!h&&!l&&{selectors:(p={":hover":t.rootHovered},p[":hover ."+f.msButtonLabel]=t.labelHovered,p[":hover ."+f.msButtonIcon]=t.iconHovered,p[":hover ."+f.msButtonDescription]=t.descriptionHovered,p[":hover ."+f.msButtonMenuIcon]=t.menuIconHovered,p[":focus"]=t.rootFocused,p[":active"]=t.rootPressed,p[":active ."+f.msButtonIcon]=t.iconPressed,p[":active ."+f.msButtonDescription]=t.descriptionPressed,p[":active ."+f.msButtonMenuIcon]=t.menuIconPressed,p)},a&&l&&[t.rootCheckedDisabled],!a&&l&&{selectors:{":hover":t.rootCheckedHovered,":active":t.rootCheckedPressed}},n],flexContainer:[f.msButtonFlexContainer,t.flexContainer],textContainer:[f.msButtonTextContainer,t.textContainer],icon:[f.msButtonIcon,r,t.icon,h&&t.iconExpanded,l&&t.iconChecked,a&&t.iconDisabled],label:[f.msButtonLabel,t.label,l&&t.labelChecked,a&&t.labelDisabled],menuIcon:[f.msButtonMenuIcon,i,t.menuIcon,l&&t.menuIconChecked,a&&!c&&t.menuIconDisabled,!a&&!h&&!l&&{selectors:{":hover":t.menuIconHovered,":active":t.menuIconPressed}},h&&["is-expanded",t.menuIconExpanded]],description:[f.msButtonDescription,t.description,l&&t.descriptionChecked,a&&t.descriptionDisabled],screenReaderText:[f.msButtonScreenReaderText,t.screenReaderText]})})),dd=Zn((function(e,t,n,o,r){return{root:ke(e.splitButtonMenuButton,n&&[e.splitButtonMenuButtonExpanded],t&&[e.splitButtonMenuButtonDisabled],o&&!t&&[e.splitButtonMenuButtonChecked],r&&!t&&[{selectors:{":focus":e.splitButtonMenuFocused}}]),splitButtonContainer:ke(e.splitButtonContainer,!t&&o&&[e.splitButtonContainerChecked,{selectors:{":hover":e.splitButtonContainerCheckedHovered}}],!t&&!o&&[{selectors:{":hover":e.splitButtonContainerHovered,":focus":e.splitButtonContainerFocused}}],t&&e.splitButtonContainerDisabled),icon:ke(e.splitButtonMenuIcon,t&&e.splitButtonMenuIconDisabled,!t&&r&&e.splitButtonMenuIcon),flexContainer:ke(e.splitButtonFlexContainer),divider:ke(e.splitButtonDivider,(r||t)&&e.splitButtonDividerDisabled)}})),pd=Qn((function(t){var n=t;return Qn((function(o){if(t===o)throw new Error("Attempted to compose a component with itself.");var r=o,i=Qn((function(t){return function(n){return e.createElement(r,H({},n,{defaultRender:t}))}}));return function(t){var o=t.defaultRender;return e.createElement(n,H({},t,{defaultRender:o?i(o):r}))}}))})),fd=function(t){function n(n){var o=t.call(this,n)||this;return o._buttonElement=e.createRef(),o._splitButtonContainer=e.createRef(),o._mergedRef=si(),o._renderedVisibleMenu=!1,o._getMemoizedMenuButtonKeytipProps=Zn((function(e){return H(H({},e),{hasMenu:!0})})),o._onRenderIcon=function(t,n){var r=o.props.iconProps;if(r&&(void 0!==r.iconName||r.imageProps)){var i=r.className,a=r.imageProps,s=O(r,["className","imageProps"]);if(r.styles)return e.createElement(Xi,H({className:xo(o._classNames.icon,i),imageProps:a},s));if(r.iconName)return e.createElement(Io,H({className:xo(o._classNames.icon,i)},s));if(a)return e.createElement(vu,H({className:xo(o._classNames.icon,i),imageProps:a},s))}return null},o._onRenderTextContents=function(){var t=o.props,n=t.text,r=t.children,i=t.secondaryText,a=void 0===i?o.props.description:i,s=t.onRenderText,l=void 0===s?o._onRenderText:s,u=t.onRenderDescription,c=void 0===u?o._onRenderDescription:u;return n||"string"==typeof r||a?e.createElement("span",{className:o._classNames.textContainer},l(o.props,o._onRenderText),c(o.props,o._onRenderDescription)):[l(o.props,o._onRenderText),c(o.props,o._onRenderDescription)]},o._onRenderText=function(){var t=o.props.text,n=o.props.children;return void 0===t&&"string"==typeof n&&(t=n),o._hasText()?e.createElement("span",{key:o._labelId,className:o._classNames.label,id:o._labelId},t):null},o._onRenderChildren=function(){var e=o.props.children;return"string"==typeof e?null:e},o._onRenderDescription=function(t){var n=t.secondaryText,r=void 0===n?o.props.description:n;return r?e.createElement("span",{key:o._descriptionId,className:o._classNames.description,id:o._descriptionId},r):null},o._onRenderAriaDescription=function(){var t=o.props.ariaDescription;return t?e.createElement("span",{className:o._classNames.screenReaderText,id:o._ariaDescriptionId},t):null},o._onRenderMenuIcon=function(t){var n=o.props.menuIconProps;return e.createElement(Io,H({iconName:"ChevronDown"},n,{className:o._classNames.menuIcon}))},o._onRenderMenu=function(t){var n,r,i=o.props.menuAs?(n=o.props.menuAs,r=ld,pd(n)(r)):ld;return e.createElement(i,H({},t))},o._onDismissMenu=function(e){var t=o.props.menuProps;t&&t.onDismiss&&t.onDismiss(e),e&&e.defaultPrevented||o._dismissMenu()},o._dismissMenu=function(){o._menuShouldFocusOnMount=void 0,o._menuShouldFocusOnContainer=void 0,o.setState({menuHidden:!0})},o._openMenu=function(e,t){void 0===t&&(t=!0),o.props.menuProps&&(o._menuShouldFocusOnContainer=e,o._menuShouldFocusOnMount=t,o._renderedVisibleMenu=!0,o.setState({menuHidden:!1}))},o._onToggleMenu=function(e){var t=!0;o.props.menuProps&&!1===o.props.menuProps.shouldFocusOnMount&&(t=!1),o.state.menuHidden?o._openMenu(e,t):o._dismissMenu()},o._onSplitContainerFocusCapture=function(e){var t=o._splitButtonContainer.current;!t||e.target&&Ei(e.target,t)||t.focus()},o._onSplitButtonPrimaryClick=function(e){o.state.menuHidden||o._dismissMenu(),!o._processingTouch&&o.props.onClick?o.props.onClick(e):o._processingTouch&&o._onMenuClick(e)},o._onKeyDown=function(e){!o.props.disabled||e.which!==Ro&&e.which!==Po?o.props.disabled||(o.props.menuProps?o._onMenuKeyDown(e):void 0!==o.props.onKeyDown&&o.props.onKeyDown(e)):(e.preventDefault(),e.stopPropagation())},o._onKeyUp=function(e){o.props.disabled||void 0===o.props.onKeyUp||o.props.onKeyUp(e)},o._onKeyPress=function(e){o.props.disabled||void 0===o.props.onKeyPress||o.props.onKeyPress(e)},o._onMouseUp=function(e){o.props.disabled||void 0===o.props.onMouseUp||o.props.onMouseUp(e)},o._onMouseDown=function(e){o.props.disabled||void 0===o.props.onMouseDown||o.props.onMouseDown(e)},o._onClick=function(e){o.props.disabled||(o.props.menuProps?o._onMenuClick(e):void 0!==o.props.onClick&&o.props.onClick(e))},o._onSplitButtonContainerKeyDown=function(e){e.which===Ro||e.which===Po?o._buttonElement.current&&(o._buttonElement.current.click(),e.preventDefault(),e.stopPropagation()):o._onMenuKeyDown(e)},o._onMenuKeyDown=function(e){if(!o.props.disabled){o.props.onKeyDown&&o.props.onKeyDown(e);var t=e.which===Fo,n=e.which===Ao;if(!e.defaultPrevented&&o._isValidMenuOpenKey(e)){var r=o.props.onMenuClick;r&&r(e,o.props),o._onToggleMenu(!1),e.preventDefault(),e.stopPropagation()}e.which!==Ro&&e.which!==Po||Dr(!0,e.target),e.altKey||e.metaKey||!t&&!n||!o.state.menuHidden&&o.props.menuProps&&((void 0!==o._menuShouldFocusOnMount?o._menuShouldFocusOnMount:o.props.menuProps.shouldFocusOnMount)||(e.preventDefault(),e.stopPropagation(),o._menuShouldFocusOnMount=!0,o.forceUpdate()))}},o._onTouchStart=function(){o._isSplitButton&&o._splitButtonContainer.current&&!("onpointerdown"in o._splitButtonContainer.current)&&o._handleTouchAndPointerEvent()},o._onMenuClick=function(e){var t=o.props.onMenuClick;if(t&&t(e,o.props),!e.defaultPrevented){var n=0!==e.nativeEvent.detail||"mouse"===e.nativeEvent.pointerType;o._onToggleMenu(n),e.preventDefault(),e.stopPropagation()}},Br(o),o._async=new qr(o),o._events=new Jr(o),o.props.split,o._labelId=ni(),o._descriptionId=ni(),o._ariaDescriptionId=ni(),o.state={menuHidden:!0},o}return B(n,t),Object.defineProperty(n.prototype,"_isSplitButton",{get:function(){return!!this.props.menuProps&&!!this.props.onClick&&!0===this.props.split},enumerable:!1,configurable:!0}),n.prototype.render=function(){var e,t=this.props,n=t.ariaDescription,o=t.ariaLabel,r=t.ariaHidden,i=t.className,a=t.disabled,s=t.allowDisabledFocus,l=t.primaryDisabled,u=t.secondaryText,c=void 0===u?this.props.description:u,d=t.href,p=t.iconProps,f=t.menuIconProps,h=t.styles,m=t.checked,g=t.variantClassName,v=t.theme,y=t.toggle,b=t.getClassNames,_=t.role,C=this.state.menuHidden,k=a||l;this._classNames=b?b(v,i,g,p&&p.className,f&&f.className,k,m,!C,!!this.props.menuProps,this.props.split,!!s):cd(v,h,i,g,p&&p.className,f&&f.className,k,!!this.props.menuProps,m,!C,this.props.split);var S=this,w=S._ariaDescriptionId,x=S._labelId,E=S._descriptionId,I=!k&&!!d,D=I?"a":"button",R=wo($r(I?{}:{type:"button"},this.props.rootProps,this.props),I?so:lo,["disabled"]),T=o||R["aria-label"],P=void 0;n?P=w:c&&this.props.onRenderDescription!==fu?P=E:R["aria-describedby"]&&(P=R["aria-describedby"]);var M=void 0;R["aria-labelledby"]?M=R["aria-labelledby"]:P&&!T&&(M=this._hasText()?x:void 0);var F=!(!1===this.props["data-is-focusable"]||a&&!s||this._isSplitButton),L="menuitemcheckbox"===_||"checkbox"===_,A=L||!0===y?!!m:void 0,N=$r(R,((e={className:this._classNames.root,ref:this._mergedRef(this.props.elementRef,this._buttonElement),disabled:k&&!s,onKeyDown:this._onKeyDown,onKeyPress:this._onKeyPress,onKeyUp:this._onKeyUp,onMouseDown:this._onMouseDown,onMouseUp:this._onMouseUp,onClick:this._onClick,"aria-label":T,"aria-labelledby":M,"aria-describedby":P,"aria-disabled":k,"data-is-focusable":F})[L?"aria-checked":"aria-pressed"]=A,e));if(r&&(N["aria-hidden"]=!0),this._isSplitButton)return this._onRenderSplitButtonContent(D,N);if(this.props.menuProps){var B=this.props.menuProps.id,H=void 0===B?this._labelId+"-menu":B;$r(N,{"aria-expanded":!C,"aria-controls":C?null:H,"aria-haspopup":!0})}return this._onRenderContent(D,N)},n.prototype.componentDidMount=function(){this._isSplitButton&&this._splitButtonContainer.current&&("onpointerdown"in this._splitButtonContainer.current&&this._events.on(this._splitButtonContainer.current,"pointerdown",this._onPointerDown,!0),"onpointerup"in this._splitButtonContainer.current&&this.props.onPointerUp&&this._events.on(this._splitButtonContainer.current,"pointerup",this.props.onPointerUp,!0))},n.prototype.componentDidUpdate=function(e,t){this.props.onAfterMenuDismiss&&!t.menuHidden&&this.state.menuHidden&&this.props.onAfterMenuDismiss()},n.prototype.componentWillUnmount=function(){this._async.dispose(),this._events.dispose()},n.prototype.focus=function(){this._isSplitButton&&this._splitButtonContainer.current?(Dr(!0),this._splitButtonContainer.current.focus()):this._buttonElement.current&&(Dr(!0),this._buttonElement.current.focus())},n.prototype.dismissMenu=function(){this._dismissMenu()},n.prototype.openMenu=function(e,t){this._openMenu(e,t)},n.prototype._onRenderContent=function(t,n){var o=this,r=this.props,i=t,a=r.menuIconProps,s=r.menuProps,l=r.onRenderIcon,u=void 0===l?this._onRenderIcon:l,c=r.onRenderAriaDescription,d=void 0===c?this._onRenderAriaDescription:c,p=r.onRenderChildren,f=void 0===p?this._onRenderChildren:p,h=r.onRenderMenu,m=void 0===h?this._onRenderMenu:h,g=r.onRenderMenuIcon,v=void 0===g?this._onRenderMenuIcon:g,y=r.disabled,b=r.keytipProps;b&&s&&(b=this._getMemoizedMenuButtonKeytipProps(b));var _=function(t){return e.createElement(i,H({},n,t),e.createElement("span",{className:o._classNames.flexContainer,"data-automationid":"splitbuttonprimary"},u(r,o._onRenderIcon),o._onRenderTextContents(),d(r,o._onRenderAriaDescription),f(r,o._onRenderChildren),!o._isSplitButton&&(s||a||o.props.onRenderMenuIcon)&&v(o.props,o._onRenderMenuIcon),s&&!s.doNotLayer&&o._shouldRenderMenu()&&m(o._getMenuProps(s),o._onRenderMenu)))},C=b?e.createElement(Bc,{keytipProps:this._isSplitButton?void 0:b,ariaDescribedBy:n["aria-describedby"],disabled:y},(function(e){return _(e)})):_();return s&&s.doNotLayer?e.createElement(e.Fragment,null,C,this._shouldRenderMenu()&&m(this._getMenuProps(s),this._onRenderMenu)):e.createElement(e.Fragment,null,C,e.createElement(Mr,null))},n.prototype._shouldRenderMenu=function(){var e=this.state.menuHidden,t=this.props,n=t.persistMenu,o=t.renderPersistedMenuHiddenOnMount;return!e||!(!n||!this._renderedVisibleMenu&&!o)},n.prototype._hasText=function(){return null!==this.props.text&&(void 0!==this.props.text||"string"==typeof this.props.children)},n.prototype._getMenuProps=function(e){var t=this.props.persistMenu,n=this.state.menuHidden;return e.ariaLabel||e.labelElementId||!this._hasText()||(e=H(H({},e),{labelElementId:this._labelId})),H(H({id:this._labelId+"-menu",directionalHint:4},e),{shouldFocusOnContainer:this._menuShouldFocusOnContainer,shouldFocusOnMount:this._menuShouldFocusOnMount,hidden:t?n:void 0,className:xo("ms-BaseButton-menuhost",e.className),target:this._isSplitButton?this._splitButtonContainer.current:this._buttonElement.current,onDismiss:this._onDismissMenu})},n.prototype._onRenderSplitButtonContent=function(t,n){var o=this,r=this.props,i=r.styles,a=void 0===i?{}:i,s=r.disabled,l=r.allowDisabledFocus,u=r.checked,c=r.getSplitButtonClassNames,d=r.primaryDisabled,p=r.menuProps,f=r.toggle,h=r.role,m=r.primaryActionButtonProps,g=this.props.keytipProps,v=this.state.menuHidden,y=c?c(!!s,!v,!!u,!!l):a&&dd(a,!!s,!v,!!u,!!d);$r(n,{onClick:void 0,onPointerDown:void 0,onPointerUp:void 0,tabIndex:-1,"data-is-focusable":!1}),g&&p&&(g=this._getMemoizedMenuButtonKeytipProps(g));var b=wo(n,[],["disabled"]);m&&$r(n,m);var _=function(r){return e.createElement("div",H({},b,{"data-ktp-target":r?r["data-ktp-target"]:void 0,role:h||"button","aria-disabled":s,"aria-haspopup":!0,"aria-expanded":!v,"aria-pressed":f?!!u:void 0,"aria-describedby":hu(n["aria-describedby"],r?r["aria-describedby"]:void 0),className:y&&y.splitButtonContainer,onKeyDown:o._onSplitButtonContainerKeyDown,onTouchStart:o._onTouchStart,ref:o._splitButtonContainer,"data-is-focusable":!0,onClick:s||d?void 0:o._onSplitButtonPrimaryClick,tabIndex:!s&&!d||l?0:void 0,"aria-roledescription":n["aria-roledescription"],onFocusCapture:o._onSplitContainerFocusCapture}),e.createElement("span",{style:{display:"flex"}},o._onRenderContent(t,n),o._onRenderSplitButtonMenuButton(y,r),o._onRenderSplitButtonDivider(y)))};return g?e.createElement(Bc,{keytipProps:g,disabled:s},(function(e){return _(e)})):_()},n.prototype._onRenderSplitButtonDivider=function(t){return t&&t.divider?e.createElement("span",{className:t.divider,"aria-hidden":!0,onClick:function(e){e.stopPropagation()}}):null},n.prototype._onRenderSplitButtonMenuButton=function(t,o){var r=this.props,i=r.allowDisabledFocus,a=r.checked,s=r.disabled,l=r.splitButtonMenuProps,u=r.splitButtonAriaLabel,c=r.primaryDisabled,d=this.state.menuHidden,p=this.props.menuIconProps;void 0===p&&(p={iconName:"ChevronDown"});var f=H(H({},l),{styles:t,checked:a,disabled:s,allowDisabledFocus:i,onClick:this._onMenuClick,menuProps:void 0,iconProps:H(H({},p),{className:this._classNames.menuIcon}),ariaLabel:u,"aria-haspopup":!0,"aria-expanded":!d,"data-is-focusable":!1});return e.createElement(n,H({},f,{"data-ktp-execute-target":o?o["data-ktp-execute-target"]:o,onMouseDown:this._onMouseDown,tabIndex:c&&!i?0:-1}))},n.prototype._onPointerDown=function(e){var t=this.props.onPointerDown;t&&t(e),"touch"===e.pointerType&&(this._handleTouchAndPointerEvent(),e.preventDefault(),e.stopImmediatePropagation())},n.prototype._handleTouchAndPointerEvent=function(){var e=this;void 0!==this._lastTouchTimeoutId&&(this._async.clearTimeout(this._lastTouchTimeoutId),this._lastTouchTimeoutId=void 0),this._processingTouch=!0,this._lastTouchTimeoutId=this._async.setTimeout((function(){e._processingTouch=!1,e._lastTouchTimeoutId=void 0,e.focus()}),500)},n.prototype._isValidMenuOpenKey=function(e){return this.props.menuTriggerKeyCode?e.which===this.props.menuTriggerKeyCode:!!this.props.menuProps&&e.which===Ao&&(e.altKey||e.metaKey)},n.defaultProps={baseClassName:"ms-Button",styles:{},split:!1},n}(e.Component);function hd(t,n,o){return function(r){var i,a=((i=function(i){function a(e){var t=i.call(this,e)||this;return t._styleCache={},t._onSettingChanged=t._onSettingChanged.bind(t),t}return B(a,i),a.prototype.componentDidMount=function(){rr.observe(this._onSettingChanged)},a.prototype.componentWillUnmount=function(){rr.unobserve(this._onSettingChanged)},a.prototype.render=function(){var i=this;return e.createElement(Yo.Consumer,null,(function(a){var s=rr.getSettings(n,t,a.customizations),l=i.props;if(s.styles&&"function"==typeof s.styles&&(s.styles=s.styles(H(H({},s),l))),o&&s.styles){if(i._styleCache.default!==s.styles||i._styleCache.component!==l.styles){var u=Fn(s.styles,l.styles);i._styleCache.default=s.styles,i._styleCache.component=l.styles,i._styleCache.merged=u}return e.createElement(r,H({},s,l,{styles:i._styleCache.merged}))}return e.createElement(r,H({},s,l))}))},a.prototype._onSettingChanged=function(){this.forceUpdate()},a}(e.Component)).displayName="Customized"+t,i);return function(e,t){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(r,a)}}var md={outline:0},gd=function(e){return{fontSize:e,margin:"0 4px",height:"16px",lineHeight:"16px",textAlign:"center",flexShrink:0}},vd=Zn((function(e){var t,n,o=e.semanticColors,r=e.effects,i=e.fonts,a=o.buttonBorder,s=o.disabledBackground,l=o.disabledText,u={left:-2,top:-2,bottom:-2,right:-2,outlineColor:"ButtonText"};return{root:[xt(e,{inset:1,highContrastStyle:u,borderColor:"transparent"}),e.fonts.medium,{boxSizing:"border-box",border:"1px solid "+a,userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",padding:"0 16px",borderRadius:r.roundedCorner2,selectors:{":active > *":{position:"relative",left:0,top:0}}}],rootDisabled:[xt(e,{inset:1,highContrastStyle:u,borderColor:"transparent"}),{backgroundColor:s,borderColor:s,color:l,cursor:"default",selectors:{":hover":md,":focus":md}}],iconDisabled:{color:l,selectors:(t={},t[St]={color:"GrayText"},t)},menuIconDisabled:{color:l,selectors:(n={},n[St]={color:"GrayText"},n)},flexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},description:{display:"block"},textContainer:{flexGrow:1,display:"block"},icon:gd(i.mediumPlus.fontSize),menuIcon:gd(i.small.fontSize),label:{margin:"0 4px",lineHeight:"100%",display:"block"},screenReaderText:Et}})),yd=Zn((function(e,t){var n,o,r,i,a,s,l,u,c,d,p,f,h,m=e.effects,g=e.palette,v=e.semanticColors,y={left:-2,top:-2,bottom:-2,right:-2,border:"none"},b={position:"absolute",width:1,right:31,top:8,bottom:8};return Fn({splitButtonContainer:[xt(e,{highContrastStyle:y,inset:2}),{display:"inline-flex",selectors:{".ms-Button--default":{borderTopRightRadius:"0",borderBottomRightRadius:"0",borderRight:"none"},".ms-Button--primary":{borderTopRightRadius:"0",borderBottomRightRadius:"0",border:"none",selectors:(n={},n[St]=H({color:"WindowText",backgroundColor:"Window",border:"1px solid WindowText",borderRightWidth:"0"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),n)},".ms-Button--primary + .ms-Button":{border:"none",selectors:(o={},o[St]={border:"1px solid WindowText",borderLeftWidth:"0"},o)}}}],splitButtonContainerHovered:{selectors:{".ms-Button--primary":{selectors:(r={},r[St]={color:"Window",backgroundColor:"Highlight"},r)},".ms-Button.is-disabled":{color:v.buttonTextDisabled,selectors:(i={},i[St]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},i)}}},splitButtonContainerChecked:{selectors:{".ms-Button--primary":{selectors:(a={},a[St]=H({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),a)}}},splitButtonContainerCheckedHovered:{selectors:{".ms-Button--primary":{selectors:(s={},s[St]=H({color:"Window",backgroundColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),s)}}},splitButtonContainerFocused:{outline:"none!important"},splitButtonMenuButton:(l={padding:6,height:"auto",boxSizing:"border-box",borderRadius:0,borderTopRightRadius:m.roundedCorner2,borderBottomRightRadius:m.roundedCorner2,border:"1px solid "+g.neutralSecondaryAlt,borderLeft:"none",outline:"transparent",userSelect:"none",display:"inline-block",textDecoration:"none",textAlign:"center",cursor:"pointer",verticalAlign:"top",width:32,marginLeft:-1,marginTop:0,marginRight:0,marginBottom:0},l[St]={".ms-Button-menuIcon":{color:"WindowText"}},l),splitButtonDivider:H(H({},b),{selectors:(u={},u[St]={backgroundColor:"WindowText"},u)}),splitButtonDividerDisabled:H(H({},b),{selectors:(c={},c[St]={backgroundColor:"GrayText"},c)}),splitButtonMenuButtonDisabled:{pointerEvents:"none",border:"none",selectors:(d={":hover":{cursor:"default"},".ms-Button--primary":{selectors:(p={},p[St]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},p)},".ms-Button-menuIcon":{selectors:(f={},f[St]={color:"GrayText"},f)}},d[St]={color:"GrayText",border:"1px solid GrayText",backgroundColor:"Window"},d)},splitButtonFlexContainer:{display:"flex",height:"100%",flexWrap:"nowrap",justifyContent:"center",alignItems:"center"},splitButtonContainerDisabled:{outline:"none",border:"none",selectors:(h={},h[St]=H({color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),h)},splitButtonMenuFocused:H({},xt(e,{highContrastStyle:y,inset:2}))},t)})),bd=Zn((function(e,t){var n,o=vd(e),r=yd(e),i=e.palette;return Fn(o,{root:{padding:"0 4px",width:"32px",height:"32px",backgroundColor:"transparent",border:"none",color:e.semanticColors.link},rootHovered:{color:i.themeDarkAlt,backgroundColor:i.neutralLighter,selectors:(n={},n[St]={borderColor:"Highlight",color:"Highlight"},n)},rootHasMenu:{width:"auto"},rootPressed:{color:i.themeDark,backgroundColor:i.neutralLight},rootExpanded:{color:i.themeDark,backgroundColor:i.neutralLight},rootChecked:{color:i.themeDark,backgroundColor:i.neutralLight},rootCheckedHovered:{color:i.themeDark,backgroundColor:i.neutralQuaternaryAlt},rootDisabled:{color:i.neutralTertiaryAlt}},r,t)})),_d=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.styles,o=t.theme;return e.createElement(fd,H({},this.props,{variantClassName:"ms-Button--icon",styles:bd(o,n),onRenderText:fu,onRenderDescription:fu}))},z([hd("IconButton",["theme","styles"],!0)],n)}(e.Component);var Cd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;return i(this,a),(t=r.call(this,e)).state={isExpanded:e.isExpanded,data:e.data,onExpand:e.onExpand,onCollapse:e.onCollapse},t}return s(a,[{key:"toggle",value:function(){var e=this.state.isExpanded,t=this.state.data;e?this.state.onCollapse(t):this.state.onExpand(t),this.setState({isExpanded:!e})}},{key:"render",value:function(){var t=this;return this.state.isExpanded?e.createElement(_d,{iconProps:{iconName:"ChevronRightMed"},title:"Collapse",ariaLabel:"Collapse",className:"icon-treeGridRow-collapse",onClick:function(){t.toggle()}}):e.createElement(_d,{iconProps:{iconName:"ChevronRightMed"},title:"Expand",ariaLabel:"Expand",className:"icon-treeGridRow-expand",onClick:function(){t.toggle()}})}}]),a}(e.Component);var kd=function(){function e(t,n,o){var r=this;i(this,e),this._row=t,this.isExpanded=!1,this._id=n,this._indentation=o,this._children=this._row.children.map((function(t,n){return new e(t,r._id+"_"+n,r.identation+1)}))}return s(e,[{key:"getContent",value:function(e){return this._row.values[e]}},{key:"id",get:function(){return this._id}},{key:"identation",get:function(){return this._indentation}},{key:"hasChildren",get:function(){return this._row.children.length>0}},{key:"getChildren",value:function(){return this._children}},{key:"enumerate",value:function(){var e=[this];return this.hasChildren&&this.isExpanded&&(e=e.concat(this._children.map((function(e){return e.enumerate()})).reduce((function(e,t){return e.concat(t)})))),e}}],[{key:"asRootRow",value:function(t,n){return new e(t,n,0)}}]),e}(),Sd=function(){function e(t){i(this,e),this._roots=t.map((function(e,t){return kd.asRootRow(e,t.toString())}))}return s(e,[{key:"enumerate",value:function(){return this._roots.map((function(e){return e.enumerate()})).reduce((function(e,t){return e.concat(t)}))}}]),e}(),wd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;i(this,a),t=r.call(this,e);var n=new Sd(e.treeGridItem.roots);return t.state={id:e.id,treeRoots:n,visibleItems:n.enumerate(),columns:e.treeGridItem.columnModel.columns.map((function(n,o){return{key:e.id+"_col_"+o,columnIndex:o,name:n.localizedName,fieldName:n.localizedName,minWidth:50,flexGrow:100*n.widthRatio|0,isResizable:!0,data:d(t)}}))},t}return s(a,[{key:"expandCollapseRow",value:function(e,t){!e.hasChildren||t&&e.isExpanded||!t&&!e.isExpanded||(e.isExpanded=t,this.setState({id:this.state.id,treeRoots:this.state.treeRoots,visibleItems:this.state.treeRoots.enumerate(),columns:this.state.columns}))}},{key:"renderItemColumn",value:function(t,n,o){if(!o)return null;var r=o.data;if(!r)return null;var i=0==o.columnIndex&&t.identation>0,a=50*t.identation+"px",s=0==o.columnIndex&&t.hasChildren,l=null,u=t.getContent(o.columnIndex);return l=u instanceof P?u.fragments.map((function(n,o){return e.createElement(du,{key:r.state.id+"_md_"+t.id+"_"+o,fragment:n})})):u,e.createElement("span",null,i&&e.createElement("span",{style:{display:"inline-block",width:a},role:"presentation"}," "),s&&e.createElement(Cd,{key:r.state.id+"_expander_"+t.id,isExpanded:t.isExpanded,data:r,onExpand:function(e){e.expandCollapseRow(t,!0)},onCollapse:function(e){e.expandCollapseRow(t,!1)}}),e.createElement("span",null,l))}},{key:"render",value:function(){return e.createElement("div",{className:"DetailItem_Table"},e.createElement(Ml,{items:this.state.visibleItems,columns:this.state.columns,selectionMode:Ka.none,onRenderItemColumn:this.renderItemColumn,layoutMode:jr.fixedColumns}))}}]),a}(e.Component),xd=Zn((function(e,t,n){var o=vd(e),r=yd(e);return Fn(o,{root:{minWidth:"80px",height:"32px"},label:{fontWeight:bt.semibold}},n?function(e){var t,n,o,r,i,a,s,l,u,c=e.palette,d=e.semanticColors;return{root:{backgroundColor:d.primaryButtonBackground,border:"1px solid "+d.primaryButtonBackground,color:d.primaryButtonText,selectors:(t={},t[St]=H({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),t[".ms-Fabric--isFocusVisible &:focus"]={selectors:{":after":{border:"none",outlineColor:c.white}}},t)},rootHovered:{backgroundColor:d.primaryButtonBackgroundHovered,border:"1px solid "+d.primaryButtonBackgroundHovered,color:d.primaryButtonTextHovered,selectors:(n={},n[St]={color:"Window",backgroundColor:"Highlight",borderColor:"Highlight"},n)},rootPressed:{backgroundColor:d.primaryButtonBackgroundPressed,border:"1px solid "+d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed,selectors:(o={},o[St]=H({color:"Window",backgroundColor:"WindowText",borderColor:"WindowText"},{forcedColorAdjust:"none",MsHighContrastAdjust:"none"}),o)},rootExpanded:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootChecked:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootCheckedHovered:{backgroundColor:d.primaryButtonBackgroundPressed,color:d.primaryButtonTextPressed},rootDisabled:{color:d.primaryButtonTextDisabled,backgroundColor:d.primaryButtonBackgroundDisabled,selectors:(r={},r[St]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},r)},splitButtonContainer:{selectors:(i={},i[St]={border:"none"},i)},splitButtonDivider:H(H({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:c.white,selectors:(a={},a[St]={backgroundColor:"Window"},a)}),splitButtonMenuButton:{backgroundColor:d.primaryButtonBackground,color:d.primaryButtonText,selectors:(s={},s[St]={backgroundColor:"WindowText"},s[":hover"]={backgroundColor:d.primaryButtonBackgroundHovered,selectors:(l={},l[St]={color:"Highlight"},l)},s)},splitButtonMenuButtonDisabled:{backgroundColor:d.primaryButtonBackgroundDisabled,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundDisabled}}},splitButtonMenuButtonChecked:{backgroundColor:d.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundPressed}}},splitButtonMenuButtonExpanded:{backgroundColor:d.primaryButtonBackgroundPressed,selectors:{":hover":{backgroundColor:d.primaryButtonBackgroundPressed}}},splitButtonMenuIcon:{color:d.primaryButtonText},splitButtonMenuIconDisabled:{color:c.neutralTertiary,selectors:(u={},u[St]={color:"GrayText"},u)}}}(e):function(e){var t,n,o,r,i,a=e.semanticColors,s=e.palette,l=a.buttonBackground,u=a.buttonBackgroundPressed,c=a.buttonBackgroundHovered,d=a.buttonBackgroundDisabled,p=a.buttonText,f=a.buttonTextHovered,h=a.buttonTextDisabled,m=a.buttonTextChecked,g=a.buttonTextCheckedHovered;return{root:{backgroundColor:l,color:p},rootHovered:{backgroundColor:c,color:f,selectors:(t={},t[St]={borderColor:"Highlight",color:"Highlight"},t)},rootPressed:{backgroundColor:u,color:m},rootExpanded:{backgroundColor:u,color:m},rootChecked:{backgroundColor:u,color:m},rootCheckedHovered:{backgroundColor:u,color:g},rootDisabled:{color:h,backgroundColor:d,selectors:(n={},n[St]={color:"GrayText",borderColor:"GrayText",backgroundColor:"Window"},n)},splitButtonContainer:{selectors:(o={},o[St]={border:"none"},o)},splitButtonMenuButton:{color:s.white,backgroundColor:"transparent",selectors:{":hover":{backgroundColor:s.neutralLight,selectors:(r={},r[St]={color:"Highlight"},r)}}},splitButtonMenuButtonDisabled:{backgroundColor:a.buttonBackgroundDisabled,selectors:{":hover":{backgroundColor:a.buttonBackgroundDisabled}}},splitButtonDivider:H(H({},{position:"absolute",width:1,right:31,top:8,bottom:8}),{backgroundColor:s.neutralTertiaryAlt,selectors:(i={},i[St]={backgroundColor:"WindowText"},i)}),splitButtonDividerDisabled:{backgroundColor:e.palette.neutralTertiaryAlt},splitButtonMenuButtonChecked:{backgroundColor:s.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:s.neutralQuaternaryAlt}}},splitButtonMenuButtonExpanded:{backgroundColor:s.neutralQuaternaryAlt,selectors:{":hover":{backgroundColor:s.neutralQuaternaryAlt}}},splitButtonMenuIcon:{color:a.buttonText},splitButtonMenuIconDisabled:{color:a.buttonTextDisabled}}}(e),r,t)})),Ed=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return B(n,t),n.prototype.render=function(){var t=this.props,n=t.primary,o=void 0!==n&&n,r=t.styles,i=t.theme;return e.createElement(fd,H({},this.props,{variantClassName:o?"ms-Button--primary":"ms-Button--default",styles:xd(i,r,o),onRenderDescription:fu}))},z([hd("DefaultButton",["theme","styles"],!0)],n)}(e.Component);var Id=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;i(this,a),t=r.call(this,e);for(var n=null,o=0;o<a._surveys.length;o++){var s=a._surveys[o];if(s.matchingErrorCodes.includes(t.props.associatedResult.errorCode)){n=s;break}}return n||(n=a._defaultSurvey),t.state={label:n.question.label,surveyLinkYes:n.question.yesLink+"&result_code="+t.props.associatedResult.errorCode,surveyLinkNo:n.question.noLink+"&result_code="+t.props.associatedResult.errorCode},t}return s(a,[{key:"render",value:function(){return e.createElement("div",{className:"survey"},e.createElement("label",null,this.state.label),e.createElement(Ed,{className:"surveyButton",href:this.state.surveyLinkYes,target:"_blank",text:"Yes"}),e.createElement(Ed,{className:"surveyButton",href:this.state.surveyLinkNo,target:"_blank",text:"No"}))}}]),a}(e.Component);function Dd(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=f(e);if(t){var r=f(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return p(this,n)}}g(Id,"_surveys",[{matchingErrorCodes:A.GetImportantErrorCodes(),question:{label:"Was the 'Learn more' content useful?",yesLink:"https://www.google.com/search?q=learn_more_yes",noLink:"https://www.bing.com/search?q=learn_more_no"}}]),g(Id,"_defaultSurvey",{matchingErrorCodes:[],question:{label:"Was this helpful?",yesLink:"https://www.google.com/search?q=yes",noLink:"https://www.bing.com/search?q=no"}});var Rd=function(t){u(o,t);var n=Dd(o);function o(e){var t;return i(this,o),(t=n.call(this,e)).state={id:e.id,result:e.result},t}return s(o,[{key:"render",value:function(){var t=this,n="result_index_"+this.state.id,o="itemSection_"+this.state.id;return e.createElement("div",{className:"detailedResult ",id:n},e.createElement("div",{id:o},this.state.result.items.map((function(n,o){return e.createElement(Td,{key:"inner_item"+t.state.id+"_"+o,id:"inner_item"+t.state.id+"_"+o,innerItem:n})}))),e.createElement(Id,{associatedResult:this.state.result}))}}]),o}(e.Component),Td=function(t){u(o,t);var n=Dd(o);function o(e){var t;return i(this,o),(t=n.call(this,e)).state={id:e.id,innerItem:e.innerItem},t}return s(o,[{key:"render",value:function(){var t=this;switch(this.state.innerItem.type){case _.Region:var n=this.state.innerItem;return e.createElement("div",{id:this.state.id},e.createElement("div",{className:"RegionHeader"},e.createElement("span",null,n.header)),e.createElement("div",{className:"RegionContent"},n.items.map((function(n,r){return e.createElement(o,{key:t.state.id+"_"+r,id:t.state.id+"_"+r,innerItem:n})}))));case _.Text:var r=this.state.innerItem.fragments.map((function(n,o){return e.createElement(du,{key:t.state.id+"_md_"+o,fragment:n})}));return e.createElement("span",{className:"TextItem"},r);case _.Tree:var i=this.state.innerItem;return e.createElement(wd,{id:this.state.id,treeGridItem:i})}}}]),o}(e.Component),Pd=r(379),Md=r.n(Pd),Fd=r(795),Ld=r.n(Fd),Ad=r(569),Nd=r.n(Ad),Bd=r(565),Hd=r.n(Bd),Od=r(216),zd=r.n(Od),Wd=r(589),Ud=r.n(Wd),Vd=r(431),Gd={};Gd.styleTagTransform=Ud(),Gd.setAttributes=Hd(),Gd.insert=Nd().bind(null,"head"),Gd.domAPI=Ld(),Gd.insertStyleElement=zd(),Md()(Vd.Z,Gd),Vd.Z&&Vd.Z.locals&&Vd.Z.locals;var jd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;return i(this,a),(t=r.call(this,e)).state={result:e.result,index:e.index,className:e.className},t}return s(a,[{key:"render",value:function(){return e.createElement(mr,{className:"resultCard "+this.state.className},e.createElement("div",{role:"gridcell"},e.createElement("h2",{tabIndex:-1},e.createElement(Io,{"aria-label":this.state.result.severity,iconName:Zd.getResultIconName(this.state.result),className:"result-icon result-icon-"+this.state.result.severity})," ",this.state.result.shortDescription)),e.createElement(Rd,{key:"DetailedResult_"+this.state.index,id:this.state.index,result:this.state.result}))}}]),a}(e.Component);var Kd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;return i(this,a),g(d(t=r.call(this,e)),"showModal",(function(){cu.showModal(t.slug,t.renderResultCard())})),t.state={result:e.result,showModal:!1,index:e.index},cu.registerRoute(t.slug,(function(){return t.renderResultCard()})),t}return s(a,[{key:"slug",get:function(){return"result-"+this.state.index}},{key:"renderResultCard",value:function(){return e.createElement(jd,{result:this.state.result,className:"",index:0})}},{key:"render",value:function(){return e.createElement(ol,{className:"otherResultFinding",onClick:this.showModal},this.state.result.shortDescription)}}]),a}(e.Component);var qd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;return i(this,a),(t=r.call(this,e)).state={mainFindingsCount:e.mainFindingsCount,results:e.results},t}return s(a,[{key:"renderItemColumn",value:function(t,n,o){if(!o)return null;if(!o.data)return null;switch(o.columnIndex){case 0:return e.createElement("div",{role:"gridcell"},e.createElement("span",{className:"otherResultSeverity"},e.createElement(Io,{"aria-label":t.severity,iconName:Zd.getResultIconName(t),className:"result-icon result-icon-"+t.severity}),t.severity.charAt(0).toUpperCase()+t.severity.slice(1)));case 1:return e.createElement("div",{role:"gridcell"},e.createElement(Kd,{result:t,index:n}))}}},{key:"render",value:function(){var t=0!=this.state.mainFindingsCount?"Other Findings":"Findings",n=[{key:"OtherResults_Severity",name:"Severity",columnIndex:0,fieldName:"Severity",minWidth:100,flexGrow:10,isResizable:!0,data:this},{key:"OtherResults_Finding",name:"Finding",columnIndex:1,fieldName:"Finding",minWidth:250,flexGrow:90,isResizable:!0,data:this}];return e.createElement(mr,{className:"resultCard content"},e.createElement("h2",null,t),e.createElement(Ml,{items:this.state.results,columns:n,selectionMode:Ka.none,onRenderItemColumn:this.renderItemColumn,layoutMode:jr.fixedColumns,className:"otherResultsList"}))}}]),a}(e.Component);var Zd=function(t){u(a,t);var n,o,r=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(n);if(o){var r=f(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;i(this,a),t=r.call(this,e);var n=[],o=[],s=A.GetImportantErrorCodes();return e.results.forEach((function(e){s.includes(e.errorCode)?n.push(e):o.push(e)})),t.state={mainFindings:n,otherFindings:o,isLoading:!0},t}return s(a,[{key:"render",value:function(){return e.createElement(e.Fragment,null,this.state.mainFindings.map((function(t,n){return e.createElement(jd,{key:"ResultsSummary_ "+n,className:"content",index:n,result:t})})),e.createElement(qd,{key:"OtherResultsSummary",results:this.state.otherFindings,mainFindingsCount:this.state.mainFindings.length}))}}],[{key:"getResultIconName",value:function(e){return"warning"==e.severity?"Warning12":"info"==e.severity?"Info":"error"==e.severity?"StatusErrorFull":"Info"}}]),a}(e.Component);var Qd=function(t){u(d,t);var n,r,a,l,c=(a=d,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(a);if(l){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function d(e){var t;return i(this,d),(t=c.call(this,e)).state={data:[],isLoading:!0},t}return s(d,[{key:"getResults",value:(n=m().mark((function e(){var t,n,o,r;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=new URLSearchParams(window.location.search),n=t.get("input"),e.next=5,fetch(n);case 5:return o=e.sent,e.next=8,o.json();case 8:r=e.sent,this.setState({data:A.loadData(r)}),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),console.log(e.t0);case 15:return e.prev=15,this.setState({isLoading:!1}),e.finish(15);case 18:case"end":return e.stop()}}),e,this,[[0,12,15,18]])})),r=function(){var e=this,t=arguments;return new Promise((function(r,i){var a=n.apply(e,t);function s(e){o(a,r,i,s,l,"next",e)}function l(e){o(a,r,i,s,l,"throw",e)}s(void 0)}))},function(){return r.apply(this,arguments)})},{key:"componentDidMount",value:function(){this.getResults()}},{key:"render",value:function(){return this.state.isLoading?e.createElement("div",null):e.createElement("div",{className:"container"},e.createElement("header",{className:"pageTitle"},e.createElement("h1",null,"Diagnostic Analysis")),e.createElement(Zd,{results:this.state.data}),e.createElement(cu,null))}}]),d}(e.Component);function Yd(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons"',src:"url('"+e+"fabric-icons-a13498cf.woff') format('woff')"},icons:{GlobalNavButton:"",ChevronDown:"",ChevronUp:"",Edit:"",Add:"",Cancel:"",More:"",Settings:"",Mail:"",Filter:"",Search:"",Share:"",BlockedSite:"",FavoriteStar:"",FavoriteStarFill:"",CheckMark:"",Delete:"",ChevronLeft:"",ChevronRight:"",Calendar:"",Megaphone:"",Undo:"",Flag:"",Page:"",Pinned:"",View:"",Clear:"",Download:"",Upload:"",Folder:"",Sort:"",AlignRight:"",AlignLeft:"",Tag:"",AddFriend:"",Info:"",SortLines:"",List:"",CircleRing:"",Heart:"",HeartFill:"",Tiles:"",Embed:"",Glimmer:"",Ascending:"",Descending:"",SortUp:"",SortDown:"",SyncToPC:"",LargeGrid:"",SkypeCheck:"",SkypeClock:"",SkypeMinus:"",ClearFilter:"",Flow:"",StatusCircleCheckmark:"",MoreVertical:""}},t)}function $d(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-0"',src:"url('"+e+"fabric-icons-0-467ee27f.woff') format('woff')"},icons:{PageLink:"",CommentSolid:"",ChangeEntitlements:"",Installation:"",WebAppBuilderModule:"",WebAppBuilderFragment:"",WebAppBuilderSlot:"",BullseyeTargetEdit:"",WebAppBuilderFragmentCreate:"",PageData:"",PageHeaderEdit:"",ProductList:"",UnpublishContent:"",DependencyAdd:"",DependencyRemove:"",EntitlementPolicy:"",EntitlementRedemption:"",SchoolDataSyncLogo:"",PinSolid12:"",PinSolidOff12:"",AddLink:"",SharepointAppIcon16:"",DataflowsLink:"",TimePicker:"",UserWarning:"",ComplianceAudit:"",InternetSharing:"",Brightness:"",MapPin:"",Airplane:"",Tablet:"",QuickNote:"",Video:"",People:"",Phone:"",Pin:"",Shop:"",Stop:"",Link:"",AllApps:"",Zoom:"",ZoomOut:"",Microphone:"",Camera:"",Attach:"",Send:"",FavoriteList:"",PageSolid:"",Forward:"",Back:"",Refresh:"",Lock:"",ReportHacked:"",EMI:"",MiniLink:"",Blocked:"",ReadingMode:"",Favicon:"",Remove:"",Checkbox:"",CheckboxComposite:"",CheckboxFill:"",CheckboxIndeterminate:"",CheckboxCompositeReversed:"",BackToWindow:"",FullScreen:"",Print:"",Up:"",Down:"",OEM:"",Save:"",ReturnKey:"",Cloud:"",Flashlight:"",CommandPrompt:"",Sad:"",RealEstate:"",SIPMove:"",EraseTool:"",GripperTool:"",Dialpad:"",PageLeft:"",PageRight:"",MultiSelect:"",KeyboardClassic:"",Play:"",Pause:"",InkingTool:"",Emoji2:"",GripperBarHorizontal:"",System:"",Personalize:"",SearchAndApps:"",Globe:"",EaseOfAccess:"",ContactInfo:"",Unpin:"",Contact:"",Memo:"",IncomingCall:""}},t)}function Xd(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-1"',src:"url('"+e+"fabric-icons-1-4d521695.woff') format('woff')"},icons:{Paste:"",WindowsLogo:"",Error:"",GripperBarVertical:"",Unlock:"",Slideshow:"",Trim:"",AutoEnhanceOn:"",AutoEnhanceOff:"",Color:"",SaveAs:"",Light:"",Filters:"",AspectRatio:"",Contrast:"",Redo:"",Crop:"",PhotoCollection:"",Album:"",Rotate:"",PanoIndicator:"",Translate:"",RedEye:"",ViewOriginal:"",ThumbnailView:"",Package:"",Telemarketer:"",Warning:"",Financial:"",Education:"",ShoppingCart:"",Train:"",Move:"",TouchPointer:"",Merge:"",TurnRight:"",Ferry:"",Highlight:"",PowerButton:"",Tab:"",Admin:"",TVMonitor:"",Speakers:"",Game:"",HorizontalTabKey:"",UnstackSelected:"",StackIndicator:"",Nav2DMapView:"",StreetsideSplitMinimize:"",Car:"",Bus:"",EatDrink:"",SeeDo:"",LocationCircle:"",Home:"",SwitcherStartEnd:"",ParkingLocation:"",IncidentTriangle:"",Touch:"",MapDirections:"",CaretHollow:"",CaretSolid:"",History:"",Location:"",MapLayers:"",SearchNearby:"",Work:"",Recent:"",Hotel:"",Bank:"",LocationDot:"",Dictionary:"",ChromeBack:"",FolderOpen:"",PinnedFill:"",RevToggleKey:"",USB:"",Previous:"",Next:"",Sync:"",Help:"",Emoji:"",MailForward:"",ClosePane:"",OpenPane:"",PreviewLink:"",ZoomIn:"",Bookmarks:"",Document:"",ProtectedDocument:"",OpenInNewWindow:"",MailFill:"",ViewAll:"",Switch:"",Rename:"",Go:"",Remote:"",SelectAll:"",Orientation:"",Import:""}},t)}function Jd(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-2"',src:"url('"+e+"fabric-icons-2-63c99abf.woff') format('woff')"},icons:{Picture:"",ChromeClose:"",ShowResults:"",Message:"",CalendarDay:"",CalendarWeek:"",MailReplyAll:"",Read:"",Cut:"",PaymentCard:"",Copy:"",Important:"",MailReply:"",GotoToday:"",Font:"",FontColor:"",FolderFill:"",Permissions:"",DisableUpdates:"",Unfavorite:"",Italic:"",Underline:"",Bold:"",MoveToFolder:"",Dislike:"",Like:"",AlignCenter:"",OpenFile:"",ClearSelection:"",FontDecrease:"",FontIncrease:"",FontSize:"",CellPhone:"",RepeatOne:"",RepeatAll:"",Calculator:"",Library:"",PostUpdate:"",NewFolder:"",CalendarReply:"",UnsyncFolder:"",SyncFolder:"",BlockContact:"",Accept:"",BulletedList:"",Preview:"",News:"",Chat:"",Group:"",World:"",Comment:"",DockLeft:"",DockRight:"",Repair:"",Accounts:"",Street:"",RadioBullet:"",Stopwatch:"",Clock:"",WorldClock:"",AlarmClock:"",Photo:"",ActionCenter:"",Hospital:"",Timer:"",FullCircleMask:"",LocationFill:"",ChromeMinimize:"",ChromeRestore:"",Annotation:"",Fingerprint:"",Handwriting:"",ChromeFullScreen:"",Completed:"",Label:"",FlickDown:"",FlickUp:"",FlickLeft:"",FlickRight:"",MiniExpand:"",MiniContract:"",Streaming:"",MusicInCollection:"",OneDriveLogo:"",CompassNW:"",Code:"",LightningBolt:"",CalculatorMultiply:"",CalculatorAddition:"",CalculatorSubtract:"",CalculatorPercentage:"",CalculatorEqualTo:"",PrintfaxPrinterFile:"",StorageOptical:"",Communications:"",Headset:"",Health:"",Webcam2:"",FrontCamera:"",ChevronUpSmall:""}},t)}function ep(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-3"',src:"url('"+e+"fabric-icons-3-089e217a.woff') format('woff')"},icons:{ChevronDownSmall:"",ChevronLeftSmall:"",ChevronRightSmall:"",ChevronUpMed:"",ChevronDownMed:"",ChevronLeftMed:"",ChevronRightMed:"",Devices2:"",PC1:"",PresenceChickletVideo:"",Reply:"",HalfAlpha:"",ConstructionCone:"",DoubleChevronLeftMed:"",Volume0:"",Volume1:"",Volume2:"",Volume3:"",Chart:"",Robot:"",Manufacturing:"",LockSolid:"",FitPage:"",FitWidth:"",BidiLtr:"",BidiRtl:"",RightDoubleQuote:"",Sunny:"",CloudWeather:"",Cloudy:"",PartlyCloudyDay:"",PartlyCloudyNight:"",ClearNight:"",RainShowersDay:"",Rain:"",Thunderstorms:"",RainSnow:"",Snow:"",BlowingSnow:"",Frigid:"",Fog:"",Squalls:"",Duststorm:"",Unknown:"",Precipitation:"",Ribbon:"",AreaChart:"",Assign:"",FlowChart:"",CheckList:"",Diagnostic:"",Generate:"",LineChart:"",Equalizer:"",BarChartHorizontal:"",BarChartVertical:"",Freezing:"",FunnelChart:"",Processing:"",Quantity:"",ReportDocument:"",StackColumnChart:"",SnowShowerDay:"",HailDay:"",WorkFlow:"",HourGlass:"",StoreLogoMed20:"",TimeSheet:"",TriangleSolid:"",UpgradeAnalysis:"",VideoSolid:"",RainShowersNight:"",SnowShowerNight:"",Teamwork:"",HailNight:"",PeopleAdd:"",Glasses:"",DateTime2:"",Shield:"",Header1:"",PageAdd:"",NumberedList:"",PowerBILogo:"",Info2:"",MusicInCollectionFill:"",Asterisk:"",ErrorBadge:"",CircleFill:"",Record2:"",AllAppsMirrored:"",BookmarksMirrored:"",BulletedListMirrored:"",CaretHollowMirrored:"",CaretSolidMirrored:"",ChromeBackMirrored:"",ClearSelectionMirrored:"",ClosePaneMirrored:"",DockLeftMirrored:"",DoubleChevronLeftMedMirrored:"",GoMirrored:""}},t)}function tp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-4"',src:"url('"+e+"fabric-icons-4-a656cc0a.woff') format('woff')"},icons:{HelpMirrored:"",ImportMirrored:"",ImportAllMirrored:"",ListMirrored:"",MailForwardMirrored:"",MailReplyMirrored:"",MailReplyAllMirrored:"",MiniContractMirrored:"",MiniExpandMirrored:"",OpenPaneMirrored:"",ParkingLocationMirrored:"",SendMirrored:"",ShowResultsMirrored:"",ThumbnailViewMirrored:"",Media:"",Devices3:"",Focus:"",VideoLightOff:"",Lightbulb:"",StatusTriangle:"",VolumeDisabled:"",Puzzle:"",EmojiNeutral:"",EmojiDisappointed:"",HomeSolid:"",Ringer:"",PDF:"",HeartBroken:"",StoreLogo16:"",MultiSelectMirrored:"",Broom:"",AddToShoppingList:"",Cocktails:"",Wines:"",Articles:"",Cycling:"",DietPlanNotebook:"",Pill:"",ExerciseTracker:"",HandsFree:"",Medical:"",Running:"",Weights:"",Trackers:"",AddNotes:"",AllCurrency:"",BarChart4:"",CirclePlus:"",Coffee:"",Cotton:"",Market:"",Money:"",PieDouble:"",PieSingle:"",RemoveFilter:"",Savings:"",Sell:"",StockDown:"",StockUp:"",Lamp:"",Source:"",MSNVideos:"",Cricket:"",Golf:"",Baseball:"",Soccer:"",MoreSports:"",AutoRacing:"",CollegeHoops:"",CollegeFootball:"",ProFootball:"",ProHockey:"",Rugby:"",SubstitutionsIn:"",Tennis:"",Arrivals:"",Design:"",Website:"",Drop:"",HistoricalWeather:"",SkiResorts:"",Snowflake:"",BusSolid:"",FerrySolid:"",AirplaneSolid:"",TrainSolid:"",Ticket:"",WifiWarning4:"",Devices4:"",AzureLogo:"",BingLogo:"",MSNLogo:"",OutlookLogoInverse:"",OfficeLogo:"",SkypeLogo:"",Door:"",EditMirrored:"",GiftCard:"",DoubleBookmark:"",StatusErrorFull:""}},t)}function np(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-5"',src:"url('"+e+"fabric-icons-5-f95ba260.woff') format('woff')"},icons:{Certificate:"",FastForward:"",Rewind:"",Photo2:"",OpenSource:"",Movers:"",CloudDownload:"",Family:"",WindDirection:"",Bug:"",SiteScan:"",BrowserScreenShot:"",F12DevTools:"",CSS:"",JS:"",DeliveryTruck:"",ReminderPerson:"",ReminderGroup:"",ReminderTime:"",TabletMode:"",Umbrella:"",NetworkTower:"",CityNext:"",CityNext2:"",Section:"",OneNoteLogoInverse:"",ToggleFilled:"",ToggleBorder:"",SliderThumb:"",ToggleThumb:"",Documentation:"",Badge:"",Giftbox:"",VisualStudioLogo:"",HomeGroup:"",ExcelLogoInverse:"",WordLogoInverse:"",PowerPointLogoInverse:"",Cafe:"",SpeedHigh:"",Commitments:"",ThisPC:"",MusicNote:"",MicOff:"",PlaybackRate1x:"",EdgeLogo:"",CompletedSolid:"",AlbumRemove:"",MessageFill:"",TabletSelected:"",MobileSelected:"",LaptopSelected:"",TVMonitorSelected:"",DeveloperTools:"",Shapes:"",InsertTextBox:"",LowerBrightness:"",WebComponents:"",OfflineStorage:"",DOM:"",CloudUpload:"",ScrollUpDown:"",DateTime:"",Event:"",Cake:"",Org:"",PartyLeader:"",DRM:"",CloudAdd:"",AppIconDefault:"",Photo2Add:"",Photo2Remove:"",Calories:"",POI:"",AddTo:"",RadioBtnOff:"",RadioBtnOn:"",ExploreContent:"",Product:"",ProgressLoopInner:"",ProgressLoopOuter:"",Blocked2:"",FangBody:"",Toolbox:"",PageHeader:"",ChatInviteFriend:"",Brush:"",Shirt:"",Crown:"",Diamond:"",ScaleUp:"",QRCode:"",Feedback:"",SharepointLogoInverse:"",YammerLogo:"",Hide:"",Uneditable:"",ReturnToSession:"",OpenFolderHorizontal:"",CalendarMirrored:""}},t)}function op(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-6"',src:"url('"+e+"fabric-icons-6-ef6fd590.woff') format('woff')"},icons:{SwayLogoInverse:"",OutOfOffice:"",Trophy:"",ReopenPages:"",EmojiTabSymbols:"",AADLogo:"",AccessLogo:"",AdminALogoInverse32:"",AdminCLogoInverse32:"",AdminDLogoInverse32:"",AdminELogoInverse32:"",AdminLLogoInverse32:"",AdminMLogoInverse32:"",AdminOLogoInverse32:"",AdminPLogoInverse32:"",AdminSLogoInverse32:"",AdminYLogoInverse32:"",DelveLogoInverse:"",ExchangeLogoInverse:"",LyncLogo:"",OfficeVideoLogoInverse:"",SocialListeningLogo:"",VisioLogoInverse:"",Balloons:"",Cat:"",MailAlert:"",MailCheck:"",MailLowImportance:"",MailPause:"",MailRepeat:"",SecurityGroup:"",Table:"",VoicemailForward:"",VoicemailReply:"",Waffle:"",RemoveEvent:"",EventInfo:"",ForwardEvent:"",WipePhone:"",AddOnlineMeeting:"",JoinOnlineMeeting:"",RemoveLink:"",PeopleBlock:"",PeopleRepeat:"",PeopleAlert:"",PeoplePause:"",TransferCall:"",AddPhone:"",UnknownCall:"",NoteReply:"",NoteForward:"",NotePinned:"",RemoveOccurrence:"",Timeline:"",EditNote:"",CircleHalfFull:"",Room:"",Unsubscribe:"",Subscribe:"",HardDrive:"",RecurringTask:"",TaskManager:"",TaskManagerMirrored:"",Combine:"",Split:"",DoubleChevronUp:"",DoubleChevronLeft:"",DoubleChevronRight:"",TextBox:"",TextField:"",NumberField:"",Dropdown:"",PenWorkspace:"",BookingsLogo:"",ClassNotebookLogoInverse:"",DelveAnalyticsLogo:"",DocsLogoInverse:"",Dynamics365Logo:"",DynamicSMBLogo:"",OfficeAssistantLogo:"",OfficeStoreLogo:"",OneNoteEduLogoInverse:"",PlannerLogo:"",PowerApps:"",Suitcase:"",ProjectLogoInverse:"",CaretLeft8:"",CaretRight8:"",CaretUp8:"",CaretDown8:"",CaretLeftSolid8:"",CaretRightSolid8:"",CaretUpSolid8:"",CaretDownSolid8:"",ClearFormatting:"",Superscript:"",Subscript:"",Strikethrough:"",Export:"",ExportMirrored:""}},t)}function rp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-7"',src:"url('"+e+"fabric-icons-7-2b97bb99.woff') format('woff')"},icons:{SingleBookmark:"",SingleBookmarkSolid:"",DoubleChevronDown:"",FollowUser:"",ReplyAll:"",WorkforceManagement:"",RecruitmentManagement:"",Questionnaire:"",ManagerSelfService:"",ProductionFloorManagement:"",ProductRelease:"",ProductVariant:"",ReplyMirrored:"",ReplyAllMirrored:"",Medal:"",AddGroup:"",QuestionnaireMirrored:"",CloudImportExport:"",TemporaryUser:"",CaretSolid16:"",GroupedDescending:"",GroupedAscending:"",AwayStatus:"",MyMoviesTV:"",GenericScan:"",AustralianRules:"",WifiEthernet:"",TrackersMirrored:"",DateTimeMirrored:"",StopSolid:"",DoubleChevronUp12:"",DoubleChevronDown12:"",DoubleChevronLeft12:"",DoubleChevronRight12:"",CalendarAgenda:"",ConnectVirtualMachine:"",AddEvent:"",AssetLibrary:"",DataConnectionLibrary:"",DocLibrary:"",FormLibrary:"",FormLibraryMirrored:"",ReportLibrary:"",ReportLibraryMirrored:"",ContactCard:"",CustomList:"",CustomListMirrored:"",IssueTracking:"",IssueTrackingMirrored:"",PictureLibrary:"",OfficeAddinsLogo:"",OfflineOneDriveParachute:"",OfflineOneDriveParachuteDisabled:"",TriangleSolidUp12:"",TriangleSolidDown12:"",TriangleSolidLeft12:"",TriangleSolidRight12:"",TriangleUp12:"",TriangleDown12:"",TriangleLeft12:"",TriangleRight12:"",ArrowUpRight8:"",ArrowDownRight8:"",DocumentSet:"",GoToDashboard:"",DelveAnalytics:"",ArrowUpRightMirrored8:"",ArrowDownRightMirrored8:"",CompanyDirectory:"",OpenEnrollment:"",CompanyDirectoryMirrored:"",OneDriveAdd:"",ProfileSearch:"",Header2:"",Header3:"",Header4:"",RingerSolid:"",Eyedropper:"",MarketDown:"",CalendarWorkWeek:"",SidePanel:"",GlobeFavorite:"",CaretTopLeftSolid8:"",CaretTopRightSolid8:"",ViewAll2:"",DocumentReply:"",PlayerSettings:"",ReceiptForward:"",ReceiptReply:"",ReceiptCheck:"",Fax:"",RecurringEvent:"",ReplyAlt:"",ReplyAllAlt:"",EditStyle:"",EditMail:"",Lifesaver:"",LifesaverLock:"",InboxCheck:"",FolderSearch:""}},t)}function ip(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-8"',src:"url('"+e+"fabric-icons-8-6fdf1528.woff') format('woff')"},icons:{CollapseMenu:"",ExpandMenu:"",Boards:"",SunAdd:"",SunQuestionMark:"",LandscapeOrientation:"",DocumentSearch:"",PublicCalendar:"",PublicContactCard:"",PublicEmail:"",PublicFolder:"",WordDocument:"",PowerPointDocument:"",ExcelDocument:"",GroupedList:"",ClassroomLogo:"",Sections:"",EditPhoto:"",Starburst:"",ShareiOS:"",AirTickets:"",PencilReply:"",Tiles2:"",SkypeCircleCheck:"",SkypeCircleClock:"",SkypeCircleMinus:"",SkypeMessage:"",ClosedCaption:"",ATPLogo:"",OfficeFormsLogoInverse:"",RecycleBin:"",EmptyRecycleBin:"",Hide2:"",Breadcrumb:"",BirthdayCake:"",TimeEntry:"",CRMProcesses:"",PageEdit:"",PageArrowRight:"",PageRemove:"",Database:"",DataManagementSettings:"",CRMServices:"",EditContact:"",ConnectContacts:"",AppIconDefaultAdd:"",AppIconDefaultList:"",ActivateOrders:"",DeactivateOrders:"",ProductCatalog:"",ScatterChart:"",AccountActivity:"",DocumentManagement:"",CRMReport:"",KnowledgeArticle:"",Relationship:"",HomeVerify:"",ZipFolder:"",SurveyQuestions:"",TextDocument:"",TextDocumentShared:"",PageCheckedOut:"",PageShared:"",SaveAndClose:"",Script:"",Archive:"",ActivityFeed:"",Compare:"",EventDate:"",ArrowUpRight:"",CaretRight:"",SetAction:"",ChatBot:"",CaretSolidLeft:"",CaretSolidDown:"",CaretSolidRight:"",CaretSolidUp:"",PowerAppsLogo:"",PowerApps2Logo:"",SearchIssue:"",SearchIssueMirrored:"",FabricAssetLibrary:"",FabricDataConnectionLibrary:"",FabricDocLibrary:"",FabricFormLibrary:"",FabricFormLibraryMirrored:"",FabricReportLibrary:"",FabricReportLibraryMirrored:"",FabricPublicFolder:"",FabricFolderSearch:"",FabricMovetoFolder:"",FabricUnsyncFolder:"",FabricSyncFolder:"",FabricOpenFolderHorizontal:"",FabricFolder:"",FabricFolderFill:"",FabricNewFolder:"",FabricPictureLibrary:"",PhotoVideoMedia:"",AddFavorite:""}},t)}function ap(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-9"',src:"url('"+e+"fabric-icons-9-c6162b42.woff') format('woff')"},icons:{AddFavoriteFill:"",BufferTimeBefore:"",BufferTimeAfter:"",BufferTimeBoth:"",PublishContent:"",ClipboardList:"",ClipboardListMirrored:"",CannedChat:"",SkypeForBusinessLogo:"",TabCenter:"",PageCheckedin:"",PageList:"",ReadOutLoud:"",CaretBottomLeftSolid8:"",CaretBottomRightSolid8:"",FolderHorizontal:"",MicrosoftStaffhubLogo:"",GiftboxOpen:"",StatusCircleOuter:"",StatusCircleInner:"",StatusCircleRing:"",StatusTriangleOuter:"",StatusTriangleInner:"",StatusTriangleExclamation:"",StatusCircleExclamation:"",StatusCircleErrorX:"",StatusCircleInfo:"",StatusCircleBlock:"",StatusCircleBlock2:"",StatusCircleQuestionMark:"",StatusCircleSync:"",Toll:"",ExploreContentSingle:"",CollapseContent:"",CollapseContentSingle:"",InfoSolid:"",GroupList:"",ProgressRingDots:"",CaloriesAdd:"",BranchFork:"",MuteChat:"",AddHome:"",AddWork:"",MobileReport:"",ScaleVolume:"",HardDriveGroup:"",FastMode:"",ToggleLeft:"",ToggleRight:"",TriangleShape:"",RectangleShape:"",CubeShape:"",Trophy2:"",BucketColor:"",BucketColorFill:"",Taskboard:"",SingleColumn:"",DoubleColumn:"",TripleColumn:"",ColumnLeftTwoThirds:"",ColumnRightTwoThirds:"",AccessLogoFill:"",AnalyticsLogo:"",AnalyticsQuery:"",NewAnalyticsQuery:"",AnalyticsReport:"",WordLogo:"",WordLogoFill:"",ExcelLogo:"",ExcelLogoFill:"",OneNoteLogo:"",OneNoteLogoFill:"",OutlookLogo:"",OutlookLogoFill:"",PowerPointLogo:"",PowerPointLogoFill:"",PublisherLogo:"",PublisherLogoFill:"",ScheduleEventAction:"",FlameSolid:"",ServerProcesses:"",Server:"",SaveAll:"",LinkedInLogo:"",Decimals:"",SidePanelMirrored:"",ProtectRestrict:"",Blog:"",UnknownMirrored:"",PublicContactCardMirrored:"",GridViewSmall:"",GridViewMedium:"",GridViewLarge:"",Step:"",StepInsert:"",StepShared:"",StepSharedAdd:"",StepSharedInsert:"",ViewDashboard:"",ViewList:""}},t)}function sp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-10"',src:"url('"+e+"fabric-icons-10-c4ded8e4.woff') format('woff')"},icons:{ViewListGroup:"",ViewListTree:"",TriggerAuto:"",TriggerUser:"",PivotChart:"",StackedBarChart:"",StackedLineChart:"",BuildQueue:"",BuildQueueNew:"",UserFollowed:"",ContactLink:"",Stack:"",Bullseye:"",VennDiagram:"",FiveTileGrid:"",FocalPoint:"",Insert:"",RingerRemove:"",TeamsLogoInverse:"",TeamsLogo:"",TeamsLogoFill:"",SkypeForBusinessLogoFill:"",SharepointLogo:"",SharepointLogoFill:"",DelveLogo:"",DelveLogoFill:"",OfficeVideoLogo:"",OfficeVideoLogoFill:"",ExchangeLogo:"",ExchangeLogoFill:"",Signin:"",DocumentApproval:"",CloneToDesktop:"",InstallToDrive:"",Blur:"",Build:"",ProcessMetaTask:"",BranchFork2:"",BranchLocked:"",BranchCommit:"",BranchCompare:"",BranchMerge:"",BranchPullRequest:"",BranchSearch:"",BranchShelveset:"",RawSource:"",MergeDuplicate:"",RowsGroup:"",RowsChild:"",Deploy:"",Redeploy:"",ServerEnviroment:"",VisioDiagram:"",HighlightMappedShapes:"",TextCallout:"",IconSetsFlag:"",VisioLogo:"",VisioLogoFill:"",VisioDocument:"",TimelineProgress:"",TimelineDelivery:"",Backlog:"",TeamFavorite:"",TaskGroup:"",TaskGroupMirrored:"",ScopeTemplate:"",AssessmentGroupTemplate:"",NewTeamProject:"",CommentAdd:"",CommentNext:"",CommentPrevious:"",ShopServer:"",LocaleLanguage:"",QueryList:"",UserSync:"",UserPause:"",StreamingOff:"",ArrowTallUpLeft:"",ArrowTallUpRight:"",ArrowTallDownLeft:"",ArrowTallDownRight:"",FieldEmpty:"",FieldFilled:"",FieldChanged:"",FieldNotChanged:"",RingerOff:"",PlayResume:"",BulletedList2:"",BulletedList2Mirrored:"",ImageCrosshair:"",GitGraph:"",Repo:"",RepoSolid:"",FolderQuery:"",FolderList:"",FolderListMirrored:"",LocationOutline:"",POISolid:"",CalculatorNotEqualTo:"",BoxSubtractSolid:""}},t)}function lp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-11"',src:"url('"+e+"fabric-icons-11-2a8393d6.woff') format('woff')"},icons:{BoxAdditionSolid:"",BoxMultiplySolid:"",BoxPlaySolid:"",BoxCheckmarkSolid:"",CirclePauseSolid:"",CirclePause:"",MSNVideosSolid:"",CircleStopSolid:"",CircleStop:"",NavigateBack:"",NavigateBackMirrored:"",NavigateForward:"",NavigateForwardMirrored:"",UnknownSolid:"",UnknownMirroredSolid:"",CircleAddition:"",CircleAdditionSolid:"",FilePDB:"",FileTemplate:"",FileSQL:"",FileJAVA:"",FileASPX:"",FileCSS:"",FileSass:"",FileLess:"",FileHTML:"",JavaScriptLanguage:"",CSharpLanguage:"",CSharp:"",VisualBasicLanguage:"",VB:"",CPlusPlusLanguage:"",CPlusPlus:"",FSharpLanguage:"",FSharp:"",TypeScriptLanguage:"",PythonLanguage:"",PY:"",CoffeeScript:"",MarkDownLanguage:"",FullWidth:"",FullWidthEdit:"",Plug:"",PlugSolid:"",PlugConnected:"",PlugDisconnected:"",UnlockSolid:"",Variable:"",Parameter:"",CommentUrgent:"",Storyboard:"",DiffInline:"",DiffSideBySide:"",ImageDiff:"",ImagePixel:"",FileBug:"",FileCode:"",FileComment:"",BusinessHoursSign:"",FileImage:"",FileSymlink:"",AutoFillTemplate:"",WorkItem:"",WorkItemBug:"",LogRemove:"",ColumnOptions:"",Packages:"",BuildIssue:"",AssessmentGroup:"",VariableGroup:"",FullHistory:"",Wheelchair:"",SingleColumnEdit:"",DoubleColumnEdit:"",TripleColumnEdit:"",ColumnLeftTwoThirdsEdit:"",ColumnRightTwoThirdsEdit:"",StreamLogo:"",PassiveAuthentication:"",AlertSolid:"",MegaphoneSolid:"",TaskSolid:"",ConfigurationSolid:"",BugSolid:"",CrownSolid:"",Trophy2Solid:"",QuickNoteSolid:"",ConstructionConeSolid:"",PageListSolid:"",PageListMirroredSolid:"",StarburstSolid:"",ReadingModeSolid:"",SadSolid:"",HealthSolid:"",ShieldSolid:"",GiftBoxSolid:"",ShoppingCartSolid:"",MailSolid:"",ChatSolid:"",RibbonSolid:""}},t)}function up(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-12"',src:"url('"+e+"fabric-icons-12-7e945a1e.woff') format('woff')"},icons:{FinancialSolid:"",FinancialMirroredSolid:"",HeadsetSolid:"",PermissionsSolid:"",ParkingSolid:"",ParkingMirroredSolid:"",DiamondSolid:"",AsteriskSolid:"",OfflineStorageSolid:"",BankSolid:"",DecisionSolid:"",Parachute:"",ParachuteSolid:"",FiltersSolid:"",ColorSolid:"",ReviewSolid:"",ReviewRequestSolid:"",ReviewRequestMirroredSolid:"",ReviewResponseSolid:"",FeedbackRequestSolid:"",FeedbackRequestMirroredSolid:"",FeedbackResponseSolid:"",WorkItemBar:"",WorkItemBarSolid:"",Separator:"",NavigateExternalInline:"",PlanView:"",TimelineMatrixView:"",EngineeringGroup:"",ProjectCollection:"",CaretBottomRightCenter8:"",CaretBottomLeftCenter8:"",CaretTopRightCenter8:"",CaretTopLeftCenter8:"",DonutChart:"",ChevronUnfold10:"",ChevronFold10:"",DoubleChevronDown8:"",DoubleChevronUp8:"",DoubleChevronLeft8:"",DoubleChevronRight8:"",ChevronDownEnd6:"",ChevronUpEnd6:"",ChevronLeftEnd6:"",ChevronRightEnd6:"",ContextMenu:"",AzureAPIManagement:"",AzureServiceEndpoint:"",VSTSLogo:"",VSTSAltLogo1:"",VSTSAltLogo2:"",FileTypeSolution:"",WordLogoInverse16:"",WordLogo16:"",WordLogoFill16:"",PowerPointLogoInverse16:"",PowerPointLogo16:"",PowerPointLogoFill16:"",ExcelLogoInverse16:"",ExcelLogo16:"",ExcelLogoFill16:"",OneNoteLogoInverse16:"",OneNoteLogo16:"",OneNoteLogoFill16:"",OutlookLogoInverse16:"",OutlookLogo16:"",OutlookLogoFill16:"",PublisherLogoInverse16:"",PublisherLogo16:"",PublisherLogoFill16:"",VisioLogoInverse16:"",VisioLogo16:"",VisioLogoFill16:"",TestBeaker:"",TestBeakerSolid:"",TestExploreSolid:"",TestAutoSolid:"",TestUserSolid:"",TestImpactSolid:"",TestPlan:"",TestStep:"",TestParameter:"",TestSuite:"",TestCase:"",Sprint:"",SignOut:"",TriggerApproval:"",Rocket:"",AzureKeyVault:"",Onboarding:"",Transition:"",LikeSolid:"",DislikeSolid:"",CRMCustomerInsightsApp:"",EditCreate:"",PlayReverseResume:"",PlayReverse:"",SearchData:"",UnSetColor:"",DeclineCall:""}},t)}function cp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-13"',src:"url('"+e+"fabric-icons-13-c3989a02.woff') format('woff')"},icons:{RectangularClipping:"",TeamsLogo16:"",TeamsLogoFill16:"",Spacer:"",SkypeLogo16:"",SkypeForBusinessLogo16:"",SkypeForBusinessLogoFill16:"",FilterSolid:"",MailUndelivered:"",MailTentative:"",MailTentativeMirrored:"",MailReminder:"",ReceiptUndelivered:"",ReceiptTentative:"",ReceiptTentativeMirrored:"",Inbox:"",IRMReply:"",IRMReplyMirrored:"",IRMForward:"",IRMForwardMirrored:"",VoicemailIRM:"",EventAccepted:"",EventTentative:"",EventTentativeMirrored:"",EventDeclined:"",IDBadge:"",BackgroundColor:"",OfficeFormsLogoInverse16:"",OfficeFormsLogo:"",OfficeFormsLogoFill:"",OfficeFormsLogo16:"",OfficeFormsLogoFill16:"",OfficeFormsLogoInverse24:"",OfficeFormsLogo24:"",OfficeFormsLogoFill24:"",PageLock:"",NotExecuted:"",NotImpactedSolid:"",FieldReadOnly:"",FieldRequired:"",BacklogBoard:"",ExternalBuild:"",ExternalTFVC:"",ExternalXAML:"",IssueSolid:"",DefectSolid:"",LadybugSolid:"",NugetLogo:"",TFVCLogo:"",ProjectLogo32:"",ProjectLogoFill32:"",ProjectLogo16:"",ProjectLogoFill16:"",SwayLogo32:"",SwayLogoFill32:"",SwayLogo16:"",SwayLogoFill16:"",ClassNotebookLogo32:"",ClassNotebookLogoFill32:"",ClassNotebookLogo16:"",ClassNotebookLogoFill16:"",ClassNotebookLogoInverse32:"",ClassNotebookLogoInverse16:"",StaffNotebookLogo32:"",StaffNotebookLogoFill32:"",StaffNotebookLogo16:"",StaffNotebookLogoFill16:"",StaffNotebookLogoInverted32:"",StaffNotebookLogoInverted16:"",KaizalaLogo:"",TaskLogo:"",ProtectionCenterLogo32:"",GallatinLogo:"",Globe2:"",Guitar:"",Breakfast:"",Brunch:"",BeerMug:"",Vacation:"",Teeth:"",Taxi:"",Chopsticks:"",SyncOccurence:"",UnsyncOccurence:"",GIF:"",PrimaryCalendar:"",SearchCalendar:"",VideoOff:"",MicrosoftFlowLogo:"",BusinessCenterLogo:"",ToDoLogoBottom:"",ToDoLogoTop:"",EditSolid12:"",EditSolidMirrored12:"",UneditableSolid12:"",UneditableSolidMirrored12:"",UneditableMirrored:"",AdminALogo32:"",AdminALogoFill32:"",ToDoLogoInverse:""}},t)}function dp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-14"',src:"url('"+e+"fabric-icons-14-5cf58db8.woff') format('woff')"},icons:{Snooze:"",WaffleOffice365:"",ImageSearch:"",NewsSearch:"",VideoSearch:"",R:"",FontColorA:"",FontColorSwatch:"",LightWeight:"",NormalWeight:"",SemiboldWeight:"",GroupObject:"",UngroupObject:"",AlignHorizontalLeft:"",AlignHorizontalCenter:"",AlignHorizontalRight:"",AlignVerticalTop:"",AlignVerticalCenter:"",AlignVerticalBottom:"",HorizontalDistributeCenter:"",VerticalDistributeCenter:"",Ellipse:"",Line:"",Octagon:"",Hexagon:"",Pentagon:"",RightTriangle:"",HalfCircle:"",QuarterCircle:"",ThreeQuarterCircle:"","6PointStar":"","12PointStar":"",ArrangeBringToFront:"",ArrangeSendToBack:"",ArrangeSendBackward:"",ArrangeBringForward:"",BorderDash:"",BorderDot:"",LineStyle:"",LineThickness:"",WindowEdit:"",HintText:"",MediaAdd:"",AnchorLock:"",AutoHeight:"",ChartSeries:"",ChartXAngle:"",ChartYAngle:"",Combobox:"",LineSpacing:"",Padding:"",PaddingTop:"",PaddingBottom:"",PaddingLeft:"",PaddingRight:"",NavigationFlipper:"",AlignJustify:"",TextOverflow:"",VisualsFolder:"",VisualsStore:"",PictureCenter:"",PictureFill:"",PicturePosition:"",PictureStretch:"",PictureTile:"",Slider:"",SliderHandleSize:"",DefaultRatio:"",NumberSequence:"",GUID:"",ReportAdd:"",DashboardAdd:"",MapPinSolid:"",WebPublish:"",PieSingleSolid:"",BlockedSolid:"",DrillDown:"",DrillDownSolid:"",DrillExpand:"",DrillShow:"",SpecialEvent:"",OneDriveFolder16:"",FunctionalManagerDashboard:"",BIDashboard:"",CodeEdit:"",RenewalCurrent:"",RenewalFuture:"",SplitObject:"",BulkUpload:"",DownloadDocument:"",GreetingCard:"",Flower:"",WaitlistConfirm:"",WaitlistConfirmMirrored:"",LaptopSecure:"",DragObject:"",EntryView:"",EntryDecline:"",ContactCardSettings:"",ContactCardSettingsMirrored:""}},t)}function pp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-15"',src:"url('"+e+"fabric-icons-15-3807251b.woff') format('woff')"},icons:{CalendarSettings:"",CalendarSettingsMirrored:"",HardDriveLock:"",HardDriveUnlock:"",AccountManagement:"",ReportWarning:"",TransitionPop:"",TransitionPush:"",TransitionEffect:"",LookupEntities:"",ExploreData:"",AddBookmark:"",SearchBookmark:"",DrillThrough:"",MasterDatabase:"",CertifiedDatabase:"",MaximumValue:"",MinimumValue:"",VisualStudioIDELogo32:"",PasteAsText:"",PasteAsCode:"",BrowserTab:"",BrowserTabScreenshot:"",DesktopScreenshot:"",FileYML:"",ClipboardSolid:"",FabricUserFolder:"",FabricNetworkFolder:"",BullseyeTarget:"",AnalyticsView:"",Video360Generic:"",Untag:"",Leave:"",Trending12:"",Blocked12:"",Warning12:"",CheckedOutByOther12:"",CheckedOutByYou12:"",CircleShapeSolid:"",SquareShapeSolid:"",TriangleShapeSolid:"",DropShapeSolid:"",RectangleShapeSolid:"",ZoomToFit:"",InsertColumnsLeft:"",InsertColumnsRight:"",InsertRowsAbove:"",InsertRowsBelow:"",DeleteColumns:"",DeleteRows:"",DeleteRowsMirrored:"",DeleteTable:"",AccountBrowser:"",VersionControlPush:"",StackedColumnChart2:"",TripleColumnWide:"",QuadColumn:"",WhiteBoardApp16:"",WhiteBoardApp32:"",PinnedSolid:"",InsertSignatureLine:"",ArrangeByFrom:"",Phishing:"",CreateMailRule:"",PublishCourse:"",DictionaryRemove:"",UserRemove:"",UserEvent:"",Encryption:"",PasswordField:"",OpenInNewTab:"",Hide3:"",VerifiedBrandSolid:"",MarkAsProtected:"",AuthenticatorApp:"",WebTemplate:"",DefenderTVM:"",MedalSolid:"",D365TalentLearn:"",D365TalentInsight:"",D365TalentHRCore:"",BacklogList:"",ButtonControl:"",TableGroup:"",MountainClimbing:"",TagUnknown:"",TagUnknownMirror:"",TagUnknown12:"",TagUnknown12Mirror:"",Link12:"",Presentation:"",Presentation12:"",Lock12:"",BuildDefinition:"",ReleaseDefinition:"",SaveTemplate:"",UserGauge:"",BlockedSiteSolid12:"",TagSolid:"",OfficeChat:""}},t)}function fp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-16"',src:"url('"+e+"fabric-icons-16-9cf93f3b.woff') format('woff')"},icons:{OfficeChatSolid:"",MailSchedule:"",WarningSolid:"",Blocked2Solid:"",SkypeCircleArrow:"",SkypeArrow:"",SyncStatus:"",SyncStatusSolid:"",ProjectDocument:"",ToDoLogoOutline:"",VisioOnlineLogoFill32:"",VisioOnlineLogo32:"",VisioOnlineLogoCloud32:"",VisioDiagramSync:"",Event12:"",EventDateMissed12:"",UserOptional:"",ResponsesMenu:"",DoubleDownArrow:"",DistributeDown:"",BookmarkReport:"",FilterSettings:"",GripperDotsVertical:"",MailAttached:"",AddIn:"",LinkedDatabase:"",TableLink:"",PromotedDatabase:"",BarChartVerticalFilter:"",BarChartVerticalFilterSolid:"",MicOff2:"",MicrosoftTranslatorLogo:"",ShowTimeAs:"",FileRequest:"",WorkItemAlert:"",PowerBILogo16:"",PowerBILogoBackplate16:"",BulletedListText:"",BulletedListBullet:"",BulletedListTextMirrored:"",BulletedListBulletMirrored:"",NumberedListText:"",NumberedListNumber:"",NumberedListTextMirrored:"",NumberedListNumberMirrored:"",RemoveLinkChain:"",RemoveLinkX:"",FabricTextHighlight:"",ClearFormattingA:"",ClearFormattingEraser:"",Photo2Fill:"",IncreaseIndentText:"",IncreaseIndentArrow:"",DecreaseIndentText:"",DecreaseIndentArrow:"",IncreaseIndentTextMirrored:"",IncreaseIndentArrowMirrored:"",DecreaseIndentTextMirrored:"",DecreaseIndentArrowMirrored:"",CheckListText:"",CheckListCheck:"",CheckListTextMirrored:"",CheckListCheckMirrored:"",NumberSymbol:"",Coupon:"",VerifiedBrand:"",ReleaseGate:"",ReleaseGateCheck:"",ReleaseGateError:"",M365InvoicingLogo:"",RemoveFromShoppingList:"",ShieldAlert:"",FabricTextHighlightComposite:"",Dataflows:"",GenericScanFilled:"",DiagnosticDataBarTooltip:"",SaveToMobile:"",Orientation2:"",ScreenCast:"",ShowGrid:"",SnapToGrid:"",ContactList:"",NewMail:"",EyeShadow:"",FabricFolderConfirm:"",InformationBarriers:"",CommentActive:"",ColumnVerticalSectionEdit:"",WavingHand:"",ShakeDevice:"",SmartGlassRemote:"",Rotate90Clockwise:"",Rotate90CounterClockwise:"",CampaignTemplate:"",ChartTemplate:"",PageListFilter:"",SecondaryNav:"",ColumnVerticalSection:"",SkypeCircleSlash:"",SkypeSlash:""}},t)}function hp(e,t){void 0===e&&(e=""),Dn({style:{MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",fontStyle:"normal",fontWeight:"normal",speak:"none"},fontFace:{fontFamily:'"FabricMDL2Icons-17"',src:"url('"+e+"fabric-icons-17-0c4ed701.woff') format('woff')"},icons:{CustomizeToolbar:"",DuplicateRow:"",RemoveFromTrash:"",MailOptions:"",Childof:"",Footer:"",Header:"",BarChartVerticalFill:"",StackedColumnChart2Fill:"",PlainText:"",AccessibiltyChecker:"",DatabaseSync:"",ReservationOrders:"",TabOneColumn:"",TabTwoColumn:"",TabThreeColumn:"",BulletedTreeList:"",MicrosoftTranslatorLogoGreen:"",MicrosoftTranslatorLogoBlue:"",InternalInvestigation:"",AddReaction:"",ContactHeart:"",VisuallyImpaired:"",EventToDoLogo:"",Variable2:"",ModelingView:"",DisconnectVirtualMachine:"",ReportLock:"",Uneditable2:"",Uneditable2Mirrored:"",BarChartVerticalEdit:"",GlobalNavButtonActive:"",PollResults:"",Rerun:"",QandA:"",QandAMirror:"",BookAnswers:"",AlertSettings:"",TrimStart:"",TrimEnd:"",TableComputed:"",DecreaseIndentLegacy:"",IncreaseIndentLegacy:"",SizeLegacy:""}},t)}var mp;On("@fluentui/font-icons-mdl2","8.1.20"),void 0===mp&&(mp="https://spoppe-b.azureedge.net/files/fabric-cdn-prod_20210407.001/assets/icons/"),[Yd,$d,Xd,Jd,ep,tp,np,op,rp,ip,ap,sp,lp,up,cp,dp,pp,fp,hp].forEach((function(e){return e(mp,void 0)})),Rn("trash","delete"),Rn("onedrive","onedrivelogo"),Rn("alertsolid12","eventdatemissed12"),Rn("sixpointstar","6pointstar"),Rn("twelvepointstar","12pointstar"),Rn("toggleon","toggleleft"),Rn("toggleoff","toggleright"),(0,n.render)(e.createElement(Qd,null),document.getElementById("react-root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,