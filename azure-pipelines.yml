# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4


resources:
  repositories:
   - repository: DiagnosticServer
     type: git
     name: Antares/AAPT-Antares-DiagnosticServer
   

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md



pool:
  vmImage: 'windows-latest'

variables:
  solution: 'DaaS/**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  LOCATION: 'West US 2'
  RESOURCE_GROUP: 'DAAS-DevOps-Testing'
  GitRepoAspNet: https://github.com/puneetg1983/WebCampGit

steps:

- checkout: DiagnosticServer
- checkout: self 
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restore DaaS'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'config'
    nugetConfigPath: 'DaaS/nuget.config'

- task: DotNetCoreCLI@2
  displayName: 'Restore DiagServer'
  inputs:
    command: 'restore'
    projects: 'AAPT-Antares-DiagnosticServer/**/*.csproj'
    feedsToUse: 'config'
    nugetConfigPath: 'AAPT-Antares-DiagnosticServer/nuget.config'


- task: VSBuild@1
  displayName: 'Build DiagServer'
  inputs:
    solution: 'AAPT-Antares-DiagnosticServer/**/*.sln'
    msbuildArgs: '/p:Configuration=Release /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishProfile=FolderProfile.pubxml /p:PackageAsSingleFile=true /p:publishUrl="$(build.artifactStagingDirectory)\\"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'


- task: VSBuild@1
  displayName: 'Build DaaS'
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:Configuration=Release /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishProfile=FolderProfile.pubxml /p:PackageAsSingleFile=true /p:publishUrl="$(build.artifactStagingDirectory)\\"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Delete additional files'
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\Configuration -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DiagnosticTools -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\amd64 -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\staticcontent -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\x64 -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\x86 -Verbose
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\DiagnosticAnalysis -Verbose
      Remove-Item $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\* -include *.ps1, *.html -Verbose
      Remove-Item $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\Dia2Lib.dll -Verbose
      Remove-Item $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\OSExtensions.dll -Verbose
      Remove-Item $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\TraceReloggerLib.dll -Verbose

      $fileVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo("$Env:BUILD_ARTIFACTSTAGINGDIRECTORY\bin\daas.dll").FileVersion
      $fileVersion

      Write-Host "##vso[task.setvariable variable=DAAS_VERSION]$fileVersion"

      $uniqueSiteName = "daasdevops" + (Get-Date -Format "yyyyMMdd-hhmm")
      Write-Host "##vso[task.setvariable variable=SITE_NAME]$uniqueSiteName"


- task: CmdLine@2
  displayName: 'Install dotnet-monitor'
  inputs:
    script: |     
      echo Installing dotnet monitor
      dotnet tool install dotnet-monitor --version 6.2.2 --tool-path '$(build.artifactStagingDirectory)/dotnet-monitor'

- task: ArchiveFiles@2
  displayName: 'Create Daas Site Extension Zip file'
  inputs:
    rootFolderOrFile: '$(build.artifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/DaaS_$(Build.BuildId).zip'
    replaceExistingArchive: true


- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/DaaS_$(Build.BuildId).zip'
    destinationFolder: '$(build.artifactStagingDirectory)/$(DAAS_VERSION)'
    cleanDestinationFolder: true
    overwriteExistingFiles: true

- task: ArchiveFiles@2
  displayName: 'Create DaaS RU zip'
  inputs:
    rootFolderOrFile: '$(build.artifactStagingDirectory)/$(DAAS_VERSION)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/DaaS.$(DAAS_VERSION).zip'
    replaceExistingArchive: true
    verbose: true

- task: PowerShell@2
  displayName: 'Clean-up build artifacts folder'
  inputs:
    targetType: 'inline'
    script: |
      md $Env:AGENT_BUILDDIRECTORY\Temp\SiteExt
      Copy-Item -Path $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DaaS_$Env:BUILD_BUILDID.zip -Destination $Env:AGENT_BUILDDIRECTORY\Temp\SiteExt\DaaS_$Env:BUILD_BUILDID.zip -Verbose
      Copy-Item -Path $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DaaS.$Env:DAAS_VERSION.zip -Destination $Env:AGENT_BUILDDIRECTORY\Temp\SiteExt\DaaS.$Env:DAAS_VERSION.zip -Verbose

      Write-Host Cleaning up ARTIFACTSTAGINGDIRECTORY
      Remove-Item -Recurse -Force $Env:BUILD_ARTIFACTSTAGINGDIRECTORY -Verbose

      md $Env:BUILD_ARTIFACTSTAGINGDIRECTORY
      Copy-Item -Path $Env:AGENT_BUILDDIRECTORY\Temp\SiteExt\DaaS_$Env:BUILD_BUILDID.zip -Destination $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DaaS_$Env:BUILD_BUILDID.zip
      Copy-Item -Path $Env:AGENT_BUILDDIRECTORY\Temp\SiteExt\DaaS.$Env:DAAS_VERSION.zip -Destination $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DaaS.$Env:DAAS_VERSION.zip
      Write-Host FileVersion is $Env:DAAS_VERSION
    failOnStderr: true
    showWarnings: true

# - task: AzurePowerShell@5
#   displayName: 'Setup new WebApp and upload DaaS bits'
#   inputs:
#     azureSubscription: 'Private Test Sub PUNEETG(6b6db65f-680e-4650-b97d-e82ed6a0f583)'
#     ScriptType: 'InlineScript'
#     Inline: |

#       try {
#         Write-Host ("Selected ResourceGroup is " + $Env:RESOURCE_GROUP)
#         Write-Host "Removing WebApps"
#         Get-AzResource -ResourceGroupName $Env:RESOURCE_GROUP -ResourceType Microsoft.Web/sites | Remove-AzResource -Force
        
#         Write-Host "Removing App Service Plans"
#         Get-AzResource -ResourceGroupName $Env:RESOURCE_GROUP -ResourceType Microsoft.Web/serverfarms | Remove-AzResource -Force
#       }
#       catch {
#         Write-Host "Encountered " + $_.Exception + " while cleaning up old resources"
#       }

#       Write-Host "Checking availability of Storage Account"
#       $storageAccountName = "daasdevopsstorage"
#       $checkNameAvail = (Get-AzStorageAccountNameAvailability -Name $storageAccountName) | Select-Object NameAvailable

#       if ($checkNameAvail.NameAvailable) {
#         Write-Host "Storage Account name is available. Creating storage account"
#         $storageAccount = (New-AzStorageAccount -ResourceGroupName $Env:RESOURCE_GROUP `
#           -AccountName $storageAccountName `
#           -Location $Env:LOCATION `
#           -SkuName "Standard_GRS" `
#           -AllowBlobPublicAccess $false)
#       } else {
#         Write-Host "Getting existing storage account"
#         $storageAccount = Get-AzStorageAccount -ResourceGroupName $Env:RESOURCE_GROUP -StorageAccountName $storageAccountName
#       }

#       Write-Host "Generating SAS URI"
#       $sasUrl = New-AzStorageAccountSASToken -Context $storageAccount.context -Service Blob,Table,Queue -ResourceType Container,Object -Permission "acdlpruw" -ExpiryTime (Get-Date).AddDays(1)
#       $sasUrl = "https://daasdevopsstorage.blob.core.windows.net/memorydumps" + $sasurl

#       Write-Host "Creating App Service Plan"
#       New-AzAppServicePlan -Name $Env:SITE_NAME -ResourceGroupName $Env:RESOURCE_GROUP -Location $Env:LOCATION -Tier "Basic" -WorkerSize "Small" | Out-Null

#       Write-Host "Creating Web App"
#       New-AzWebApp -Name $Env:SITE_NAME -ResourceGroupName $Env:RESOURCE_GROUP -Location $Env:LOCATION -AppServicePlan $Env:SITE_NAME | Out-Null
#       Set-AzWebApp -Name $Env:SITE_NAME -ResourceGroupName $Env:RESOURCE_GROUP -AlwaysOn $true | Out-Null

#       Write-Host "Adding AppSettings for WebApp"
#       $setting=@{"MSBUILD_PATH"="%MSBUILD_15_DIR%\\msbuild.exe";"WEBSITE_DAAS_STORAGE_SASURI"= "$sasUrl";"WEBSITE_DAAS_STORAGE_RESOURCEID"= "/resource/subscriptions/6b6db65f-680e-4650-b97d-e82ed6a0f583/resourceGroups/DAAS-DevOps-Testing/providers/Microsoft.Storage/storageAccounts/daasdevopsstorage"}
#       Set-AzWebApp -AppSettings $setting -Name $Env:SITE_NAME -ResourceGroupName $Env:RESOURCE_GROUP | Out-Null

#       $srcWebApp = Get-AzWebApp -Name $Env:SITE_NAME -ResourceGroupName $Env:RESOURCE_GROUP
#       [xml]$publishProfileXml = Get-AzWebAppPublishingProfile -WebApp $srcWebApp

#       $publishProfile = $publishProfileXml.publishData.publishProfile[0]
#       $kuduEndpoint = $publishProfile.publishUrl
#       [string]$userName = $publishProfile.userName
#       [string]$publishingPassword = $publishProfile.userPWD
#       $authorizationHeader = "Basic {0}" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $userName, $publishingPassword)))
#       Write-Host ("KuduEndpoint = " + $kuduEndpoint + ". Going to upload SiteExtension bits now")

#       $kuduApiUrl = "https://$kuduEndpoint/api/zip/SiteExtensions/DaaS/"
#       try {
      
#         # Adding below to speed up call to Invoke-RestMethod
#         $ProgressPreference = 'SilentlyContinue'
        
#         $sw = [Diagnostics.Stopwatch]::StartNew()
#         Invoke-RestMethod -Uri $kuduApiUrl `
#           -Headers @{"Authorization"=$authorizationHeader;"If-Match"="*"} `
#           -Method PUT `
#           -InFile $Env:BUILD_ARTIFACTSTAGINGDIRECTORY\DaaS_$Env:BUILD_BUILDID.zip `
#           -ContentType "multipart/form-data" | Out-Null
        
#         $sw.Stop()
#         Write-Host ("Uploaded site extension in " + $sw.Elapsed)
#       }
#       catch {
#         Write-Host "Encountered " + $_.Exception.Response.StatusCode + " while uploading DaaS site extension"
#       }

#       Write-Host "Stopping Web App"
#       Invoke-AzResourceAction -ResourceId $srcWebApp.Id -Action stop -Force

#       Write-Host "Starting Web App"
#       Invoke-AzResourceAction -ResourceId $srcWebApp.Id -Action start -Force

#       Write-Host "Checking DaaS version"
#       $retryCount = 0;
#       $succeeded = $false
#       while( ($retryCount -lt 2) -and ($succeeded -eq $false))
#       {
#         try
#         {
#           $DaaSVersion = Invoke-RestMethod -Uri "https://$kuduEndpoint/daas/api/v2/daasversion" `
#           -Headers @{"Authorization"=$authorizationHeader;"If-Match"="*"}

#           Write-Host ("DaasVersion is " + $DaaSVersion)
#           $succeeded = $true
#         }
#         catch 
#         {
#           Write-Host "StatusCode: " $_.Exception.Response.StatusCode.value__
#           Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
#           $retryCount++
#         }
#       }
      
#       if ($succeeded -eq $false)
#       {
#         throw "Call to get DaaS Version failed"
#       }

#       Write-Host "##vso[task.setvariable variable=KUDU_ENDPOINT]$kuduEndpoint"
#       Write-Host "##vso[task.setvariable variable=KUDU_USERNAME]$userName"
#       Write-Host "##vso[task.setvariable variable=KUDU_PASSWORD]$publishingPassword"

#     azurePowerShellVersion: 'LatestVersion'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)'
    artifactName: drop

# - task: VSTest@2
#   inputs:
#     testSelector: 'testAssemblies'
#     testAssemblyVer2: |
#       **\bin\$(BuildConfiguration)\**\*test*.dll
#       !**\obj\**
#       !**\ref\**
#       !**\xunit.runner.visualstudio.testadapter.dll
#       !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
#     searchFolder: '$(System.DefaultWorkingDirectory)'
#     runTestsInIsolation: true
#     codeCoverageEnabled: true
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#   env:
#     TESTING_PUNEET: 'TESTFOO'
#     KUDU_ENDPOINT: $(KUDU_ENDPOINT)
#     KUDU_USERNAME: $(KUDU_USERNAME)
#     KUDU_PASSWORD: $(KUDU_PASSWORD)


# - task: AzurePowerShell@5
#   displayName: 'Delete App and App Service Plan'
#   inputs:
#     azureSubscription: 'Private Test Sub PUNEETG(6b6db65f-680e-4650-b97d-e82ed6a0f583)'
#     ScriptType: 'InlineScript'
#     Inline: |
#       Write-Host "Removing WebApps"
#       Get-AzResource -ResourceGroupName $Env:RESOURCE_GROUP -ResourceType Microsoft.Web/sites | Remove-AzResource -Force
#       Write-Host "Removing App Service Plans"
#       Get-AzResource -ResourceGroupName $Env:RESOURCE_GROUP -ResourceType Microsoft.Web/serverfarms | Remove-AzResource -Force

#     azurePowerShellVersion: 'LatestVersion'

